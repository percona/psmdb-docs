{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Percona Server for MongoDB 4.4 Documentation","text":"<p>Percona Server for MongoDB is an enhanced, fully compatible, source available, drop-in replacement for MongoDB 4.4 Community Edition with enterprise-grade features. To migrate to Percona Server for MongoDB requires no changes to MongoDB applications or code.</p> <p>To see which version of Percona Server for MongoDB you are using check the value of the <code>psmdbVersion</code> key in the output of the buildInfo database command. If this key does not exist, Percona Server for MongoDB is not installed on the server.</p> <p>What\u2019s new in Percona Server for MongoDB 4.4.29-28</p> <p> </p>"},{"location":"index.html#installation-guides","title":"Installation guides","text":"<p>Ready to try out Percona Server for MongoDB? Get started quickly with the step-by-step installation instructions.</p> <p>Quickstart guides </p>"},{"location":"index.html#control-database-access","title":"Control database access","text":"<p>Define who has access to the database and manage their permissions in a single place like LDAP server, ensuring only authorized users have access to resources and operations. </p> <p>Authentication </p>"},{"location":"index.html#backup-and-restore","title":"Backup and restore","text":"<p>Make enterprise-level backups and restores with guaranteed data consistency using Percona Backup for MongoDB (PBM). Or, create physical backups on a running server using the built-in hot backup functionality. </p> <p>Get started with PBM </p>"},{"location":"index.html#secure-access-to-data","title":"Secure access to data","text":"<p>Keep your sensitive data safe, ensuring users only see the data they are authorized to access. </p> <p>Data-at-rest encryption </p>"},{"location":"index.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"404.html","title":"404 - Not Found","text":"<p>We can\u2019t find the page you are looking for. Try using the Search or return to the homepage.</p>"},{"location":"404.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"audit-logging.html","title":"Auditing","text":"<p>Auditing allows administrators to track and log user activity on a MongoDB server. With auditing enabled, the server will generate an audit log file. This file contains information about different user events including authentication, authorization failures, and so on.</p> <p>To enable audit logging, specify where to send audit events using the <code>--auditDestination</code> option on the command line or the <code>auditLog.destination</code> variable in the configuration file.</p> <p>If you want to output events to a file, also specify the format of the file using the <code>--auditFormat</code> option or the <code>auditLog.format</code> variable, and the path to the file using the <code>--auditPath</code> option or the <code>auditLog.path</code> variable.</p> <p>To filter recorded events, use the <code>--auditFilter</code> option or the <code>auditLog.filter</code> variable.</p> <p>For example, to log only events from a user named tim and write them to a JSON file <code>/var/log/psmdb/audit.json</code>, start the server with the following parameters:</p> <pre><code>$ mongod \\\n --dbpath data/db\n --auditDestination file \\\n --auditFormat JSON \\\n --auditPath /var/log/psmdb/audit.json \\\n --auditFilter '{ \"users.user\" : \"tim\" }'\n</code></pre> <p>The options in the previous example can be used as variables in the MongoDB configuration file:</p> <pre><code>storage:\n  dbPath: data/db\nauditLog:\n  destination: file\n  format: JSON\n  path: /var/log/psmdb/audit.json\n  filter: '{ \"users.user\" : \"tim\" }'\n</code></pre> <p>This example shows how to send audit events to the <code>syslog</code>. Specify the following parameters:</p> <pre><code>mongod \\\n--dbpath data/db\n--auditDestination syslog \\\n</code></pre> <p>Alternatively, you can edit the MongoDB configuration file:</p> <pre><code>storage:\n dbPath: data/db\nauditLog:\n destination: syslog\n</code></pre> <p>Note</p> <p>If you start the server with auditing enabled, you cannot disable auditing dynamically during runtime.</p>"},{"location":"audit-logging.html#audit-options","title":"Audit options","text":"<p>The following options control audit logging:</p> Command line Configuration file Type Description <code>--auditDestination()</code> <code>auditLog.destination</code> string Enables auditing and specifies where to send audit events:  - <code>console</code>: Output audit events to <code>stdout</code>.  - <code>file</code>: Output audit events to a file specified by the <code>--auditPath</code> option in a format specified by the <code>--auditFormat</code> option.  - <code>syslog</code>: Output audit events to <code>syslog</code> <code>--auditFilter()</code> <code>auditLog.filter</code> string Specifies a filter to apply to incoming audit events, enabling the administrator to only capture a subset of them. The value must be interpreted as a query object with the following syntax: <code>{ &lt;field1&gt;: &lt;expression1&gt;, ... }</code>  Audit log events that match this query will be logged. Events that do not match this query will be ignored.  For more information, see Audit filter examples <code>--auditFormat()</code> <code>auditLog.format</code> string Specifies the format of the audit log file, if you set the <code>--auditDestination</code> option to <code>file</code>.  The default value is <code>JSON</code>. Alternatively, you can set it to <code>BSON</code> <code>--auditPath()</code> <code>auditLog.path</code> string Specifies the fully qualified path to the file where audit log events are written, if you set the <code>--auditDestination</code> option to <code>file</code>.  If this option is not specified, then the <code>auditLog.json</code> file is created in the server\u2019s configured log path. If log path is not configured on the server, then the <code>auditLog.json</code> file is created in the current directory (from which <code>mongod</code> was started).  NOTE: This file will rotate in the same manner as the system log path, either on server reboot or using the <code>logRotate</code> command. The time of rotation will be added to the old file\u2019s name."},{"location":"audit-logging.html#audit-message-syntax","title":"Audit message syntax","text":"<p>Audit logging writes messages in JSON format with the following syntax:</p> <pre><code>{\n  atype: &lt;String&gt;,\n  ts : { \"$date\": &lt;timestamp&gt; },\n  local: { ip: &lt;String&gt;, port: &lt;int&gt; },\n  remote: { ip: &lt;String&gt;, port: &lt;int&gt; },\n  users : [ { user: &lt;String&gt;, db: &lt;String&gt; }, ... ],\n  roles: [ { role: &lt;String&gt;, db: &lt;String&gt; }, ... ],\n  param: &lt;document&gt;,\n  result: &lt;int&gt;\n}\n</code></pre> Parameter Description <code>atype</code> Event type <code>ts</code> Date and UTC time of the event <code>local</code> Local IP address and port number of the instance <code>remote</code> Remote IP address and port number of the incoming connection associated with the event <code>users</code> Users associated with the event <code>roles</code> Roles granted to the user <code>param</code> Details of the event associated with the specific type <code>result</code> Exit code (<code>0</code> for success)"},{"location":"audit-logging.html#audit-filter-examples","title":"Audit filter examples","text":"<p>The following examples show the flexibility of audit log filters.</p> <pre><code>auditLog:\n   destination: file\n      filter: '{atype: {$in: [\n         \"authenticate\", \"authCheck\",\n         \"renameCollection\", \"dropCollection\", \"dropDatabase\",\n         \"createUser\", \"dropUser\", \"dropAllUsersFromDatabase\", \"updateUser\",\n         \"grantRolesToUser\", \"revokeRolesFromUser\", \"createRole\", \"updateRole\",\n         \"dropRole\", \"dropAllRolesFromDatabase\", \"grantRolesToRole\", \"revokeRolesFromRole\",\n         \"grantPrivilegesToRole\", \"revokePrivilegesFromRole\",\n         \"replSetReconfig\",\n         \"enableSharding\", \"shardCollection\", \"addShard\", \"removeShard\",\n         \"shutdown\",\n         \"applicationMessage\"\n      ]}}'\n</code></pre>"},{"location":"audit-logging.html#standard-query-selectors","title":"Standard query selectors","text":"<p>You can use query selectors, such as <code>$eq</code>, <code>$in</code>, <code>$gt</code>, <code>$lt</code>, <code>$ne</code>, and others to log multiple event types.</p> <p>For example, to log only the <code>dropCollection</code> and <code>dropDatabase</code> events:</p> Command lineConfig file <pre><code>--auditDestination file --auditFilter '{ atype: { $in: [ \"dropCollection\", \"dropDatabase\" ] } }'\n</code></pre> <pre><code>auditLog:\n  destination: file\n  filter: '{ atype: { $in: [ \"dropCollection\", \"dropDatabase\" ] } }'\n</code></pre>"},{"location":"audit-logging.html#regular-expressions","title":"Regular expressions","text":"<p>Another way to specify multiple event types is using regular expressions.</p> <p>For example, to filter all <code>drop</code> operations:</p> Command lineConfig file <pre><code>--auditDestination file --auditFilter '{ \"atype\" : /^drop.*/ }'\n</code></pre> <pre><code>auditLog:\n  destination: file\n  filter: '{ \"atype\" : /^drop.*/ }'\n</code></pre>"},{"location":"audit-logging.html#read-and-write-operations","title":"Read and write operations","text":"<p>By default, operations with successful authorization are not logged, so for this filter to work, enable <code>auditAuthorizationSuccess</code> parameter, as described in Enabling auditing of authorization success.</p> <p>For example, to filter read and write operations on all the collections in the <code>test</code> database:</p> <p>Note</p> <p>The dot (<code>.</code>) after the database name in the regular expression must be escaped with two backslashes (<code>\\\\\\\\</code>).</p> Command lineConfig file <pre><code>--setParameter auditAuthorizationSuccess=true --auditDestination file --auditFilter '{ atype: \"authCheck\", \"param.command\": { $in: [ \"find\", \"insert\", \"delete\", \"update\", \"findandmodify\" ] }, \"param.ns\": /^test\\\\./ } }'\n</code></pre> <pre><code>auditLog:\n  destination: file\n  filter: '{ atype: \"authCheck\", \"param.command\": { $in: [ \"find\", \"insert\", \"delete\", \"update\", \"findandmodify\" ] }, \"param.ns\": /^test\\\\./ } }'\n\nsetParameter: { auditAuthorizationSuccess: true }\n</code></pre>"},{"location":"audit-logging.html#enabling-auditing-of-authorization-success","title":"Enabling auditing of authorization success","text":"<p>By default, only authorization failures for the <code>authCheck</code> action are logged by the audit system. <code>authCheck</code> is for authorization by role-based access control, it does not concern authentication at logins.</p> <p>To enable logging of authorization successes, set the <code>auditAuthorizationSuccess</code> parameter to <code>true</code>. Audit events will then be triggered by every command, including CRUD ones.</p> <p>Warning</p> <p>Enabling the <code>auditAuthorizationSuccess</code> parameter heavily impacts the performance compared to logging only authorization failures.</p> <p>You can enable it on a running server using the following command:</p> <pre><code>db.adminCommand( { setParameter: 1, auditAuthorizationSuccess: true } )\n</code></pre> <p>To enable it on the command line, use the following option when running <code>mongod</code> or <code>mongos</code> process:</p> <pre><code>--setParameter auditAuthorizationSuccess=true\n</code></pre> <p>You can also add it to the configuration file as follows:</p> <pre><code>setParameter:\n  auditAuthorizationSuccess: true\n</code></pre>"},{"location":"audit-logging.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"authentication.html","title":"Authentication","text":"<p>Authentication is the process of verifying a client\u2019s identity. Normally, a client needs to authenticate themselves against the MongoDB server user database before doing any work or reading any data from a <code>mongod</code> or <code>mongos</code> instance.</p> <p>By default, Percona Server for MongoDB provides a SCRAM authentication mechanism where clients authenticate themselves by providing their user credentials. In addition, you can integrate Percona Server for MongoDB with a separate service, such as OpenLDAP or Active Directory. This enables users to access the database with the same credentials they use for their emails or workstations.</p> <p>You can use any of these authentication mechanisms supported in Percona Server for MongoDB:</p> <ul> <li>SCRAM(default)</li> <li>x.509 certificate authentication</li> <li>LDAP authentication with SASL</li> <li>Kerberos Authentication</li> <li>Authentication and authorization with direct binding to LDAP</li> <li>AWS IAM authentication</li> </ul>"},{"location":"authentication.html#scram","title":"SCRAM","text":"<p>SCRAM is the default authentication mechanism. Percona Server for MongoDB verifies the credentials against the user\u2019s name, password and the database where the user record is created for a client (authentication database). For how to enable this mechanism, see Enable Authentication.</p>"},{"location":"authentication.html#x509-certificate-authentication","title":"x.509 certificate authentication","text":"<p>This authentication mechanism enables a client to authenticate in Percona Server for MongoDB by providing an x.509 certificate instead of user credentials. Each certificate contains the <code>subject</code> field defined in the DN format. In Percona Server for MongoDB, each certificate has a corresponding user record in the <code>$external</code> database. When a user connects to the database, Percona Server for MongoDB matches the <code>subject</code> value against the usernames defined in the <code>$external</code> database.</p> <p>For production use, we recommend using valid CA certificates. For testing purposes, you can generate and use self-signed certificates.</p> <p>x.509 authentication is compatible with with LDAP authorization to enable you to control user access and operations in Percona Server for MongoDB. For configuration guidelines, refer to Set up x.509 authentication and LDAP authorization.</p> <p>See also</p> <p>MongoDB Documentation: x.509</p> <p>Percona Blog: Setting up MongoDB with Member x509 auth and SSL + easy-rsa</p>"},{"location":"authentication.html#ldap-authentication-with-sasl","title":"LDAP authentication with SASL","text":"<p>LDAP authentication with SASL means that both the client and the server establish a SASL session using the SASL library. Then authentication (bind) requests are sent to the LDAP server through the SASL authentication daemon (<code>saslauthd</code>) that acts as a remote proxy for the <code>mongod</code> server.</p> <p>The following components are necessary for external authentication to work:</p> <ul> <li> <p>LDAP Server: Remotely stores all user credentials (i.e. user name and associated password).</p> </li> <li> <p>SASL Daemon: Used as a MongoDB server-local proxy for the remote LDAP service.</p> </li> <li> <p>SASL Library: Used by the MongoDB client and server to create data necessary for the authentication mechanism.</p> </li> </ul> <p>The following image illustrates this architecture:</p> <p></p> <p>An authentication session uses the following sequence:</p> <ol> <li>A <code>mongo</code> client connects to a running <code>mongod</code> instance.</li> <li>The client creates a <code>PLAIN</code> authentication request using the SASL library.</li> <li>The client then sends this SASL request to the server as a special mongo command.</li> <li>The <code>mongod</code> server receives this SASL Message, with its authentication request payload.</li> <li>The server then creates a SASL session scoped to this client, using its own reference to the SASL library.</li> <li>Then the server passes the authentication payload to the SASL library, which in turn passes it on to the <code>saslauthd</code> daemon.</li> <li>The <code>saslauthd</code> daemon passes the payload on to the LDAP service to get a YES or NO authentication response (in other words, does this user exist and is the password correct).</li> <li>The YES/NO response moves back from <code>saslauthd</code>, through the SASL library, to <code>mongod</code>.</li> <li>The <code>mongod</code> server uses this YES/NO response to authenticate the client or reject the request.</li> <li>If successful, the client has authenticated and can proceed.</li> </ol> <p>For configuration instructions, refer to Setting up LDAP authentication with SASL.</p>"},{"location":"authentication.html#kerberos-authentication","title":"Kerberos authentication","text":"<p>Percona Server for MongoDB supports Kerberos authentication starting from release 4.4.0-1.</p> <p>This authentication mechanism involves the use of a Key Distribution Center (KDC) - a symmetric encryption component which operates with tickets. A ticket is a small amount of encrypted data which is used for authentication. It is issued for a user session and has a limited lifetime.</p> <p>When using Kerberos authentication, you also operate with principals and realms.</p> <p>A realm is the logical network, similar to a domain, for all Kerberos nodes under the same master KDC.</p> <p>A principal is a user or a service which is known to Kerberos. A principal name is used for authentication in Kerberos. A service principal represents the service, e.g. <code>mongodb</code>. A user principal represents the user. The user principal name corresponds to the username in the <code>$external</code> database in Percona Server for MongoDB.</p> <p>The following diagram shows the authentication workflow:</p> <p></p> <p>The sequence is the following:</p> <ol> <li> <p>A <code>mongo</code> client sends the Ticket-Grantng Ticket (TGT) request to the Key Distribution Center (KDC)</p> </li> <li> <p>The KDC issues the ticket and sends it to the <code>mongo</code> client.</p> </li> <li> <p>The <code>mongo</code> client sends the authentication request to the <code>mongo</code> server presenting the ticket.</p> </li> <li> <p>The <code>mongo</code> server validates the ticket in the KDC.</p> </li> <li> <p>Upon successful ticket validation, the authentication request is approved and the user is authenticated.</p> </li> </ol> <p>Kerberos authentication in Percona Server for MongoDB is implemented the same way as in MongoDB Enterprise.</p> <p>See also</p> <p>MongoDB Documentation: Kerberos Authentication</p>"},{"location":"authentication.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"authorization.html","title":"LDAP authorization","text":"<p>LDAP authorization allows you to control user access and operations in your database environment using the centralized user management storage \u2013 an LDAP server. You create and manage user credentials and permission information in the LDAP server. In addition, you create roles in the <code>admin</code> database with the names that exactly match the LDAP group Distinguished Name. These roles define what privileges the users who belong to the corresponding LDAP group.</p>"},{"location":"authorization.html#supported-authentication-mechanisms","title":"Supported authentication mechanisms","text":"<p>LDAP authorization is compatible with the following authentication mechanisms:</p> <ul> <li> <p>x.509 certificate authentication</p> </li> <li> <p>Kerberos Authentication</p> </li> <li> <p>Authentication and authorization with direct binding to LDAP</p> </li> </ul>"},{"location":"authorization.html#authentication-and-authorization-with-direct-binding-to-ldap","title":"Authentication and authorization with direct binding to LDAP","text":"<p>Starting with release 4.2.5-5, you can configure Percona Server for MongoDB to communicate with the LDAP server directly to authenticate and also authorize users.</p> <p>The advantage of using this mechanism is that it is easy to setup and does not require pre-creating users  in the dummy <code>$external</code> db. Nevertheless, the <code>--authenticationDatabase</code> connection argument will still need to be specified as <code>$external</code>.</p> <p>The following example illustrates the connection to Percona Server for MongoDB from the <code>mongo</code> shell:</p> <pre><code>$ mongo -u \"CN=alice,CN=Users,DC=engineering,DC=example,DC=com\" -p --authenticationDatabase '$external' --authenticationMechanism PLAIN\n</code></pre> <p>The following diagram illustrates the authentication and authorization flow:</p> <p></p> <ol> <li> <p>A user connects to the db providing their credentials</p> </li> <li> <p>If required, Percona Server for MongoDB transforms the username to match the user in the LDAP server according to the mapping rules specified for the <code>--ldapUserToDNMapping</code> parameter.</p> </li> <li> <p>Percona Server for MongoDB queries the LDAP server for the user identity and /or the LDAP groups this user belongs to.</p> </li> <li> <p>The LDAP server evaluates the query and if a user exists, returns their LDAP groups.</p> </li> <li> <p>Percona Server for MongoDB authorizes the user by mapping the DN of the returned groups against the roles assigned to the user in the <code>admin</code> database.  If a user belongs to several groups they receive permissions associated with every group.</p> </li> </ol>"},{"location":"authorization.html#username-transformation","title":"Username transformation","text":"<p>If clients connect to Percona Server for MongoDB with usernames that are not LDAP , these usernames must be converted to the format acceptable by LDAP.</p> <p>To achieve this,  the <code>--ldapUserToDNMapping</code> parameter is available in Percona Server for MongoDB configuration.</p> <p>The <code>--ldapUserToDNMapping</code> parameter is a JSON string representing an ordered array of rules expressed as JSON documents. Each document provides a regex pattern (<code>match</code> field) to match against a provided username. If that pattern matches, there are two ways to continue:</p> <ul> <li> <p>If there is the <code>substitution</code> value, then the matched pattern becomes the username of the user for further processing.</p> </li> <li> <p>If there is the <code>ldapQuery</code> value, the matched pattern is sent to the LDAP server and the result of that LDAP query becomes the  of the user for further processing.</p> </li> </ul> <p>Both <code>substitution</code> and <code>ldapQuery</code> should contain placeholders to insert parts of the original username \u2013 those placeholders are replaced with regular expression submatches found on the <code>match</code> stage.</p> <p>So having an array of documents, Percona Server for MongoDB tries to match each document against the provided name and if it matches, the name is replaced either with the substitution string or with the result of the LDAP query.</p>"},{"location":"authorization.html#ldap-referrals","title":"LDAP referrals","text":"<p>As of version 4.4.2-4, Percona Server for MongoDB supports LDAP referrals as defined in RFC 4511 4.1.10. For security reasons, referrals are disabled by default. Double-check that using referrals is safe before enabling them.</p> <p>To enable LDAP referrals, set the <code>ldapFollowReferrals</code> server parameter to <code>true</code> using the setParameter command or by editing the configuration file.</p> <pre><code>setParameter:\n   ldapFollowReferrals: true\n</code></pre>"},{"location":"authorization.html#connection-pool","title":"Connection pool","text":"<p>As of version 4.4.2-4, Percona Server for MongoDB always uses a connection pool to LDAP server to process bind requests. The connection pool is enabled by default. The default connection pool size is 2 connections.</p> <p>You can change the connection pool size either at the server startup or dynamically by specifying the value for the <code>ldapConnectionPoolSizePerHost</code> server parameter.</p> <p>For example, to set the number of connections in the pool to 5, use the setParameter command:</p> Command lineConfiguration file <pre><code>&gt;db.adminCommand( { setParameter: 1, ldapConnectionPoolSizePerHost: 5  } )\n</code></pre> <pre><code>setParameter:\n  ldapConnectionPoolSizePerHost: 5\n</code></pre>"},{"location":"authorization.html#support-for-multiple-ldap-servers","title":"Support for multiple LDAP servers","text":"<p>As of version 4.4.3-5, you can specify multiple LDAP servers for failover. Percona Server for MongoDB sends bind requests to the first server defined in the list. When this server is down or unavailable, it sends requests to the next server  and so on. Note that Percona Server for MongoDB keeps sending requests to this server even after the unavailable server recovers.</p> <p>Specify the LDAP servers as a comma-separated list in the format <code>&lt;host&gt;:&lt;port&gt;</code> for the \u2013ldapServers option.</p> <p>You can define the option value at the server startup by editing the configuration file.</p> <pre><code>security:\n  authorization: \"enabled\"\n  ldap:\n    servers: \"ldap1.example.net,ldap2.example.net\"\n</code></pre> <p>You can change <code>ldapServers</code> dynamically at runtime using the setParameter.</p> <pre><code>&gt; db.adminCommand( { setParameter: 1, ldapServers:\"localhost,ldap1.example.net,ldap2.example.net\"} )\n{ \"was\" : \"ldap1.example.net,ldap2.example.net\", \"ok\" : 1 }\n</code></pre> <p>See also</p> <p>MongoDB Documentation:</p> <ul> <li>Authenticate and Authorize Users Using Active Directory via Native LDAP</li> <li>LDAP referrals</li> </ul>"},{"location":"authorization.html#configuration","title":"Configuration","text":"<p>For how to configure LDAP authorization with the native LDAP authentication, see Setting up LDAP authentication and authorization using NativeLDAP.</p>"},{"location":"authorization.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"aws-iam-setup.html","title":"Setting up AWS IAM authentication","text":"<p>This document provides guidelines how to configure Percona Server for MongoDB to use AWS IAM authentication. The use of this authentication method enables you to natively integrate Percona Server for MongoDB with AWS services, increase security of your infrastructure by setting up password-less authentication and offload your DBAs from managing different sets of secrets. To learn more, see AWS IAM authentication</p> <p>To configure AWS IAM authentication means to set up your AWS environment and configure Percona Server for MongoDB. The AWS environment setup is out of scope of this document. Consult the AWS documentation to perform the following setup steps: </p> <ol> <li>Configure the AWS resource to work with IAM. </li> <li> <p>For user authentication: </p> <ul> <li>Create the IAM user and copy its ARN (Amazon Resource Name)</li> </ul> <p>For role authentication:</p> <ul> <li>Create the IAM role</li> <li>Attach the IAM role to the AWS resource.</li> <li>Copy the ARN of the IAM role. </li> </ul> </li> </ol>"},{"location":"aws-iam-setup.html#configure-percona-server-for-mongodb","title":"Configure Percona Server for MongoDB","text":"<p>The steps are the following:</p> <ol> <li>Create users in the <code>$external</code> database with the username as the IAM user/role ARN</li> <li>Enable authentication and specify the authentication mechanism as <code>MONGODB-AWS</code>.</li> </ol>"},{"location":"aws-iam-setup.html#create-users-in-external-database","title":"Create users in <code>$external</code> database","text":"<p>During the authentication, Percona Server for MongoDB matches the ARN of the IAM user or role retrieved from AWS STS against the user created in the <code>$external</code> database. Thus, the username for this user must include their ARN  and have the following format:</p> User authenticationRole authentication <pre><code>arn:aws:iam::&lt;ARN&gt;:user/&lt;user_name&gt;\n</code></pre> <pre><code>arn:aws:iam::&lt;ARN&gt;:role/&lt;role_name&gt;\n</code></pre> <p>Create a user and assign the required roles to them. Specify the ARN and names in the following example commands:</p> User authenticationRole authentication <pre><code>&gt; use $external\n&gt; db.createUser(\n   {\n       user: \"arn:aws:iam::000000000000:user/myUser\",\n       roles: [{role: \"read\", db: \"admin\"}]\n   }\n)\n</code></pre> <pre><code>&gt; use $external\n&gt; db.createUser(\n   {\n       user: \"arn:aws:iam::111111111111:role/myRole\",\n       roles: [{role: \"read\", db: \"admin\"}]\n   }\n)\n</code></pre>"},{"location":"aws-iam-setup.html#enable-authentication","title":"Enable authentication","text":"<p>Run the following commands as root or via <code>sudo</code></p> <ol> <li> <p>Stop the <code>mongod</code> service</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Edit the <code>/etc/mongod.conf</code> configuration file</p> <pre><code>security:\n  authorization: enabled\n\nsetParameter:\n  authenticationMechanisms: MONGODB-AWS\n</code></pre> </li> <li> <p>Start the <code>mongod</code> service</p> <pre><code>$ sudo systemctl start mongod\n</code></pre> </li> </ol>"},{"location":"aws-iam-setup.html#configure-aws-sts-endpoint","title":"Configure AWS STS endpoint","text":"<p>By default, all authentication requests are sent to the <code>sts.amazonaws.com</code> endpoint. If this endpoint is unavailable for some reason, you can override it and send AWS STS requests to the endpoints of your choice to ensure successful authentication. You must enable the AWS region to use it.</p> <p>Edit the <code>/etc/mongod.conf</code> configuration file and specify the AWS endpoint for the <code>awsStsHost</code> parameter.</p> <pre><code>security:\n  authorization: enabled\n\nsetParameter:\n  authenticationMechanisms: MONGODB-AWS\n  awsStsHost: &lt;aws-endpoint&gt;\n</code></pre> <p>See the list of AWS endpoints.</p>"},{"location":"aws-iam-setup.html#authenticate-in-percona-server-for-mongodb-using-aws-iam","title":"Authenticate in Percona Server for MongoDB using AWS IAM","text":"<p>To test the authentication, use either of the following methods:</p> MongoDB connection stringEnvironment variablesAWS resource metadata <p>Replace <code>&lt;aws_access_key_id&gt;</code>, <code>&lt;aws_secret_access_key&gt;</code> and <code>psmdb.example.com</code> with actual values in the following command:</p> <pre><code>$ mongo 'mongodb://&lt;aws_access_key_id&gt;:&lt;aws_secret_access_key&gt;:@psmdb.example.com/admin?authSource=$external&amp;authMechanism=MONGODB-AWS'\n</code></pre> <p>To pass temporary credentials and AWS token, replace <code>&lt;aws_access_key_id&gt;</code>, <code>&lt;aws_secret_access_key&gt;</code>, <code>&lt;aws_session_token&gt;</code> and <code>psmdb.example.com</code> in the following command:</p> <pre><code>$ mongo 'mongodb://&lt;aws_access_key_id&gt;:&lt;aws_secret_access_key&gt;:@psmdb.example.com/admin?authSource=$external&amp;authMechanism=MONGODB-AWS&amp;authMechanismProperties=AWS_SESSION_TOKEN:&lt;aws_session_token&gt;'\n</code></pre> <p>Set AWS environment variables:</p> <pre><code>export AWS_ACCESS_KEY_ID='&lt;aws_access_key_id&gt;'\nexport AWS_SECRET_ACCESS_KEY='&lt;aws_secret_access_key&gt;'\nexport AWS_SESSION_TOKEN='&lt;aws_session_token&gt;'\n</code></pre> <p>Connect to Percona Server for MongoDB:</p> <pre><code>$ mongo 'mongodb://psmdb.example.com/testdb?authSource=$external&amp;authMechanism=MONGODB-AWS'\n</code></pre> <p>If your application is running on the AWS resource, it receives the credentials from the resource metadata. To connect to Percona Server for MongoDB, run the command as follows:</p> <pre><code>$ mongo --authenticationMechanism=MONGODB-AWS --authenticationDatabase='$external'\n</code></pre> <p>Upon successful authentication, the result should look like the following: </p> <pre><code>&gt; db.runCommand( { connectionStatus: 1 })\n{\n  authInfo: {\n    authenticatedUsers: [\n      {\n        user: 'arn:aws:iam::00000000000:user/myUser',\n        db: '$external'\n      }\n    ],\n    authenticatedUserRoles: [ { role: 'read', db: 'admin' } ]\n  },\n  ok: 1\n}\n</code></pre>"},{"location":"aws-iam-setup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"aws-iam.html","title":"AWS IAM authentication","text":"<p>Version added: 4.4.19-19</p> <p>Important</p> <p>This is a technical preview feature</p> <p>IAM (Identity Access Management) is the AWS service that allows you to securely control access to AWS resources. Percona Server for MongoDB supports authentication with AWS IAM enabling you to use the same AWS credentials both for it and other components of your infrastructure. This saves your DBAs from managing different sets of secrets and frees their time on other activities. </p> <p>You can configure AWS IAM for a password-less authentication. Instead of username and password, the user or the application presents the AWS security credentials for authentication, but the secret key is not sent to Percona Server for MongoDB. This significantly increases the security in your infrastructure. </p> <p>Percona Server for MongoDB supports two authentication types: </p>"},{"location":"aws-iam.html#user-authentication","title":"User authentication","text":"<p>This authentication type is typically used by human operators. Every user account in AWS has the ARN (Amazon Resource Name), which uniquely identifies this account and the user associated with it. During authentication, the ARN is used to verify the user\u2019s identity. </p>"},{"location":"aws-iam.html#role-authentication","title":"Role authentication","text":"<p>This type is typically used for applications / <code>mongo</code> clients. For instance, if your application is running on AWS resources like EC2 instance or ECS (Elastic Container Service) which uses the IAM role assigned to it. Another scenario is to allow users to assume the IAM role and in such a way, grant a user the permissions outlined in the IAM role. The ARN of the IAM role is used to authenticate the application in Percona Server for MongoDB.  </p> <p>For either type of AWS IAM authentication, the flow is the following:</p> <p></p> <ol> <li>A <code>mongo</code> client (a Mongo shell or an application that talks to Percona Server for MongoDB via a driver) gets AWS credentials from either EC2/ECS instance metadata service, environmental variables or MongoDB URI connection string.</li> <li> <p>The <code>mongo</code> client constructs the authentication request which includes the AWS access key ID, token and the signature and sends it to Percona Server for MongoDB</p> <p>Important</p> <p>The <code>mongo</code> client never sends the secret access key to Percona Server for MongoDB.</p> </li> <li> <p>Percona Server for MongoDB sends the received credentials to the AWS STS (Security Token Service) for verification</p> </li> <li> <p>The AWS STS service validates whether the signature is correct and answers with the user / role ARN that created the signature</p> </li> <li>Percona Server for MongoDB looks for the same username as the received ARN in the <code>$external</code> database and grants privileges to access Percona Server for MongoDB as defined for the respective user.</li> </ol> <p>Starting with version 4.4.23-22, you can configure the AWS STS endpoint by specifying the <code>setParameter.awsStsHost</code> in the configuration file. This allows you to send requests to the AWS resources of your choice to meet security requirements of your organization and ensure successful authentication. </p> <p>See also</p> <ul> <li> <p>AWS documentation: </p> <ul> <li>AWS Identity and Access Management</li> <li>Temporary security credentials in IAM</li> <li>Authenticating Requests (AWS Signature Version 4)</li> <li>Managing AWS STS in an AWS Region</li> </ul> </li> <li> <p>MongoDB documentation: Set Up Passwordless Authentication with AWS IAM</p> </li> </ul>"},{"location":"aws-iam.html#configuration","title":"Configuration","text":"<p>For how to configure AWS IAM authentication, see Setting up AWS IAM authentication.</p>"},{"location":"aws-iam.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"backup-cursor.html","title":"$backupCursor and $backupCursorExtend aggregation stages","text":"<p><code>$backupCursor</code> and <code>$backupCursorExtend</code> aggregation stages expose the WiredTiger API which allows making consistent backups. Running these stages allows listing and freezing the files so you can copy them without the files being deleted or necessary parts within them being overwritten.</p> <ul> <li> <p><code>$backupCursor</code> outputs the list of files and their size to copy.</p> </li> <li> <p><code>$backupCursorExtend</code> outputs the list of WiredTiger transaction log files that have been updated or newly added since the <code>$backupCursor</code> was first run. Saving these files enables restoring the database to any arbitrary time between the <code>$backupCursor</code> and <code>$backupCursorExtend</code> execution times.</p> </li> </ul> <p>They are available in Percona Server for MongoDB starting with version 4.2.15-16.</p> <p>Percona provides Percona Backup for MongoDB (PBM) \u2013 a light-weight open source solution for consistent backups and restores across sharded clusters. PBM relies on these aggregation stages for physical backups and restores. However, if you wish to develop your own backup application, this document describes the <code>$backupCursor</code> and <code>$backupCursorExtend</code> aggregation stages.</p>"},{"location":"backup-cursor.html#usage","title":"Usage","text":"<p>You can run these stages in any type of MongoDB deployment. If you need to back up a single node in a replica set, first run the <code>$backupCursor</code>, then the <code>$backupCursorExtend</code> and save the output files to the backup storage.</p> <p>To make a consistent backup of a sharded cluster, run both aggregation stages on one node from each shard and the config server replica set. It can be either the primary or the secondary node. Note that since the secondary node may lag in syncing the data from the primary one, you will have to wait for the exact same time before running the <code>$backupCursorExtend</code>.</p> <p>Note that for standalone MongoDB node with disabled oplogs, you can only run the <code>$backupCursor</code> aggregation stage.</p>"},{"location":"backup-cursor.html#get-a-list-of-all-files-to-copy-with-backupcursor","title":"Get a list of all files to copy with $backupCursor","text":"<pre><code>var bkCsr = db.getSiblingDB(\"admin\").aggregate([{$backupCursor: {}}])\nbkCsrMetadata = bkCsr.next().metadata\n</code></pre> <p>Sample output:</p> <pre><code>{\n         \"metadata\" : {\n            \"backupId\": UUID(\"35c34101-0107-44cf-bdec-fad285e07534\"),\n            \"dbpath\": '/var/lib/mongodb',\n            \"oplogStart\": { ts: Timestamp({ t: 1666631297, i: 1 }), t: Long(\"-1\") },\n            \"oplogEnd\": { ts: Timestamp({ t: 1666631408, i: 1 }), t: Long(\"1\") },\n            \"checkpointTimestamp\": Timestamp({ t: 1666631348, i: 1 })\n            \"disableIncrementalBackup\" : false,\n            \"incrementalBackup\" : false,\n            \"blockSize\" : 16\n         }\n   }\n</code></pre> <p>Store the <code>metadata</code> document somewhere, because you need to pass the <code>backupId</code> parameter from this document as the input parameter for the <code>$backupCursorExtend</code> stage. Also you need the <code>oplogEnd</code> timestamp. Make sure that the <code>$backupCursor</code> is complete on all shards in your cluster.</p> <p>Note</p> <p>Note that when running <code>$backupCursor</code> in a standalone node deployment, <code>oplogStart</code>, <code>oplogEnd</code>, <code>checkpointTimesatmp</code> values may be absent. This is because standalone node deployments don\u2019t have oplogs.</p>"},{"location":"backup-cursor.html#run-backupcursorextend-to-retrieve-the-wiredtiger-transaction-logs","title":"Run <code>$backupCursorExtend</code> to retrieve the WiredTiger transaction logs","text":"<p>Pass the <code>backupId</code> from the metadata document as the first parameter. For the <code>timestamp</code> parameter, use the maximum (latest) value among the <code>oplogEnd</code> timestamps from all shards and config server replica set. This will be the target time to restore.</p> <pre><code>var bkExtCsr = db.aggregate([{$backupCursorExtend: {backupId: bkCsrMetadata.backupId, timestamp: new Timestamp(1666631418, 1)}}])\n</code></pre> <p>Sample output:</p> <pre><code>{ \"filename\" : \"/data/plain_rs/n1/data/journal/WiredTigerLog.0000000042\" }\n{ \"filename\" : \"/data/plain_rs/n1/data/journal/WiredTigerLog.0000000043\" }\n{ \"filename\" : \"/data/plain_rs/n1/data/journal/WiredTigerLog.0000000044\" }\n</code></pre>"},{"location":"backup-cursor.html#loop-the-backupcursor","title":"Loop the <code>$backupCursor</code>","text":"<p>Prevent the backup cursor from closing on timeout (default \u2013 10 minutes). This is crucial since it prevents overwriting backup snapshot file blocks with new ones if the files take longer than 10 minutes to copy.  Use the getMore command for this purpose.</p>"},{"location":"backup-cursor.html#copy-the-files-to-the-storage","title":"Copy the files to the storage","text":"<p>Now you can copy the output of both aggregation stages to your backup storage.</p> <p>After the backup is copied to the storage, terminate the getMore command and close the cursor.</p> <p>Note</p> <p>Save the timestamp that you passed for the <code>$backupCursorExtend</code> stage somewhere since you will need it for the restore.</p> <p>This document is based on the blog post Experimental Feature: $backupCursorExtend in Percona Server for MongoDB by Akira Kurogane</p>"},{"location":"backup-cursor.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"comparison.html","title":"Percona Server for MongoDB feature comparison","text":"<p>Percona Server for MongoDB 4.4 is based on MongoDB Community Edition 4.4 and extends it with the functionality that is otherwise only available in MongoDB Enterprise Edition..</p> PSMDB MongoDB Storage Engines - WiredTiger (default)  - Percona Memory Engine - WiredTiger (default) - In-Memory (Enterprise only) Encryption-at-Rest - Key servers = Hashicorp Vault, KMIP  - Fully open source - Key server = KMIP  - Enterprise only Hot Backup YES (replica set) NO LDAP authentication (legacy) LDAP authentication with SASL Enterprise only LDAP authorization YES Enterprise only Kerberos authentication YES Enterprise only AWS IAM authentication YES MongoDB Atlas Audit Logging YES Enterprise only Log redaction YES Enterprise only SNMP Monitoring NO Enterprise only Database profiler YES with the <code>--rateLimit</code> argument YES"},{"location":"comparison.html#profiling-rate-limiting","title":"Profiling Rate Limiting","text":"<p>Profiling Rate Limiting was added to Percona Server for MongoDB in v3.4 with the <code>--rateLimit</code> argument. Since v3.6, MongoDB Community (and Enterprise) Edition includes a similar option slowOpSampleRate. Please see Profiling Rate Limit for more information.</p>"},{"location":"comparison.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"connect.html","title":"Connect to Percona Server for MongoDB","text":"<p>After you have successfully installed and started Percona Server for MongoDB, let\u2019s connect to it.</p> <p>By default, access control is disabled in MongoDB. We recommend enabling it so that users must verify their identity to be able to connect to the database. Percona Server for MongoDB supports several authentication methods. We will use the default one, SCRAM, to configure authentication.</p> <p>The steps are the following:</p> <ol> <li> <p>Connect to Percona Server for MongoDB instance without authentication:</p> <pre><code>$ mongosh\n</code></pre> Sample output <pre><code>Current Mongosh Log ID: 6598270a3a0c418751550ded\nConnecting to:      mongodb://127.0.0.1:27017/?directConnection=true&amp;serverSelectionTimeoutMS=2000&amp;appName=mongosh+2.0.0\nUsing MongoDB:      4.4.29-28\nUsing Mongosh:      2.0.0    \n\nFor mongosh info see: https://docs.mongodb.com/mongodb-shell/    \n\ntest&gt;\n</code></pre> </li> <li> <p>Create the administrative user in the <code>admin</code> database:</p> <ol> <li> <p>Switch to the <code>admin</code> database</p> <pre><code>&gt; use admin\n</code></pre> Sample output <pre><code>switched to db admin\n</code></pre> </li> <li> <p>Create the user:</p> <pre><code>&gt; db.createUser(\n    {\n      user: \"admin\",\n      pwd: passwordPrompt(), // or cleartext password\n      roles: [\n        { role: \"userAdminAnyDatabase\", db: \"admin\" },\n        { role: \"readWriteAnyDatabase\", db: \"admin\" }\n      ]\n    }\n  )\n</code></pre> </li> </ol> </li> <li> <p>Shutdown the <code>mongod</code> instance and exit <code>mongosh</code></p> <pre><code>&gt; db.adminCommand( { shutdown: 1 } )\n</code></pre> </li> <li> <p>Enable authentication</p>  Command line Configuration file <p>Start the server with authentication enabled using the following command: </p> <pre><code>$ mongod --auth --port 27017 --dbpath /var/lib/mongodb --fork --syslog\n</code></pre> <ol> <li> <p>Edit the configuration file</p> /etc/mongod.conf<pre><code>security:\n    authorization: enabled\n</code></pre> </li> <li> <p>Start the <code>mongod</code> service</p> <pre><code>$ systemctl start mongod\n</code></pre> </li> </ol> </li> <li> <p>Connect to Percona Server for MongoDB and authenticate.</p> <pre><code>$ mongosh --port 27017  --authenticationDatabase \\\n\"admin\" -u \"admin\" -p\n</code></pre> </li> </ol>"},{"location":"connect.html#next-steps","title":"Next steps","text":"<p>Run simple queries </p>"},{"location":"connect.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"copyright.html","title":"Copyright and licensing information","text":""},{"location":"copyright.html#documentation-licensing","title":"Documentation licensing","text":"<p>Percona Server for MongoDB documentation is (C)2016-2023 Percona LLC and/or its affiliates and is distributed under the Creative Commons Attribution 4.0 International License.</p>"},{"location":"copyright.html#software-license","title":"Software license","text":"<p>Percona Server for MongoDB is source-available software.</p>"},{"location":"copyright.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"crud.html","title":"Manipulate data in Percona Server for MongoDB","text":"<p>After you connected to Percona Server for MongoDB, let\u2019s insert some data and operate with it.</p> <p>Note</p> <p>To secure the data, you may wish to use data-at-rest encryption. Note that you can only enable it on an empty database. Otherwise you must clean up the data directory first.</p> <p>See the following documentation for data-at-rest encryption:</p> <ul> <li>Using HashiCorp Vault server</li> <li>Using KMIP server</li> <li>Using a local keyfile</li> </ul>"},{"location":"crud.html#insert-data","title":"Insert data","text":"<ol> <li> <p>For example, let\u2019s add an item to the <code>fruits</code> collection. Use the <code>insertOne()</code> command for this purpose:</p> <pre><code>&gt; db.fruits.insertOne(\n     {item: \"apple\", qty: 50}\n     )\n</code></pre> <p>If there is no <code>fruits</code> collection in the database, it will be created during the command execution.    </p> Sample output <pre><code>{\n  acknowledged: true,\n  insertedId: ObjectId('659c2b846252bfad93fc1578')\n}\n</code></pre> </li> <li> <p>Now, let\u2019s add more fruits to the <code>fruits</code> collection using the <code>insertMany()</code> command:</p> <pre><code>&gt; db.fruits.insertMany([\n     {item: \"banana\", weight: \"kg\", qty: 10 }, \n     {item: \"peach\", weight: \"kg\", qty: 30}\n     ])\n</code></pre> Sample output <pre><code>{\n  acknowledged: true,\n  insertedIds: {\n    '0': ObjectId('659c2bc46252bfad93fc1579'),\n    '1': ObjectId('659c2bc46252bfad93fc157a')\n  }\n}\n</code></pre> </li> </ol> <p>See Insert documents for more information about data insertion.</p>"},{"location":"crud.html#query-data","title":"Query data","text":"<p>Run the following command to query data in MongoDB:</p> <pre><code>&gt; db.fruits.find()\n</code></pre> Sample output <pre><code>[\n  { _id: ObjectId('659c2b846252bfad93fc1578'), item: 'apple', qty: 50 },\n  {\n    _id: ObjectId('659c2bc46252bfad93fc1579'),\n    item: 'banana',\n    weight: 'kg',\n    qty: 10\n  },\n  {\n    _id: ObjectId('659c2bc46252bfad93fc157a'),\n    item: 'peach',\n    weight: 'kg',\n    qty: 30\n  }\n]\n</code></pre> <p>Refer to the Query documents documentation to for more information about reading data.</p>"},{"location":"crud.html#update-data","title":"Update data","text":"<p>Let\u2019s update the <code>apples</code> entry by adding weight to it. </p> <ol> <li> <p>Use the <code>updateOne()</code> command for that:</p> <pre><code>&gt; db.fruits.updateOne(\n    {\"item\": \"apple\" }, \n    {$set: {\"weight\": \"kg\"}}\n    )\n</code></pre> Sample output <pre><code>{\n  acknowledged: true,\n  insertedId: null,\n  matchedCount: 1,\n  modifiedCount: 1,\n  upsertedCount: 0\n}\n</code></pre> </li> <li> <p>Query the collection to check the updated document:</p> <pre><code>&gt; db.fruits.find({item: \"apple\"})\n</code></pre> Sample output <pre><code>[\n  {\n    _id: ObjectId('659c2b846252bfad93fc1578'),\n    item: 'apple',\n    qty: 50,\n    weight: 'kg'\n  }\n]\n</code></pre> </li> </ol> <p>See Update methods documentation for other available data update methods</p>"},{"location":"crud.html#delete-data","title":"Delete data","text":"<p>Run the following command to delete all documents where the quantity is less than 30 kg:</p> <pre><code>&gt; db.fruits.deleteMany(\n    {\"qty\": {$lt: 30} }\n    )\n</code></pre> Sample output <pre><code>{ acknowledged: true, deletedCount: 1 }\n</code></pre> <p>Learn more about deleting data in Delete methods documentation.</p> <p>Congratulations! You have used basic create, read, update and delete (CRUD) operations to manipulate data in Percona Server for MongoDB. See MongoDB CRUD Concepts manual to learn more about CRUD operations.</p>"},{"location":"crud.html#next-steps","title":"Next steps","text":"<p>What\u2019s next? </p>"},{"location":"crud.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"data-at-rest-encryption.html","title":"Data at rest encryption","text":"<p>Data at rest encryption for the WiredTiger storage engine in MongoDB was introduced in MongoDB Enterprise version 3.2 to ensure that encrypted data files can be decrypted and read by parties with the decryption key.</p> <p>Important</p> <p>You can only enable data at rest encryption and provide all encryption settings on an empty database, when you start the mongod instance for the first time. You cannot enable or disable encryption while the Percona Server for MongoDB server is already running and / or has some data. Nor can you change the effective encryption mode by simply restarting the server. Every time you restart the server, the encryption settings must be the same.</p>"},{"location":"data-at-rest-encryption.html#differences-from-upstream","title":"Differences from upstream","text":"<p>The data encryption at rest in Percona Server for MongoDB is introduced in version 3.6 to be compatible with data encryption at rest interface in MongoDB. In the current release of Percona Server for MongoDB, the data encryption at rest does not include support for Amazon AWS key management service. Instead, Percona Server for MongoDB is integrated with HashiCorp Vault. Starting with release 4.4.13-13, Percona Server for MongoDB supports the secure transfer of keys using Key Management Interoperability Protocol (KMIP). This allows users to store encryption keys in their favorite KMIP-compatible key manager when they set up encryption at rest.</p> <p>Two types of keys are used for data at rest encryption:</p> <ul> <li> <p>Database keys to encrypt data. They are stored internally, near the data that they encrypt.</p> </li> <li> <p>The master key to encrypt database keys. It is kept separately from the data and database keys and requires external management.</p> </li> </ul> <p>To manage the master key, use one of the supported key management options:</p> <ul> <li> <p>Integration with an external key server (recommended). Percona Server for MongoDB is integrated with HashiCorp Vault for this purpose and supports the secure transfer of keys using Key Management Interoperability Protocol (KMIP).</p> </li> <li> <p>Local key management using a keyfile.</p> </li> </ul> <p>Note that you can use only one of the key management options at a time. However, you can switch from one management option to another (e.g. from a keyfile to HashiCorp Vault). Refer to Migrating from Key File Encryption to HashiCorp Vault Encryption section for details.</p>"},{"location":"data-at-rest-encryption.html#important-configuration-options","title":"Important configuration options","text":"<p>Percona Server for MongoDB supports the <code>encryptionCipherMode</code> option where you choose one of the following cipher modes:</p> <ul> <li> <p>AES256-CBC</p> </li> <li> <p>AES256-GCM</p> </li> </ul> <p>By default, the <code>AES256-CBC</code> cipher mode is applied. The following example demonstrates how to apply the AES256-GCM cipher mode when starting the <code>mongod</code> service:</p> <pre><code>$ mongod ... --encryptionCipherMode AES256-GCM\n</code></pre> <p>See also</p> <p>MongoDB Documentation: encryptionCipherMode Option</p>"},{"location":"data-at-rest-encryption.html#encryption-of-rollback-files","title":"Encryption of rollback files","text":"<p>Percona Server for MongoDB also encrypts rollback files when data at rest encryption is enabled. To inspect the contents of these files, use perconadecrypt. This is a tool that you run from the command line as follows:</p> <pre><code>$ perconadecrypt --encryptionKeyFile FILE  --inputPath FILE --outputPath FILE [--encryptionCipherMode MODE]\n</code></pre> <p>When decrypting, the cipher mode must match the cipher mode which was used for the encryption. By default, the <code>--encryptionCipherMode</code> option uses the <code>AES256-CBC</code> mode.</p>"},{"location":"data-at-rest-encryption.html#parameters-of-perconadecrypt","title":"Parameters of <code>perconadecrypt</code>","text":"Option Purpose <code>\u2013-encryptionKeyFile</code> The path to the encryption key file <code>--encryptionCipherMode</code> The cipher mode for decryption. The supported values are <code>AES256-CBC</code> or <code>AES256-GCM</code> <code>--inputPath</code> The path to the encrypted rollback file <code>--outputPath</code> The path to save the decrypted rollback file"},{"location":"data-at-rest-encryption.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"enable-auth.html","title":"Enable SCRAM authentication","text":"<p>By default, Percona Server for MongoDB does not restrict access to data and configuration.</p> <p>Enabling authentication enforces users to identify themselves when accessing the database. This documents describes how to enable the built-in SCRAM authentication mechanism. </p> <p>Percona Server for MongoDB also supports the number of external authentication mechanisms. To learn more, refer to Authentication.</p> <p>You can enable authentication either automatically or manually.</p>"},{"location":"enable-auth.html#automatic-setup","title":"Automatic setup","text":"<p>To enable authentication and automatically set it up, run the <code>/usr/bin/percona-server-mongodb-enable-auth.sh</code> script as root or using <code>sudo</code>.</p> <p>This script creates the <code>dba</code> user with the <code>root</code> role. The password is randomly generated and printed out in the output. Then the script restarts Percona Server for MongoDB with access control enabled. The <code>dba</code> user has full superuser privileges on the server. You can add other users with various roles depending on your needs.</p> <p>For usage information, run the script with the <code>-h</code> option.</p>"},{"location":"enable-auth.html#manual-setup","title":"Manual setup","text":"<p>To enable access control manually:</p> <ol> <li> <p>Add the following lines to the configuration file:</p> <pre><code>security:\n  authorization: enabled\n</code></pre> </li> <li> <p>Run the following command on the <code>admin</code> database:</p> <pre><code>&gt; db.createUser({user: 'USER', pwd: 'PASSWORD', roles: ['root'] });\n</code></pre> </li> <li> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ service mongod restart\n</code></pre> </li> <li> <p>Connect to the database as the newly created user:</p> <pre><code>$ mongo --port 27017 -u 'USER' -p 'PASSWORD'  --authenticationDatabase \"admin\"\n</code></pre> </li> </ol> <p>See also</p> <p>MongoDB Documentation: Enable Access Control</p>"},{"location":"enable-auth.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"encryption-mode-switch.html","title":"Migrate from key file encryption to HashiCorp Vault encryption","text":"<p>The steps below describe how to migrate from the key file encryption to using  HashiCorp Vault.</p> <p>Note</p> <p>This is a simple guideline and it should be used for testing purposes only. We recommend to use Percona Consulting Services to assist you with migration in production environment.</p>"},{"location":"encryption-mode-switch.html#assumptions","title":"Assumptions","text":"<p>We assume that you have installed and configured the vault server and enabled the KV Secrets Engine as the secrets storage for it.</p> <ol> <li> <p>Stop <code>mongod</code>.</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Insert the key from keyfile into the HashiCorp Vault server to the desired secret path.</p> </li> <li> <p>Retrieve the key value from the keyfile</p> <pre><code>$ sudo cat /data/key/mongodb.key\nd0JTFcePmvROyLXwCbAH8fmiP/ZRm0nYbeJDMGaI7Zw=\n</code></pre> </li> <li> <p>Insert the key into vault</p> <pre><code>$ vault kv put secret/dc/psmongodb1 value=d0JTFcePmvROyLXwCbAH8fmiP/ZRm0nYbeJDMGaI7Zw=\n</code></pre> <p>!!! note </p> <pre><code> Vault KV Secrets Engine uses different read and write secrets paths. To insert data to Vault, specify the secret path without the `data/` prefix.\n</code></pre> </li> <li> <p>Edit the configuration file to provision the HashiCorp Vault configuration options instead of the key file encryption options.</p> <pre><code>security:\n   enableEncryption: true\n   vault:\n      serverName: 10.0.2.15\n      port: 8200\n      secret: secret/data/dc/psmongodb1\n      tokenFile: /etc/mongodb/token\n      serverCAFile: /etc/mongodb/vault.crt\n</code></pre> </li> <li> <p>Start the <code>mongod</code> service</p> <pre><code>$ sudo systemctl start mongod\n</code></pre> </li> </ol>"},{"location":"encryption-mode-switch.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"faq.html","title":"FAQ","text":""},{"location":"faq.html#how-to-check-percona-server-for-mongodb-version","title":"How to check Percona Server for MongoDB version?","text":"<p>To see which version of Percona Server for MongoDB you are using, check the value of the <code>psmdbVersion</code> key in the output of the buildInfo database command. If this key does not exist, Percona Server for MongoDB is not installed on the server.</p>"},{"location":"faq.html#where-is-the-location-of-the-configuration-and-data-files","title":"Where is the location of the configuration and data files?","text":"<p>By default, Percona Server for MongoDB stores data files in <code>/var/lib/mongodb/</code> and configuration parameters in <code>/etc/mongod.conf</code>.</p>"},{"location":"faq.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"glossary.html","title":"Glossary","text":""},{"location":"glossary.html#acid","title":"ACID","text":"<p>Set of properties that guarantee database transactions are processed reliably. Stands for Atomicity, Consistency, Isolation, Durability.</p>"},{"location":"glossary.html#atomicity","title":"Atomicity","text":"<p>Atomicity means that database operations are applied following a \u201call or nothing\u201d rule. A transaction is either fully applied or not at all.</p>"},{"location":"glossary.html#consistency","title":"Consistency","text":"<p>Consistency means that each transaction that modifies the database takes it from one consistent state to another.</p>"},{"location":"glossary.html#durability","title":"Durability","text":"<p>Once a transaction is committed, it will remain so.</p>"},{"location":"glossary.html#foreign-key","title":"Foreign Key","text":"<p>A referential constraint between two tables. Example: A purchase order in the purchase_orders table must have been made by a customer that exists in the customers table.</p>"},{"location":"glossary.html#isolation","title":"Isolation","text":"<p>The Isolation requirement means that no transaction can interfere with another.</p>"},{"location":"glossary.html#jenkins","title":"Jenkins","text":"<p>Jenkins is a continuous integration system that we use to help ensure the continued quality of the software we produce. It helps us achieve the aims of:</p> <ul> <li>no failed tests in trunk on any platform,</li> <li>aid developers in ensuring merge requests build and test on all platforms,</li> <li>no known performance regressions (without a damn good explanation).</li> </ul>"},{"location":"glossary.html#kerberos","title":"Kerberos","text":"<p>Kerberos is an authentication protocol for client/server authentication without sending the passwords over an insecure network. Kerberos uses symmetric encryption in the form of tickets - small pieces of encrypted data used for authentication. A ticket is issued for the client and validated by the server.  </p>"},{"location":"glossary.html#rolling-restart","title":"Rolling restart","text":"<p>A rolling restart (rolling upgrade) is shutting down and upgrading nodes one by one. The whole cluster remains operational. There is no interruption to clients assuming the elections are short and all writes directed to the old primary use the retryWrite mechanism.</p>"},{"location":"glossary.html#technical-preview-feature","title":"Technical preview feature","text":"<p>Technical preview features are not yet ready for enterprise use and are not included in support via SLA. They are included in this release so that users can provide feedback prior to the full release of the feature in a future GA release (or removal of the feature if it is deemed not useful). This functionality can change (APIs, CLIs, etc.) from tech preview to GA.</p>"},{"location":"glossary.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"hot-backup.html","title":"Hot Backup","text":"<p>Percona Server for MongoDB includes an integrated open source hot backup system for the default WiredTiger storage engine.  It creates a physical data backup on a running server without notable performance and operating degradation.</p> <p>Note</p> <p>Hot backups are done on <code>mongod</code> servers independently, without synchronizing them across replica set members and shards in a cluster. To ensure data consistency during backups and restores, we recommend using Percona Backup for MongoDB.</p>"},{"location":"hot-backup.html#make-a-backup","title":"Make a backup","text":"<p>To take a hot backup of the database in your current <code>dbpath</code>, do the following:</p> <ol> <li> <p>Provide access to the backup directory for the <code>mongod</code> user:</p> <pre><code>$ sudo chown mongod:mongod &lt;backupDir&gt;\n</code></pre> </li> <li> <p>Run the <code>createBackup</code> command as administrator on the <code>admin</code> database and specify the backup directory.</p> <pre><code>&gt; use admin\nswitched to db admin\n&gt; db.runCommand({createBackup: 1, backupDir: \"&lt;backup_data_path&gt;\"})\n{ \"ok\" : 1 }\n</code></pre> </li> </ol> <p>The backup taken is the snapshot of the <code>mongod</code> server\u2019s <code>dataDir</code> at the moment of the <code>createBackup</code> command start.</p> <p>If the backup was successful, you should receive an <code>{ \"ok\" : 1 }</code> object. If there was an error, you will receive a failing <code>ok</code> status with the error message, for example:</p> <pre><code>&gt; db.runCommand({createBackup: 1, backupDir: \"\"})\n{ \"ok\" : 0, \"errmsg\" : \"Destination path must be absolute\" }\n</code></pre>"},{"location":"hot-backup.html#save-a-backup-to-a-tar-archive","title":"Save a backup to a TAR archive","text":"<p>To save a backup as a tar archive, use the <code>archive</code> field to specify the destination path:</p> <pre><code>&gt; use admin\n...\n&gt; db.runCommand({createBackup: 1, archive: &lt;path_to_archive&gt;.tar })\n</code></pre>"},{"location":"hot-backup.html#streaming-hot-backups-to-a-remote-destination","title":"Streaming hot backups to a remote destination","text":"<p>Percona Server for MongoDB enables uploading hot backups to an Amazon S3 or a compatible storage service, such as MinIO.</p> <p>This method requires that you provide the bucket field in the s3 object:</p> <pre><code>&gt; use admin\n...\n&gt; db.runCommand({createBackup: 1, s3: {bucket: \"backup20190510\", path: &lt;some_optional_path&gt;} })\n</code></pre> <p>In addition to the mandatory <code>bucket</code> field, the <code>s3</code> object may contain the following fields:</p> Field Type Description bucket string The only mandatory field. Names are subject to restrictions described in the Bucket Restrictions and Limitations section of Amazon S3 documentation path string The virtual path inside the specified bucket where the backup will be created. If the <code>path</code> is not specified, then the backup is created in the root of the bucket. If there are any objects under the specified path, the backup will not be created and an error will be reported. endpoint string The endpoint address and port - mainly for AWS S3 compatible servers such as the MinIO server. For a local MinIO server, this can be \u201c127.0.0.1:9000\u201d. For AWS S3 this field can be omitted. scheme string \u201cHTTP\u201d or \u201cHTTPS\u201d (default). For a local MinIO server started with the minio server command this should field should contain HTTP. useVirtualAddressing bool The style of addressing buckets in the URL. By default \u2018true\u2019. For MinIO servers, set this field to false. For more information, see Virtual Hosting of Buckets in the Amazon S3 documentation. region string The name of an AWS region. The default region is US_EAST_1. For more information see AWS Service Endpoints in the Amazon S3 documentation. profile string The name of a credentials profile in the credentials configuration file. If not specified, the profile named default is used. accessKeyId string The access key id secretAccessKey string The secret access key"},{"location":"hot-backup.html#credentials","title":"Credentials","text":"<p>If the user provides the access key id and the secret access key parameters, these are used as credentials.</p> <p>If the access key id parameter is not specified then the credentials are loaded from the credentials configuration file. By default, it is <code>~/.aws/credentials</code>.</p>"},{"location":"hot-backup.html#example-credentials-file","title":"Example credentials file","text":"~/.aws/credentials<pre><code>[default]\naws_access_key_id = ABC123XYZ456QQQAAAFFF\naws_secret_access_key = zuf+secretkey0secretkey1secretkey2\n[localminio]\naws_access_key_id = ABCABCABCABC55566678\naws_secret_access_key = secretaccesskey1secretaccesskey2secretaccesskey3\n</code></pre>"},{"location":"hot-backup.html#examples","title":"Examples","text":"<p>Backup in root of bucket on local instance of MinIO server</p> <pre><code>&gt; db.runCommand({createBackup: 1,  s3: {bucket: \"backup20190901500\",\nscheme: \"HTTP\",\nendpoint: \"127.0.0.1:9000\",\nuseVirtualAddressing: false,\nprofile: \"localminio\"}})\n</code></pre> <p>Backup on MinIO testing server with the default credentials profile</p> <p>The following command creates a backup under the virtual path  \u201cyear2019/day42\u201d in the <code>backup</code> bucket:</p> <pre><code>&gt; db.runCommand({createBackup: 1,  s3: {bucket: \"backup\",\npath: \"year2019/day42\",\nendpoint: \"sandbox.min.io:9000\",\nuseVirtualAddressing: false}})\n</code></pre> <p>Backup on AWS S3 service using default settings</p> <pre><code>&gt; db.runCommand({createBackup: 1,  s3: {bucket: \"backup\", path: \"year2019/day42\"}})\n</code></pre> <p>See also</p> <p>AWS Documentation: Providing AWS Credentials</p>"},{"location":"hot-backup.html#restore-data-from-backup","title":"Restore data from backup","text":""},{"location":"hot-backup.html#restore-from-backup-on-a-standalone-server","title":"Restore from backup on a standalone server","text":"<p>To restore your database on a standalone server, stop the <code>mongod</code> service, clean out the data directory and copy files from the backup directory to the data directory. The <code>mongod</code> user requires access to those files to start the service. Therefore, make the <code>mongod</code> user the owner of the data directory and all files and subdirectories under it, and restart the <code>mongod</code> service.</p> <p>Note</p> <p>If you try to restore the node into the existing replica set and there is more recent data, the restored node detects that it is out of date with the other replica set members, deletes the data and makes an initial sync.</p> <p>Run the following commands as root or by using the <code>sudo</code> command:</p> <ol> <li> <p>Stop the <code>mongod</code> service</p> <pre><code>$ systemctl stop mongod\n</code></pre> </li> <li> <p>Clean out the data directory</p> <pre><code>$ rm -rf /var/lib/mongodb/*\n</code></pre> </li> <li> <p>Copy backup files</p> <pre><code>$ cp -RT &lt;backup_data_path&gt; /var/lib/mongodb/\n</code></pre> </li> <li> <p>Grant permissions to data files for the <code>mongod</code> user</p> <pre><code>$ chown -R mongod:mongod /var/lib/mongodb/\n</code></pre> </li> <li> <p>Start the <code>mongod</code> service</p> <pre><code>$ systemctl start mongod\n</code></pre> </li> </ol>"},{"location":"hot-backup.html#restore-from-backup-in-a-replica-set","title":"Restore from backup in a replica set","text":"<p>The recommended way to restore the replica set from a backup is to restore it into a standalone node and then initiate it as the first member of a new replica set.</p> <p>Note</p> <p>If you try to restore the node into the existing replica set and there is more recent data, the restored node detects that it is out of date with the other replica set members, deletes the data and makes an initial sync.</p> <p>Run the following commands as root or by using the sudo command</p> <ol> <li> <p>Stop the <code>mongod</code> service:</p> <pre><code>$ systemctl stop mongod\n</code></pre> </li> <li> <p>Clean the data directory and then copy the files from the backup directory to your data directory. Assuming that the data directory is <code>/var/lib/mongodb/</code>, use the following commands:</p> <pre><code>$ rm -rf /var/lib/mongodb/*\n$ cp -RT &lt;backup_data_path&gt; /var/lib/mongodb/\n</code></pre> </li> <li> <p>Grant permissions to the data files for the <code>mongod</code> user</p> <pre><code>$ chown -R mongod:mongod /var/lib/mongodb/\n</code></pre> </li> <li> <p>Make sure the replication is disabled in the config file and start the <code>mongod</code> service.</p> <pre><code>$ systemctl start mongod\n</code></pre> </li> <li> <p>Connect to your standalone node via the <code>mongo</code> shell and drop the local database</p> <pre><code>&gt; mongo\n&gt; use local\n&gt; db.dropDatabase()\n</code></pre> </li> <li> <p>Restart the node with the replication enabled</p> <ul> <li> <p>Shut down the node.</p> <pre><code>$ systemctl stop mongod\n</code></pre> </li> <li> <p>Edit the configuration file and specify the <code>replication.replSetname</code> option</p> </li> <li> <p>Start the <code>mongod</code> node:</p> <pre><code>$ systemctl start mongod\n</code></pre> </li> </ul> </li> <li> <p>Initiate a new replica set</p> <pre><code># Start the mongo shell\n&gt; mongo\n# Initiate a new replica set\n&gt; rs.initiate()\n</code></pre> </li> </ol>"},{"location":"hot-backup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"inmemory.html","title":"Percona Memory Engine","text":"<p>Percona Memory Engine is a special configuration of WiredTiger that does not store user data on disk. Data fully resides in the main memory, making processing much faster and smoother. Keep in mind that you need to have enough memory to hold the data set, and ensure that the server does not shut down.</p> <p>The Percona Memory Engine is available in Percona Server for MongoDB along with the default MongoDB engine WiredTiger.</p>"},{"location":"inmemory.html#usage","title":"Usage","text":"<p>As of version 3.2, Percona Server for MongoDB runs with WiredTiger by default.  You can select a storage engine using the <code>--storageEngine</code> command-line option when you start <code>mongod</code>.  Alternatively, you can set the <code>storage.engine</code> variable in the configuration file (by default, <code>/etc/mongod.conf</code>):</p> <pre><code>storage:\n  dbPath: &lt;dataDir&gt;\n  engine: inMemory\n</code></pre>"},{"location":"inmemory.html#configuration","title":"Configuration","text":"<p>You can configure Percona Memory Engine using either command-line options or corresponding parameters in the <code>/etc/mongod.conf</code> file. The following are the configuration examples:</p>  Configuration file Command line <p>The configuration file is formatted in YAML</p> <pre><code>storage:\n  engine: inMemory\n  inMemory:\n    engineConfig:\n      inMemorySizeGB: 140\n      statisticsLogDelaySecs: 0\n</code></pre> <p>Setting parameters in the configuration file is the same as  starting the <code>mongod</code> daemon with the following options:</p> <pre><code>mongod --storageEngine=inMemory \\\n--inMemorySizeGB=140 \\\n--inMemoryStatisticsLogDelaySecs=0\n</code></pre>"},{"location":"inmemory.html#options","title":"Options","text":"<p>The following options are available (with corresponding YAML configuration file parameters):</p> Configuration file storage.inMemory.engineConfig.inMemorySizeGB Command line <code>inMemorySizeGB()</code> Default 50% of total memory minus 1024 MB, but not less than 256 MB Description Specifies the maximum memory in gigabytes to use for data Configuration file storage.inMemory.engineConfig.statisticsLogDelaySecs Command line <code>inMemoryStatisticsLogDelaySecs()()</code> Default 0 Description Specifies the number of seconds between writes to statistics log.  A 0 value means statistics are not logged"},{"location":"inmemory.html#switching-storage-engines","title":"Switching storage engines","text":""},{"location":"inmemory.html#considerations","title":"Considerations","text":"<p>If you have data files in your database and want to change to Percona Memory Engine, consider the following:</p> <ul> <li> <p>Data files created by one storage engine are not compatible with other engines, because each one has its own data model.</p> </li> <li> <p>When changing the storage engine, the <code>mongod</code> node requires an empty <code>dbPath</code> data directory when it is restarted. Though Percona Memory Engine stores all data in memory, some metadata files, diagnostics logs and statistics metrics are still written to disk. This is controlled with the <code>--inMemoryStatisticsLogDelaySecs</code> option.</p> </li> </ul> <p>Creating a new <code>dbPath</code> data directory for a different storage engine is the simplest solution. Yet when you switch between disk-using storage engines (e.g. from WiredTiger to Percona Memory Engine), you may have to delete the old data if there is not enough disk space for both. Double-check that your backups are solid and/or the replica set nodes are healthy before you switch to the new storage engine.</p>"},{"location":"inmemory.html#procedure","title":"Procedure","text":"<p>To change a storage engine, you have the following options:</p>"},{"location":"inmemory.html#temporarily-test-percona-memory-engine","title":"Temporarily test Percona Memory Engine","text":"<p>Set a different data directory for the <code>dbPath</code> variable in the configuration file. Make sure that the user running <code>mongod</code> has read and write permissions for the new data directory.</p> <ol> <li> <p>Stop <code>mongod</code></p> <pre><code>$ service mongod stop\n</code></pre> </li> <li> <p>Edit the configuration file</p> <pre><code>storage:\n  dbPath: &lt;newDataDir&gt;\n  engine: inmemory\n</code></pre> </li> <li> <p>Start <code>mongod</code></p> <pre><code>$ service mongod start\n</code></pre> </li> </ol>"},{"location":"inmemory.html#permanent-switch-to-percona-memory-engine-without-any-valuable-data-in-your-database","title":"Permanent switch to Percona Memory Engine without any valuable data in your database","text":"<p>Clean out the <code>dbPath</code> data directory (by default, <code>/var/lib/mongodb</code>) and edit the configuration file:</p> <ol> <li> <p>Stop <code>mongod</code></p> <pre><code>$ service mongod stop\n</code></pre> </li> <li> <p>Clean out the <code>dbPath</code> data directory</p> <pre><code>$ sudo rm -rf &lt;dbpathDataDir&gt;\n</code></pre> </li> <li> <p>Edit the configuration file</p> <pre><code>storage:\n  dbPath: &lt;newDataDir&gt;\n  engine: inmemory\n</code></pre> </li> <li> <p>Start <code>mongod</code></p> <pre><code>$ service mongod start\n</code></pre> </li> </ol>"},{"location":"inmemory.html#switch-to-percona-memory-engine-with-data-migration-and-compatibility","title":"Switch to Percona Memory Engine with data migration and compatibility","text":"Standalone instance Replica set <p>For a standalone instance or a single-node replica set, use the <code>mongodump</code> and <code>mongorestore</code> utilities:</p> <ol> <li> <p>Export the dataDir contents</p> <pre><code>$ mongodump --out &lt;dumpDir&gt;\n</code></pre> </li> <li> <p>Stop <code>mongod</code></p> <pre><code>$ service mongod stop\n</code></pre> </li> <li> <p>Clean out the <code>dbPath</code> data directory</p> <pre><code>$ sudo rm -rf &lt;dbpathDataDir&gt;\n</code></pre> </li> <li> <p>Update the configuration file by setting the new value for the <code>storage.engine</code> variable. Set the engine-specific settings such as <code>storage.inMemory.engineConfig.inMemorySizeGB</code></p> </li> <li> <p>Start <code>mongod</code></p> <pre><code>$ service mongod start\n</code></pre> </li> <li> <p>Restore the database</p> <pre><code>$ mongorestore &lt;dumpDir&gt;\n</code></pre> </li> </ol> <p>Use the \u201crolling restart\u201d process.</p> <ol> <li> <p>Switch to the Percona Memory Engine on the secondary node. Clean out the <code>dbPath</code> data directory and edit the configuration file:</p> </li> <li> <p>Stop <code>mongod</code></p> <pre><code>$ service mongod stop\n</code></pre> </li> <li> <p>Clean out the <code>dbPath</code> data directory</p> <pre><code>$ sudo rm -rf &lt;dbpathDataDir&gt;\n</code></pre> </li> <li> <p>Edit the configuration file</p> <pre><code>storage:\n  dbPath: &lt;newDataDir&gt;\n  engine: inmemory\n</code></pre> </li> <li> <p>Start <code>mongod</code></p> <pre><code>$ service mongod start\n</code></pre> </li> <li> <p>Wait for the node to rejoin with the other nodes and report the SECONDARY status.</p> </li> <li> <p>Repeat the procedure to switch the remaining nodes to Percona Memory Engine.</p> </li> </ol>"},{"location":"inmemory.html#data-at-rest-encryption","title":"Data at Rest Encryption","text":"<p>Using Data at Rest Encryption means using the same <code>storage.\\*</code> configuration options as for WiredTiger. To change from normal to Data at Rest Encryption mode or backward, you must clean up the <code>dbPath</code> data directory, just as if you change the storage engine. This is because mongod cannot convert the data files to an encrypted format \u2018in place\u2019. It must get the document data again either via the initial sync from another replica set member, or from imported backup dump.</p>"},{"location":"inmemory.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"kerberos.html","title":"Setting up Kerberos authentication","text":"<p>This document provides configuration steps for setting up Kerberos Authentication in Percona Server for MongoDB.</p>"},{"location":"kerberos.html#assumptions","title":"Assumptions","text":"<p>The setup of the Kerberos server itself is out of scope of this document. Please refer to the Kerberos documentation for the installation and configuration steps relevant to your operation system.</p> <p>We assume that you have successfully completed the following steps:</p> <ul> <li> <p>Installed and configured the Kerberos server</p> </li> <li> <p>Added necessary realms</p> </li> <li> <p>Added service, admin and user principals</p> </li> <li> <p>Configured the <code>A</code> and <code>PTR</code> DNS records for every host running <code>mongod</code> instance to resolve the hostnames onto Kerberos realm.</p> </li> </ul>"},{"location":"kerberos.html#add-user-principals-to-percona-server-for-mongodb","title":"Add user principals to Percona Server for MongoDB","text":"<p>To get authenticated, users must exist both in the Kerberos and Percona Server for MongoDB servers with exactly matching names.</p> <p>After you defined the user principals in the Kerberos server, add them to the <code>$external</code> database in Percona Server for MongoDB and assign required roles:</p> <pre><code>&gt; use $external\n&gt; db.createUser({user: \"demo@PERCONATEST.COM\",roles: [{role: \"read\", db: \"admin\"}]})\n</code></pre> <p>Replace <code>demo@PERCONATEST.COM</code> with your username and Kerberos realm.</p>"},{"location":"kerberos.html#configure-kerberos-keytab-files","title":"Configure Kerberos keytab files","text":"<p>A keytab file stores the authentication keys for a service principal representing a <code>mongod</code> instance to access the Kerberos admin server.</p> <p>After you have added the service principal to the Kerberos admin server, the entry for this principal is added to the <code>/etc/krb5.keytab</code> keytab file.</p> <p>The <code>mongod</code> server must have access to the keytab file to authenticate. To keep the keytab file secure, restrict the access to it only for the user running the <code>mongod</code> process.</p> <ol> <li> <p>Stop the <code>mongod</code> service</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Generate the keytab file or get a copy of it if you generated the keytab file on another host. Save the keyfile under a separate path (e.g. <code>/etc/mongodb.keytab</code>)</p> <pre><code>$ cp /etc/krb5.keytab /etc/mongodb.keytab\n</code></pre> </li> <li> <p>Change the ownership to the keytab file</p> <pre><code>$ sudo chown mongod:mongod /etc/mongodb.keytab\n</code></pre> </li> <li> <p>Set the <code>KRB5_KTNAME</code> variable in the environment file for the <code>mongod</code> process.</p> Debian and UbuntuRHEL and derivatives <p>Edit the environment file at the path <code>/etc/default/mongod</code> and specify the <code>KRB5_KTNAME</code> variable:</p> <pre><code>KRB5_KTNAME=/etc/mongodb.keytab\n</code></pre> <p>If you have a different path to the keytab file, specify it accordingly.</p> <p>Edit the environment file at the path <code>/etc/sysconfig/mongod</code> and specify the <code>KRB5_KTNAME</code> variable:</p> <pre><code>KRB5_KTNAME=/etc/mongodb.keytab\n</code></pre> <p>If you have a different path to the keytab file, specify it accordingly.</p> </li> <li> <p>Restart the <code>mongod</code> service</p> <pre><code>$ sudo systemctl start mongod\n</code></pre> </li> </ol>"},{"location":"kerberos.html#percona-server-for-mongodb-configuration","title":"Percona Server for MongoDB configuration","text":"<p>Enable external authentication in Percona Server for MongoDB configuration. Edit the <code>etc/mongod.conf</code> configuration file and specify the following configuration:</p> <pre><code>security:\n  authorization: \"enabled\"\n\nsetParameter:\n  authenticationMechanisms: GSSAPI\n</code></pre> <p>Restart the <code>mongod</code> service to apply the configuration:</p> <pre><code>$ sudo systemctl start mongod\n</code></pre>"},{"location":"kerberos.html#test-the-access-to-percona-server-for-mongodb","title":"Test the access to Percona Server for MongoDB","text":"<ol> <li> <p>Obtain the Kerberos ticket for the user using the <code>kinit</code> command and specify the user password:</p> <pre><code>$ kinit demo\nPassword for demo@PERCONATEST.COM:\n</code></pre> </li> <li> <p>Check the user ticket:</p> <pre><code>$ klist -l\n</code></pre> <p>Output:</p> <pre><code>Principal name                 Cache name\n--------------                 ----------\ndemo@PERCONATEST.COM           FILE:/tmp/&lt;ticket&gt;\n</code></pre> </li> <li> <p>Connect to Percona Server for MongoDB:</p> <pre><code>$ mongo --host &lt;hostname&gt; --authenticationMechanism=GSSAPI --authenticationDatabase='$external' --username demo@PERCONATEST.COM\n</code></pre> <p>The result should look like the following:</p> <pre><code>&gt; db.runCommand({connectionStatus : 1})\n{\n     \"authInfo\" : {\n             \"authenticatedUsers\" : [\n                     {\n                             \"user\" : \"demo@PERCONATEST.COM\",\n                             \"db\" : \"$external\"\n                     }\n             ],\n             \"authenticatedUserRoles\" : [\n                     {\n                             \"role\" : \"read\",\n                             \"db\" : \"admin\"\n                     }\n             ]\n     },\n     \"ok\" : 1\n}\n</code></pre> </li> </ol>"},{"location":"kerberos.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"keyfile.html","title":"Local key management using a keyfile","text":"<p>The key file must contain a 32 character string encoded in base64. You can generate a random key and save it to a file by using the <code>openssl</code> command:</p> <pre><code>$ openssl rand -base64 32 &gt; mongodb-keyfile\n</code></pre> <p>Then, as the owner of the <code>mongod</code> process, update the file permissions: only the owner should be able to read and modify this file. The effective permissions specified with the <code>chmod</code> command can be:</p> <ul> <li>600 - only the owner may read and modify the file</li> <li>400 - only the owner may read the file.</li> </ul> <pre><code>$ chmod 600 mongodb-keyfile\n</code></pre> <p>Enable the data encryption at rest in Percona Server for MongoDB by setting these options:</p> <ul> <li> <p><code>--enableEncryption</code> to enable data at rest encryption</p> </li> <li> <p><code>--encryptionKeyFile</code> to specify the path to a file that contains the encryption key</p> </li> </ul> <pre><code>$ mongod ... --enableEncryption --encryptionKeyFile &lt;fileName&gt;\n</code></pre> <p>By default, Percona Server for MongoDB uses the <code>AES256-CBC</code> cipher mode. If you want to use the <code>AES256-GCM</code> cipher mode, then use the <code>--encryptionCipherMode</code> parameter to change it.</p> <p>If <code>mongod</code> is started with the <code>--relaxPermChecks</code> option and the key file is owned by <code>root</code>, then <code>mongod</code> can read the file based on the group bit set accordingly. The effective key file permissions in this case are:</p> <ul> <li>440 - both the owner and the group can only read the file, or</li> <li>640 - only the owner can read and the change the file, the group can only read the file.</li> </ul> <p>All these options can be specified in the configuration file:</p> <pre><code>security:\n   enableEncryption: &lt;boolean&gt;\n   encryptionCipherMode: &lt;string&gt;\n   encryptionKeyFile: &lt;string&gt;\n   relaxPermChecks: &lt;boolean&gt;\n</code></pre>"},{"location":"keyfile.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"kmip.html","title":"Using the Key Management Interoperability Protocol (KMIP)","text":"<p>Percona Server for MongoDB adds support for secure transfer of keys using the OASIS Key Management Interoperability Protocol (KMIP). The KMIP implementation was tested with the PyKMIP server and the HashiCorp Vault Enterprise KMIP Secrets Engine.</p> <p>KMIP enables the communication between key management systems and the database server. KMIP provides the following benefits:</p> <ul> <li>Streamlines encryption key management</li> <li>Eliminates redundant key management processes</li> </ul> <p>Starting with version 4.4.15-15, you can specify multiple KMIP servers for failover. On startup, Percona Server for MongoDB connects to the servers in the order listed and selects the one with which the connection is successful.</p> <p>Starting with version 4.4.16-16, the <code>kmipKeyIdentifier</code> option is no longer mandatory. When left blank, the database server creates a key on the KMIP server and uses that for encryption. When you specify the identifier, the key with such an ID must exist on the keystore.</p> <p>Percona Server for MongoDB cannot encrypt existing data. If there is data in place, see the steps how to encrypt existing data.</p> <p>Note</p> <p>Starting with version 4.4.21-20, the master key is stored in a raw-byte format. If you set up Percona Server for MongoDB 4.4.21-20 and wish to downgrade to some previous version, this downgrade is not possible via binary replacement. Consider using the logical backup and restore via Percona Backup for MongoDB for this purpose.</p>"},{"location":"kmip.html#kmip-parameters","title":"KMIP parameters","text":"Configuration file security.kmip.serverName Command line <code>kmipServerName</code> Type string Description The hostname or IP address of the KMIP server. As of version 4.4.15-15, multiple KMIP servers are supported as the comma-separated list, e.g. <code>kmip1.example.com,kmip2.example.com</code> Configuration file security.kmip.port Command line <code>kmipPort</code> Type number Description The port used to communicate with the KMIP server. When undefined, the default port <code>5696</code> is used Configuration file security.kmip.serverCAFile Command line <code>kmipServerCAFile</code> Type string Description The path to the certificate of the root authority that issued the certificate for the KMIP server. Required only if the root certificate is not trusted by default on the machine the database server works on. Configuration file security.kmip.clientCertificateFile Command line <code>kmipClientCertificateFile</code> Type string Description The path to the PEM file with the KMIP client private key and the certificate chain. The database server uses this PEM file to authenticate the KMIP server Configuration file security.kmip.keyIdentifier Command line <code>kmipKeyIdentifier</code> Type string Description Optional starting with version 4.4.16-16. The identifier of the KMIP key. If not specified, the database server creates a key on the KMIP server and saves its identifier internally for future use. When you specify the identifier, the key with such an ID must exist on the key storage. You can only use this setting for the first time you enable encryption. Configuration file security.kmip.rotateMasterKey Command line kmipRotateMasterKey Type boolean Description Controls master keys rotation. When enabled, generates the new master key version and re-encrypts the keystore. Available as of version 4.4.14-14. Configuration file security.kmip.clientCertificatePassword Command line kmipClientCertificatePassword Type string Description The password for the KMIP client private key or certificate. Use this parameter only if the KMIP client private key or certificate is encrypted. Available starting with version 4.4.15-15. Configuration file security.kmip.connectRetries Command line kmipConnectRetries Type int Description Defines how many times to retry the initial connection to the KMIP server. The max number of connection attempts equals to <code>connectRetries + 1</code>. Default: 0. The option accepts values greater than zero. Use it together with the <code>connectTimeoutMS</code> parameter to control how long <code>mongod</code> waits for the response before making the next retry. Available starting with version 4.4.26-25. Configuration file security.kmip.connectTimeoutMS Command line kmipConnectTimeoutMS Type int Description The time to wait for the response from the KMIP server. Min value: 1000. Default: 5000. If the <code>connectRetries</code> setting is specified, the <code>mongod</code> waits up to the value specified with <code>connectTimeoutMS</code> for each retry. Available starting with version 4.4.26-25."},{"location":"kmip.html#key-rotation","title":"Key rotation","text":"<p>Starting with release 4.4.14-14, the support for master key rotation is added. This enables users to comply with data security regulations when using KMIP.</p>"},{"location":"kmip.html#configuration","title":"Configuration","text":"<p>Make sure you have obtained the root certificate, and the keypair for the KMIP server and the <code>mongod</code> client. For testing purposes you can use the OpenSSL to issue self-signed certificates. For production use we recommend you use the valid certificates issued by the key management appliance.</p> <p>To enable data-at-rest encryption in Percona Server for MongoDB using KMIP, edit the <code>/etc/mongod.conf</code> configuration file as follows:</p> <pre><code>security:\n  enableEncryption: true\n  kmip:\n    serverName: &lt;kmip_server_name&gt;\n    port: &lt;kmip_port&gt;\n    clientCertificateFile: &lt;/path/client_certificate.pem&gt;\n    serverCAFile: &lt;/path/ca.pem&gt;\n    keyIdentifier: &lt;key_name&gt;\n</code></pre> <p>Alternatively, you can start Percona Server for MongoDB using the command line as follows:</p> <pre><code>$ mongod --enableEncryption \\\n  --kmipServerName &lt;kmip_servername&gt; \\\n  --kmipPort &lt;kmip_port&gt; \\\n  --kmipServerCAFile &lt;path_to_ca_file&gt; \\\n  --kmipClientCertificateFile &lt;path_to_client_certificate&gt; \\\n  --kmipKeyIdentifier &lt;kmip_identifier&gt;\n</code></pre>"},{"location":"kmip.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"ldap-setup.html","title":"Set up LDAP authentication and authorization using NativeLDAP","text":"<p>This document describes an example configuration of LDAP authentication and authorization using direct binding to an LDAP server (Native LDAP). We recommend testing this setup in a non-production environment first, before applying it in production.</p>"},{"location":"ldap-setup.html#assumptions","title":"Assumptions","text":"<ol> <li> <p>The setup of an LDAP server is out of scope of this document. We assume that you are familiar with the LDAP server schema.</p> </li> <li> <p>You have the LDAP server up and running and it is accessible to the servers with Percona Server for MongoDB installed.</p> </li> <li> <p>This document primarily focuses on OpenLDAP used as the LDAP server and the examples are given based on the OpenLDAP format. If you are using Active Directory, refer to the Active Directory configuration section.</p> </li> <li> <p>You have the <code>sudo</code> privilege to the server with the Percona Server for MongoDB installed.</p> </li> </ol>"},{"location":"ldap-setup.html#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>In this setup we use anonymous binds to the LDAP server. If your LDAP server disallows anonymous binds, create the user that Percona Server for MongoDB will use to connect to and query the LDAP server. Define this user\u2019s credentials for the <code>security.ldap.bind.queryUser</code> and <code>security.ldap.bind.queryPassword</code>  parameters in the <code>mongod.conf</code> configuration file.</p> </li> <li> <p>In this setup, we use the following OpenLDAP groups:</p> </li> </ul> <pre><code>dn: cn=testusers,dc=percona,dc=com\nobjectClass: groupOfNames\ncn: testusers\nmember: cn=alice,dc=percona,dc=com\n\ndn: cn=otherusers,dc=percona,dc=com\nobjectClass: groupOfNames\ncn: otherusers\nmember: cn=bob,dc=percona,dc=com\n</code></pre>"},{"location":"ldap-setup.html#setup-procedure","title":"Setup procedure","text":""},{"location":"ldap-setup.html#configure-tlsssl-connection-for-percona-server-for-mongodb","title":"Configure TLS/SSL connection for Percona Server for MongoDB","text":"<p>By default, Percona Server for MongoDB establishes the TLS connection when binding to the LDAP server and thus, it requires access to the LDAP  certificates. To make Percona Server for MongoDB aware of the certificates, do the following:</p> <ol> <li> <p>Place the certificate in the <code>certs</code> directory. The path to the <code>certs</code> directory is:</p> <ul> <li> <p>On Debian / Ubuntu: <code>/etc/ssl/certs/</code></p> </li> <li> <p>On RHEL / CentOS: <code>/etc/openldap/certs/</code></p> </li> </ul> </li> <li> <p>Specify the path to the certificates in the <code>ldap.conf</code> file:</p> Debian / UbuntuRHEL and derivatives <pre><code>tee -a /etc/openldap/ldap.conf &lt;&lt;EOF\nTLS_CACERT /etc/ssl/certs/my_CA.crt\nEOF\n</code></pre> <pre><code>tee -a /etc/openldap/ldap.conf &lt;&lt;EOF\nTLS_CACERT /etc/openldap/certs/my_CA.crt\nEOF\n</code></pre> </li> </ol>"},{"location":"ldap-setup.html#create-roles-for-ldap-groups-in-percona-server-for-mongodb","title":"Create roles for LDAP groups in Percona Server for MongoDB","text":"<p>Percona Server for MongoDB authorizes users based on LDAP group membership. For every group, you must create the role in the <code>admin</code> database with the name that exactly matches the DN of the LDAP group.</p> <p>Percona Server for MongoDB maps the user\u2019s LDAP group to the roles and determines what role is assigned to the user. Percona Server for MongoDB then grants privileges defined by this role.</p> <p>To create the roles, use the following command:</p> <pre><code>var admin = db.getSiblingDB(\"admin\")\ndb.createRole(\n   {\n     role: \"cn=testusers,dc=percona,dc=com\",\n     privileges: [],\n     roles: [ \"readWrite\"]\n   }\n)\n\ndb.createRole(\n   {\n     role: \"cn=otherusers,dc=percona,dc=com\",\n     privileges: [],\n     roles: [ \"read\"]\n   }\n)\n</code></pre>"},{"location":"ldap-setup.html#percona-server-for-mongodb-configuration","title":"Percona Server for MongoDB configuration","text":""},{"location":"ldap-setup.html#access-without-username-transformation","title":"Access without username transformation","text":"<p>This section assumes that users connect to Percona Server for MongoDB by providing their LDAP DN as the username.</p> <ol> <li> <p>Edit the Percona Server for MongoDB configuration file (by default, <code>/etc/mongod.conf</code>) and specify the following configuration:</p> <pre><code>security:\n  authorization: \"enabled\"\n  ldap:\n    servers: \"ldap.example.com\"\n    transportSecurity: tls\n    authz:\n       queryTemplate: \"dc=percona,dc=com??sub?(&amp;(objectClass=groupOfNames)(member={PROVIDED_USER}))\"\n\nsetParameter:\n  authenticationMechanisms: \"PLAIN\"\n</code></pre> <p>The <code>{PROVIDED_USER}</code> variable substitutes the provided username before authentication or username transformation takes place.</p> <p>Replace <code>ldap.example.com</code> with the hostname of your LDAP server. In the LDAP query template, replace the domain controllers <code>percona</code> and <code>com</code> with those relevant to your organization.</p> </li> <li> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre> </li> <li> <p>Test the access to Percona Server for MongoDB:</p> <pre><code>$ mongo -u \"cn=alice,dc=percona,dc=com\" -p \"secretpwd\" --authenticationDatabase '$external' --authenticationMechanism 'PLAIN'\n</code></pre> </li> </ol>"},{"location":"ldap-setup.html#access-with-username-transformation","title":"Access with username transformation","text":"<p>If users connect to Percona Server for MongoDB with usernames that are not LDAP DN, you need to transform these usernames to be accepted by the LDAP server.</p> <p>Using the <code>--ldapUserToDNMapping</code> configuration parameter allows you to do this. You specify the match pattern as a regexp to capture a username. Next, specify how to transform it - either to use a substitution value or to query the LDAP server for a username.</p> <p>If you don\u2019t know what the substitution or LDAP query string should be, please consult with the LDAP administrators to figure this out.</p> <p>Note that you can use only the <code>query</code> or the <code>substitution</code> stage, the combination of two is not allowed.</p> SubstitutionLDAP query <ol> <li> <p>Edit the Percona Server for MongoDB configuration file (by default, <code>/etc/mongod.conf</code>) and specify the <code>userToDNMapping</code> parameter:</p> <pre><code>security:\n  authorization: \"enabled\"\n  ldap:\n    servers: \"ldap.example.com\"\n    transportSecurity: tls\n    authz:\n       queryTemplate: \"dc=percona,dc=com??sub?(&amp;(objectClass=groupOfNames)(member={USER}))\"\n    userToDNMapping: &gt;-\n          [\n            {\n              match: \"([^@]+)@percona\\\\.com\",\n              substitution: \"CN={0},DC=percona,DC=com\"\n            }\n          ]\n\nsetParameter:\n  authenticationMechanisms: \"PLAIN\"\n</code></pre> <p>The <code>{USER}</code> variable substitutes the username transformed during the <code>userToDNMapping</code> stage.</p> <p>Modify the given example configuration to match your deployment.</p> </li> <li> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre> </li> <li> <p>Test the access to Percona Server for MongoDB:</p> <pre><code>$ mongo -u \"alice@percona.com\" -p \"secretpwd\" --authenticationDatabase '$external' --authenticationMechanism 'PLAIN'\n</code></pre> </li> </ol> <ol> <li> <p>Edit the Percona Server for MongoDB configuration file (by default, <code>/etc/mongod.conf</code>) and specify the <code>userToDNMapping</code> parameter:</p> <pre><code>security:\n  authorization: \"enabled\"\n  ldap:\n    servers: \"ldap.example.com\"\n    transportSecurity: tls\n    authz:\n       queryTemplate: \"dc=percona,dc=com??sub?(&amp;(objectClass=groupOfNames)(member={USER}))\"\n    userToDNMapping: &gt;-\n          [\n            {\n              match: \"([^@]+)@percona\\\\.com\",\n              ldapQuery: \"dc=percona,dc=com??sub?(&amp;(objectClass=organizationalPerson)(cn={0}))\"\n            }\n          ]\n\nsetParameter:\n  authenticationMechanisms: \"PLAIN\"\n</code></pre> <p>The <code>{USER}</code> variable substitutes the username transformed during the userToDNMapping stage.</p> <p>Modify the given example configuration to match your deployment, For example, replace <code>ldap.example.com</code> with the hostname of your LDAP server. Replace the domain controllers (DC) <code>percona</code> and <code>com</code> with those relevant to your organization. Depending on your LDAP schema, further modifications of the LDAP query may be required.</p> </li> <li> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre> </li> <li> <p>Test the access to Percona Server for MongoDB:</p> <pre><code>mongo -u \"alice\" -p \"secretpwd\" --authenticationDatabase '$external' --authenticationMechanism 'PLAIN'\n</code></pre> </li> </ol>"},{"location":"ldap-setup.html#active-directory-configuration","title":"Active Directory configuration","text":"<p>Microsoft Active Directory uses a different schema for user and group definition. To illustrate Percona Server for MongoDB configuration, we will use the following AD users:</p> <pre><code>dn:CN=alice,CN=Users,DC=testusers,DC=percona,DC=com\nuserPrincipalName: alice@testusers.percona.com\nmemberOf: CN=testusers,CN=Users,DC=percona,DC=com\n\ndn:CN=bob,CN=Users,DC=otherusers,DC=percona,DC=com\nuserPrincipalName: bob@otherusers.percona.com\nmemberOf: CN=otherusers,CN=Users,DC=percona,DC=com\n</code></pre> <p>The following are respective AD groups:</p> <pre><code>dn:CN=testusers,CN=Users,DC=percona,DC=com\nmember:CN=alice,CN=Users,DC=testusers,DC=example,DC=com\n\ndn:CN=otherusers,CN=Users,DC=percona,DC=com\nmember:CN=bob,CN=Users,DC=otherusers,DC=example,DC=com\n</code></pre> <p>Use one of the given Percona Server for MongoDB configurations for user authentication and authorization in Active Directory:</p> No username transformationUsername substitutionLDAP query <ol> <li> <p>Edit the <code>/etc/mongod.conf</code> configuration file:</p> <pre><code>ldap:\n  servers: \"ldap.example.com\"\n  authz:\n    queryTemplate: \"DC=percona,DC=com??sub?(&amp;(objectClass=group)(member:1.2.840.113556.1.4.1941:={PROVIDED_USER}))\"\n\n  setParameter:\n    authenticationMechanisms: \"PLAIN\"\n</code></pre> </li> <li> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre> </li> <li> <p>Test the access to Percona Server for MongoDB:</p> <pre><code>$ mongo -u \"CN=alice,CN=Users,DC=testusers,DC=percona,DC=com\" -p \"secretpwd\" --authenticationDatabase '$external' --authenticationMechanism 'PLAIN'\n</code></pre> </li> </ol> <ol> <li> <p>Edit the <code>/etc/mongod.conf</code> configuration file:</p> <pre><code>ldap:\n  servers: \"ldap.example.com\"\n  authz:\n    queryTemplate: \"DC=percona,DC=com??sub?(&amp;(objectClass=group)(member:1.2.840.113556.1.4.1941:={USER}))\"\n  userToDNMapping: &gt;-\n        [\n          {\n            match: \"([^@]+)@([^\\\\.]+)\\\\.percona\\\\.com\",\n            substitution: \"CN={0},CN=Users,DC={1},DC=percona,DC=com\"\n          }\n        ]\n\n  setParameter:\n    authenticationMechanisms: \"PLAIN\"\n</code></pre> </li> <li> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre> </li> <li> <p>Test the access to Percona Server for MongoDB:</p> <pre><code>$ mongo -u \"alice@percona.com\" -p \"secretpwd\" --authenticationDatabase '$external' --authenticationMechanism 'PLAIN'\n</code></pre> </li> </ol> <ol> <li> <p>Edit the <code>/etc/mongod.conf</code> configuration file:</p> <pre><code>ldap:\n  servers: \"ldap.example.com\"\n  authz:\n    queryTemplate: \"DC=percona,DC=com??sub?(&amp;(objectClass=group)(member:1.2.840.113556.1.4.1941:={USER}))\"\n  userToDNMapping: &gt;-\n        [\n          {\n            match: \"(.+)\",\n            ldapQuery: \"dc=example,dc=com??sub?(&amp;(objectClass=organizationalPerson)(userPrincipalName={0}))\"\n          }\n        ]\n\n  setParameter:\n    authenticationMechanisms: \"PLAIN\"\n</code></pre> </li> <li> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre> </li> <li> <p>Test the access to Percona Server for MongoDB:</p> <pre><code>$ mongo -u \"alice\" -p \"secretpwd\" --authenticationDatabase '$external' --authenticationMechanism 'PLAIN'\n</code></pre> </li> </ol> <p>Modify one of this example configuration to match your deployment.</p> <p>This document is based on the following posts from Percona Database Performance Blog:</p> <ul> <li>Percona Server for MongoDB LDAP Enhancements: User-to-DN Mapping by Igor Solodovnikov</li> <li>Authenticate Percona Server for MongoDB Users via Native LDAP by Ivan Groenewold</li> </ul>"},{"location":"ldap-setup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"log-redaction.html","title":"Log redaction","text":"<p>Percona Server for MongoDB can prevent writing sensitive data to the diagnostic log by redacting messages of events before they are logged. To enable log redaction, run <code>mongod</code> with the <code>--redactClientLogData</code> option.</p> <p>Note</p> <p>Metadata such as error or operation codes, line numbers, and source file names remain visible in the logs.</p> <p>Log redaction is important for complying with security requirements, but it can make troubleshooting and diagnostics more difficult due to the lack of data related to the log event. For this reason, debug messages are not redacted even when log redaction is enabled. Keep this in mind when switching between log levels.</p> <p>You can permanently enable log redaction by adding the following to the configuration file:</p> <pre><code>security:\n  redactClientLogData: true\n</code></pre> <p>To enable log redaction at runtime, use the <code>setParameter</code> command as follows:</p> <pre><code>db.adminCommand(\n  { setParameter: 1, redactClientLogData : true }\n)\n</code></pre>"},{"location":"log-redaction.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"ngram-full-text-search.html","title":"Additional text search algorithm - ngram","text":"<p>The ngram text search algorithm is useful for searching text for a specific string of characters in a field of a collection. This feature can be used to find exact sub-string matches, which provides an alternative to parsing text from languages other than the list of European languages already supported by MongoDB Community\u2019s full text search engine. It may also turn out to be more convenient when working with the text where symbols like dash(\u2018-\u2018), underscore(\u2018_\u2019), or slash(\u201c/\u201d) are not token delimiters.</p> <p>Unlike MongoDB full text search engine, ngram search algorithm uses only the following token delimiter characters that do not count as word characters in human languages:</p> <ul> <li>Horizontal tab</li> <li>Vertical tab</li> <li>Line feed</li> <li>Carriage return</li> <li>Space</li> </ul> <p>The ngram text search is slower than MongoDB full text search.</p>"},{"location":"ngram-full-text-search.html#usage","title":"Usage","text":"<p>To use ngram, create a text index on a collection setting the <code>default_language</code> parameter to ngram:</p> <pre><code>&gt; db.collection.createIndex({name:\"text\"}, {default_language: \"ngram\"})\n</code></pre> <p>ngram search algorithm treats special characters like individual terms. Therefore, you don\u2019t have to enclose the search string in escaped double quotes (<code>\\\\\"</code>) to query the text index. For example, to search for documents that contain the date <code>2021-02-12</code>, specify the following:</p> <pre><code>&gt; db.collection.find({ $text: { $search: \"2021-02-12\" } })\n</code></pre> <p>However, both ngram and MongoDB full text search engine treat words with the hyphen-minus <code>-</code> sign  in front of them as negated (e.g. \u201c-coffee\u201d)  and exclude such words from the search results.</p>"},{"location":"ngram-full-text-search.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"rate-limit.html","title":"Profiling rate limit","text":"<p>Percona Server for MongoDB can limit the number of queries collected by the database profiler to decrease its impact on performance. Rate limit is an integer between 1 and 1000 and represents the fraction of queries to be profiled. For example, if you set it to 20, then every 20<sup>th</sup> query will be logged. For compatibility reasons, rate limit of 0 is the same as setting it to 1, and will effectively disable the feature meaning that every query will be profiled.</p> <p>The MongoDB database profiler can operate in one of three modes:</p> <ul> <li> <p><code>0</code>: Profiling is disabled. This is the default setting.</p> </li> <li> <p><code>1</code>: The profiler collects data only for slow queries. By default, queries that take more than 100 milliseconds to execute are considered slow.</p> </li> <li> <p><code>2</code>: Collects profiling data for all database operations.</p> </li> </ul> <p>Mode <code>1</code> ignores all fast queries, which may be the cause of problems that you are trying to find. Mode <code>2</code> provides a comprehensive picture of database performance, but may introduce unnecessary overhead.</p> <p>With rate limiting you can collect profiling data for all database operations and reduce overhead by sampling queries. Slow queries ignore rate limiting and are always collected by the profiler.</p>"},{"location":"rate-limit.html#comparing-to-the-samplerate-option","title":"Comparing to the <code>sampleRate</code> option","text":"<p>The <code>sampleRate</code> option (= slowOpSampleRate config file option) is a similar concept to <code>rateLimit</code>. But it works at different profile level, completely ignores operations faster than <code>slowOpsThresholdMs</code> (a.k.a. <code>slowMs</code>), and affects the log file printing, too.</p> sampleRate rateLimit Affects profiling level 1 yes no Affects profiling level 2 no yes Discards/filters slow ops yes no Discards/filters fast ops no yes Affects log file yes no Example value of option 0.02 50 <p><code>rateLimit</code> is a better way to have continuous profiling for monitoring or live analysis purposes. <code>sampleRate</code> requires setting slowOpsThresholdMs to zero if you want to sample all types of operations. <code>sampleRate</code> has an effect on the log file which may either decrease or increase the log volume.</p>"},{"location":"rate-limit.html#enabling-the-rate-limit","title":"Enabling the rate limit","text":"<p>To enable rate limiting, set the profiler mode to <code>2</code> and specify the value of the rate limit. Optionally, you can also change the default threshold for slow queries, which will not be sampled by rate limiting.</p> <p>For example, to set the rate limit to <code>100</code> (profile every 100<sup>th</sup> fast query) and the slow query threshold to <code>200</code> (profile all queries slower than 200 milliseconds), run the <code>mongod</code> instance as follows:</p> <pre><code>$ mongod --profile 2 --slowms 200 --rateLimit 100\n</code></pre> <p>To do the same at runtime, use the <code>profile</code> command. It returns the previous settings and <code>\"ok\" : 1</code> indicates that the operation was successful:</p> <pre><code>&gt; db.runCommand( { profile: 2, slowms: 200, ratelimit: 100 } );\n{ \"was\" : 0, \"slowms\" : 100, \"ratelimit\" : 1, \"ok\" : 1 }\n</code></pre> <p>To check the current settings, run <code>profile: -1</code>:</p> <pre><code>&gt; db.runCommand( { profile: -1 } );\n{ \"was\" : 2, \"slowms\" : 200, \"ratelimit\" : 100, \"ok\" : 1 }\n</code></pre> <p>If you want to set or get just the rate limit value, use the <code>profilingRateLimit</code> parameter on the <code>admin</code> database:</p> <pre><code>&gt; db.getSiblingDB('admin').runCommand( { setParameter: 1, \"profilingRateLimit\": 100 } );\n{ \"was\" : 1, \"ok\" : 1 }\n&gt; db.getSiblingDB('admin').runCommand( { getParameter: 1, \"profilingRateLimit\": 1 } );\n{ \"profilingRateLimit\" : 100, \"ok\" : 1 }\n</code></pre> <p>If you want rate limiting to persist when you restart <code>mongod</code>, set the corresponding variables in the MongoDB configuration file (by default, <code>/etc/mongod.conf</code>):</p> <pre><code>operationProfiling:\n  mode: all\n  slowOpThresholdMs: 200\n  rateLimit: 100\n</code></pre> <p>Note</p> <p>The value of the <code>operationProfiling.mode</code> variable is a string, which you can set to either <code>off</code>, <code>slowOp</code>, or <code>all</code>, corresponding to profiling modes <code>0</code>, <code>1</code>, and <code>2</code>.</p>"},{"location":"rate-limit.html#profiler-collection-extension","title":"Profiler collection extension","text":"<p>Each document in the <code>system.profile</code> collection includes an additional <code>rateLimit</code> field. This field always has the value of <code>1</code> for slow queries and the current rate limit value for fast queries.</p>"},{"location":"rate-limit.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"sasl-auth.html","title":"Set up LDAP authentication with SASL","text":"<p>This document describes an example configuration suitable only to test out the external authentication functionality in a non-production environment. Use common sense to adapt these guidelines to your production environment.</p> <p>To learn more about how the authentication works, see LDAP authentication with SASL.</p>"},{"location":"sasl-auth.html#environment-setup-and-configuration","title":"Environment setup and configuration","text":"<p>The following components are required:</p> <ul> <li> <p><code>slapd</code>: OpenLDAP server.</p> </li> <li> <p><code>libsasl2</code> version 2.1.25 or later.</p> </li> <li> <p><code>saslauthd</code>:  Authentication Daemon (distinct from <code>libsasl2</code>).</p> </li> </ul> <p>The following steps will help you configure your environment:</p>"},{"location":"sasl-auth.html#assumptions","title":"Assumptions","text":"<p>Before we move on to the configuration steps, we assume the following:</p> <ol> <li> <p>You have the LDAP server up and running and have configured users on it. The LDAP server is accessible to the server with Percona Server for MongoDB installed. This document focuses on OpenLDAP server. If you use Microsoft Windows Active Directory, see to the Microsoft Windows Active Directory section for <code>saslauthd</code> configuration.</p> </li> <li> <p>You must place these two servers behind a firewall as the communications between them will be in plain text. This is because the SASL mechanism of PLAIN can only be used when authenticating and credentials will be sent in plain text.</p> </li> <li> <p>You have <code>sudo</code> privilege to the server with the Percona Server for MongoDB installed.</p> </li> </ol>"},{"location":"sasl-auth.html#configuring-saslauthd","title":"Configuring <code>saslauthd</code>","text":"<ol> <li> <p>Install the SASL packages. Depending on your OS, use the following command:</p> Debian and UbuntuRHEL and derivatives <pre><code>$ sudo  apt install -y sasl2-bin\n</code></pre> <pre><code>$ sudo  yum install -y cyrus-sasl\n</code></pre> <p>NOTE: For Percona Server for MongoDB versions earlier than 4.0.26-21, 4.4.8-9, 4.2.16-17, also install the <code>cyrus-sasl-plain</code> package.</p> </li> <li> <p>Configure SASL to use <code>ldap</code> as the  authentication mechanism.</p> <p>Note</p> <p>Back up the original configuration file before making changes.</p> Debian and UbuntuRHEL and derivatives <p>Use the following commands to enable the <code>saslauthd</code> to auto-run on startup and to set the <code>ldap</code> value for the <code>--MECHANISMS</code> option:</p> <pre><code>$ sudo sed -i -e s/^MECH=pam/MECH=ldap/g /etc/sysconfig/saslauthdsudo sed -i -e s/^MECHANISMS=\"pam\"/MECHANISMS=\"ldap\"/g /etc/default/saslauthd\n$ sudo sed -i -e s/^START=no/START=yes/g /etc/default/saslauthd\n</code></pre> <p>Alternatively, you can edit the <code>/etc/default/sysconfig/saslauthd</code> configuration file:</p> <pre><code>START=yes\nMECHANISMS=\"ldap\n</code></pre> <p>Specify the <code>ldap</code> value for the <code>--MECH</code> option using the following command:</p> <pre><code>$ sudo sed -i -e s/^MECH=pam/MECH=ldap/g /etc/sysconfig/saslauthd\n</code></pre> <p>Alternatively, you can edit the /etc/sysconfig/saslauthd configuration file:</p> <pre><code>MECH=ldap\n</code></pre> </li> <li> <p>Create the <code>/etc/saslauthd.conf</code> configuration file and specify the settings that <code>saslauthd</code> requires to connect to a local LDAP service:</p> OpenLDAP serverMicrosoft Windows Active Directory <p>The following is the example configuration file. Note that the server address MUST match the OpenLDAP installation:</p> <pre><code>ldap_servers: ldap://localhost\nldap_mech: PLAIN\nldap_search_base: dc=example,dc=com\nldap_filter: (cn=%u)\nldap_bind_dn: cn=admin,dc=example,dc=com\nldap_password: secret\n</code></pre> <p>Note the LDAP password (<code>ldap_password</code>) and bind domain name (<code>ldap_bind_dn</code>).  This allows the <code>saslauthd</code> service to connect to the LDAP service as admin.  In production, this would not be the case; users should not store administrative passwords in unencrypted files.</p> <p>In order for LDAP operations to be performed  against a Windows Active Directory server,  a user record must be created to perform the lookups.</p> <p>The following example shows configuration parameters for <code>saslauthd</code>  to communicate with an Active Directory server:</p> <pre><code>ldap_servers: ldap://localhost\nldap_mech: PLAIN\nldap_search_base: CN=Users,DC=example,DC=com\nldap_filter: (sAMAccountName=%u)\nldap_bind_dn: CN=ldapmgr,CN=Users,DC=&lt;AD Domain&gt;,DC=&lt;AD TLD&gt;\nldap_password: ld@pmgr_Pa55word\n</code></pre> <p>In order to determine and test the correct search base  and filter for your Active Directory installation,  the Microsoft LDP GUI Tool  can be used to bind and search the LDAP-compatible directory.</p> </li> <li> <p>Start the <code>saslauthd</code> process and set it to run at restart:</p> <pre><code>$ sudo systemctl start saslauthd\n$ sudo systemctl enable saslauthd\n</code></pre> </li> <li> <p>Give write permissions to the <code>/run/saslauthd</code> folder for the <code>mongod</code>. Either change permissions to the  <code>/run/saslauthd</code> folder:</p> <pre><code>$ sudo chmod 755 /run/saslauthd\n</code></pre> <p>Or add the <code>mongod</code> user to the <code>sasl</code> group:</p> <pre><code>$ sudo usermod -a -G sasl mongod\n</code></pre> </li> </ol>"},{"location":"sasl-auth.html#sanity-check","title":"Sanity check","text":"<p>Verify that the <code>saslauthd</code> service can authenticate against the users created in the LDAP service:</p> <pre><code>$ testsaslauthd -u christian -p secret  -f /var/run/saslauthd/mux\n</code></pre> <p>This should return <code>0:OK \"Success\"</code>. If it doesn\u2019t, then either the user name and password are not in the LDAP service, or <code>sasaluthd</code> is not configured properly.</p>"},{"location":"sasl-auth.html#configuring-libsasl2","title":"Configuring libsasl2","text":"<p>The <code>mongod</code> also uses the SASL library for communications. To configure the SASL library, create a configuration file.</p> <p>The configuration file must be named <code>mongodb.conf</code> and placed in a directory where <code>libsasl2</code> can find and read it. <code>libsasl2</code> is hard-coded to look in certain directories at build time. This location may be different depending on the installation method.</p> <p>In the configuration file, specify the following:</p> <pre><code>pwcheck_method: saslauthd\nsaslauthd_path: /var/run/saslauthd/mux\nlog_level: 5\nmech_list: plain\n</code></pre> <p>The first two entries (<code>pwcheck_method</code> and <code>saslauthd_path</code>) are required for <code>mongod</code> to successfully use the <code>saslauthd</code> service. The <code>log_level</code> is optional but may help determine configuration errors.</p> <p>See also</p> <p>SASL documentation</p>"},{"location":"sasl-auth.html#configuring-mongod-server","title":"Configuring <code>mongod</code> server","text":"<p>The configuration consists of the following steps:</p> <ul> <li> <p>Creating a user with the root privileges. This user is required to log in to Percona Server for MongoDB after the external authentication is enabled.</p> </li> <li> <p>Editing the configuration file to enable the external authentication</p> </li> </ul>"},{"location":"sasl-auth.html#create-a-root-user","title":"Create a root user","text":"<p>Create a user with the root privileges in the <code>admin</code> database. If you have already created this user, skip this step. Otherwise, run the following command to create the admin user:</p> <pre><code>&gt; use admin\nswitched to db admin\n&gt; db.createUser({\"user\": \"admin\", \"pwd\": \"$3cr3tP4ssw0rd\", \"roles\": [\"root\"]})\nSuccessfully added user: { \"user\" : \"admin\", \"roles\" : [ \"root\" ] }\n</code></pre>"},{"location":"sasl-auth.html#enable-external-authentication","title":"Enable external authentication","text":"<p>Edit the <code>etc/mongod.conf</code> configuration file to enable the external authentication:</p> <pre><code>security:\n  authorization: enabled\n\nsetParameter:\n  authenticationMechanisms: PLAIN,SCRAM-SHA-1\n</code></pre> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre>"},{"location":"sasl-auth.html#add-an-external-user-to-percona-server-for-mongodb","title":"Add an external user to Percona Server for MongoDB","text":"<p>User authentication is done by mapping a user object on the LDAP server against a user created in the <code>$external</code> database. Thus, at this step, you create the user in the <code>$external</code> database and they inherit the roles and privileges. Note that the username must exactly match the name of the user object on the LDAP server.</p> <p>Connect to Percona Server for MongoDB and authenticate as the root user.</p> <pre><code>$ mongo --host localhost --port 27017 -u admin -p '$3cr3tP4ssw0rd' --authenticationDatabase 'admin'\n</code></pre> <p>Use the following command to add an external user to Percona Server for MongoDB:</p> <pre><code>&gt; db.getSiblingDB(\"$external\").createUser( {user : \"christian\", roles: [ {role: \"read\", db: \"test\"} ]} );\n</code></pre>"},{"location":"sasl-auth.html#authenticate-as-an-external-user-in-percona-server-for-mongodb","title":"Authenticate as an external user in Percona Server for MongoDB","text":"<p>When running the <code>mongo</code> client, a user can authenticate against a given database using the following command:</p> <pre><code>&gt; db.getSiblingDB(\"$external\").auth({ mechanism:\"PLAIN\", user:\"christian\", pwd:\"secret\", digestPassword:false})\n</code></pre> <p>Alternatively, a user can authenticate while connecting to Percona Server for MongoDB:</p> <pre><code>$ mongo --host localhost --port 27017 --authenticationMechanism PLAIN --authenticationDatabase \\$external -u christian -p\n</code></pre> <p>This section is based on the blog post Percona Server for MongoDB Authentication Using Active Directory by Doug Duncan:</p>"},{"location":"sasl-auth.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"set-parameter.html","title":"Percona Server for MongoDB parameter tuning guide","text":"<p>Percona Server for MongoDB includes several parameters that can be changed in one of the following ways:</p>  Configuration file Command line The <code>setParameter</code> command <p>Use the <code>setParameter</code> admonitions in the configuration file  for persistent changes in production:     </p> <pre><code>setParameter:\n  &lt;parameter&gt;: &lt;value&gt;\n</code></pre> <p>Use the <code>--setParameter</code> command line option arguments when running the <code>mongod</code> process for development or testing purposes:      </p> <pre><code>$ mongod \\\n --setParameter &lt;parameter&gt;=&lt;value&gt;\n</code></pre> <p>Use the <code>setParameter</code> command on the <code>admin</code> database      to make changes at runtime:         </p> <pre><code>&gt; db = db.getSiblingDB('admin')\n&gt; db.runCommand( { setParameter: 1, &lt;parameter&gt;: &lt;value&gt; } )\n</code></pre>"},{"location":"set-parameter.html#parameters","title":"Parameters","text":"<p>See what parameters you can define in the parameters list.</p>"},{"location":"set-parameter.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"telemetry.html","title":"Telemetry on Percona Server for MongoDB","text":"<p>Percona telemetry fills in the gaps in our understanding of how you use Percona Server for MongoDB to improve our products. Participation in this anonymous program is optional. You can opt-out if you prefer to not share this information.</p>"},{"location":"telemetry.html#what-information-is-collected","title":"What information is collected","text":"<p>Currently, telemetry is added only to the Percona packages and Docker images. It collects only information about the installation environment. Future releases may add additional telemetry metrics.</p> <p>Be assured that access to this raw data is rigorously controlled. Percona does not collect personal data. All data is anonymous and cannot be traced to a specific user. To learn more about our privacy practices, read the Percona Privacy statement.</p> <p>The following is an example of the collected data:</p> <pre><code>[{\"id\" : \"c416c3ee-48cd-471c-9733-37c2886f8231\",\n\"product_family\" : \"PRODUCT_FAMILY_PSMDB\",\n\"instanceId\" : \"6aef422e-56a7-4530-af9d-94cc02198343\",\n\"createTime\" : \"2023-11-01T10:46:23Z\",\n\"metrics\":\n[{\"key\" : \"deployment\",\"value\" : \"PACKAGE\"},\n{\"key\" : \"pillar_version\",\"value\" : \"4.4.26-25\"},\n{\"key\" : \"OS\",\"value\" : \"Oracle Linux Server 8.8\"},\n{\"key\" : \"hardware_arch\",\"value\" : \"x86_64 x86_64\"}]}]\n</code></pre>"},{"location":"telemetry.html#disable-telemetry","title":"Disable telemetry","text":"<p>Starting with Percona Server for MongoDB 4.4.26-25, telemetry is enabled by default. If you decide not to send usage data to Percona, you can set the <code>PERCONA_TELEMETRY_DISABLE=1</code> environment variable for either the root user or in the operating system prior to the installation process.</p> Debian-derived distributionRed Hat-derived distributionDocker <p>Add the environment variable before the install process.</p> <pre><code>$ sudo PERCONA_TELEMETRY_DISABLE=1 apt install percona-server-mongodb\n</code></pre> <p>Add the environment variable before the install process.</p> <pre><code>$ sudo PERCONA_TELEMETRY_DISABLE=1 yum install percona-server-mongodb\n</code></pre> <p>Add the environment variable when running a command in a new container.</p> <pre><code>$ docker run -d --name psmdb --restart always \\\n  -e PERCONA_TELEMETRY_DISABLE=1 \\\n  percona/percona-server-mongodb:&lt;TAG&gt;\n</code></pre>"},{"location":"telemetry.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"trademark-policy.html","title":"Trademark policy","text":"<p>This Trademark Policy is to ensure that users of Percona-branded products or services know that what they receive has really been developed, approved, tested and maintained by Percona. Trademarks help to prevent confusion in the marketplace, by distinguishing one company\u2019s or person\u2019s products and services from another\u2019s.</p> <p>Percona owns a number of marks, including but not limited to Percona, XtraDB, Percona XtraDB, XtraBackup, Percona XtraBackup, Percona Server, and Percona Live, plus the distinctive visual icons and logos associated with these marks. Both the unregistered and registered marks of Percona are protected.</p> <p>Use of any Percona trademark in the name, URL, or other identifying characteristic of any product, service, website, or other use is not permitted without Percona\u2019s written permission with the following three limited exceptions.</p> <p>First, you may use the appropriate Percona mark when making a nominative fair use reference to a bona fide Percona product.</p> <p>Second, when Percona has released a product under a version of the GNU General Public License (\u201cGPL\u201d), you may use the appropriate Percona mark when distributing a verbatim copy of that product in accordance with the terms and conditions of the GPL.</p> <p>Third, you may use the appropriate Percona mark to refer to a distribution of GPL-released Percona software that has been modified with minor changes for the sole purpose of allowing the software to operate on an operating system or hardware platform for which Percona has not yet released the software, provided that those third party changes do not affect the behavior, functionality, features, design or performance of the software. Users who acquire this Percona-branded software receive substantially exact implementations of the Percona software.</p> <p>Percona reserves the right to revoke this authorization at any time in its sole discretion. For example, if Percona believes that your modification is beyond the scope of the limited license granted in this Policy or that your use of the Percona mark is detrimental to Percona, Percona will revoke this authorization. Upon revocation, you must immediately cease using the applicable Percona mark. If you do not immediately cease using the Percona mark upon revocation, Percona may take action to protect its rights and interests in the Percona mark. Percona does not grant any license to use any Percona mark for any other modified versions of Percona software; such use will require our prior written permission.</p> <p>Neither trademark law nor any of the exceptions set forth in this Trademark Policy permit you to truncate, modify or otherwise use any Percona mark as part of your own brand. For example, if XYZ creates a modified version of the Percona Server, XYZ may not brand that modification as \u201cXYZ Percona Server\u201d or \u201cPercona XYZ Server\u201d, even if that modification otherwise complies with the third exception noted above.</p> <p>In all cases, you must comply with applicable law, the underlying license, and this Trademark Policy, as amended from time to time. For instance, any mention of Percona trademarks should include the full trademarked name, with proper spelling and capitalization, along with attribution of ownership to Percona Inc. For example, the full proper name for XtraBackup is Percona XtraBackup. However, it is acceptable to omit the word \u201cPercona\u201d for brevity on the second and subsequent uses, where such omission does not cause confusion.</p> <p>In the event of doubt as to any of the conditions or exceptions outlined in this Trademark Policy, please contact trademarks@percona.com for assistance and we will do our very best to be helpful.</p>"},{"location":"trademark-policy.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"vault.html","title":"HashiCorp Vault integration","text":"<p>Percona Server for MongoDB is integrated with HashiCorp Vault. HashiCorp Vault supports different secrets engines. Percona Server for MongoDB only supports the HashiCorp Vault back end with KV Secrets Engine - Version 2 (API) with versioning enabled.</p> <p>See also</p> <p>Percona Blog: Using Vault to Store the Master Key for Data at Rest Encryption on Percona Server for MongoDB</p> <p>HashiCorp Vault Documentation: How to configure the KV Engine</p>"},{"location":"vault.html#hashicorp-vault-parameters","title":"HashiCorp Vault Parameters","text":"Command line Configuration file Type Description vaultServerName security.vault.serverName string The IP address of the Vault server vaultPort security.vault.port int The port on the Vault server vaultTokenFile security.vault.tokenFile string The path to the vault token file. The token file is used by MongoDB to access HashiCorp Vault. The vault token file consists of the raw vault token and does not include any additional strings or parameters.   Example of a vault token file:  <code>s.uTrHtzsZnEE7KyHeA797CkWA</code> vaultSecret security.vault.secret string The path to the Vault secret. The Vault secret path format must be <code>&lt;secrets_engine_mount_path&gt;/data/&lt;custom_path&gt;</code>  where:  - <code>&lt;secrets_engine_mount_path&gt;</code> is the path to the Key/Value Secrets Engine v2;  - <code>data</code> is the mandatory path prefix required by Version 2 API;  - <code>&lt;custom_path&gt;</code> is the path to the specific secret.   Example: <code>secret_v2/data/psmdb-test/rs1-27017</code>  Starting with version 4.4.19-19, a distinct Vault secret path for every replica set member is no longer mandatory. In earlier versions, it is recommended to use different secret paths for every database node in the entire deployment to avoid issues during the master key rotation. vaultSecretVersion security.vault.secretVersion unsigned long (Optional) The version of the Vault secret to use vaultRotateMasterKey security.vault.rotateMasterKey switch When enabled, rotates the master key and exits vaultServerCAFile security.vault.serverCAFile string The path to the TLS certificate file vaultDisableTLSForTesting security.vault.disableTLSForTesting switch Disables secure connection to Vault using SSL/TLS client certificates <p>Config file example</p> <pre><code>security:\n  enableEncryption: true\n  vault:\n    serverName: 127.0.0.1\n    port: 8200\n    tokenFile: /home/user/path/token\n    secret: secret/data/hello\n</code></pre> <p>During the first run of the Percona Server for MongoDB, the process generates a secure key and writes the key to the vault.</p> <p>During the subsequent start, the server tries to read the master key from the vault. If the configured secret does not exist, vault responds with HTTP 404 error.</p>"},{"location":"vault.html#namespaces","title":"Namespaces","text":"<p>Namespaces are isolated environments in Vault that allow for separate secret key and policy management.</p> <p>You can use Vault namespaces with Percona Server for MongoDB. Specify the namespace(s) for the <code>security.vault.secret</code> option value as follows:</p> <pre><code>&lt;namespace&gt;/secret/data/&lt;secret_path&gt;\n</code></pre> <p>For example, the path to secret keys for namespace <code>test</code> on  the secrets engine <code>secret</code> will be <code>test/secret/&lt;my_secret_path&gt;</code>.</p>"},{"location":"vault.html#targeting-a-namespace-in-vault-configuration","title":"Targeting a namespace in Vault configuration","text":"<p>You have the following options of how to target a particular namespace when configuring Vault:</p> <ol> <li>Set the VAULT_NAMESPACE environment variable so that all subsequent commands are executed against that namespace. Use the following command to set the environment variable for the namespace <code>test</code>:</li> </ol> <p><pre><code>$ export VAULT_NAMESPACE=test\n</code></pre> 2. Provide the namespace with the <code>-namespace</code> flag in commands</p> <p>See also</p> <p>HashiCorp Vault Documentation:</p> <ul> <li> <p>Namespaces</p> </li> <li> <p>Secure Multi-Tenancy with Namespaces</p> </li> </ul>"},{"location":"vault.html#key-rotation","title":"Key rotation","text":"<p>Key rotation is replacing the old master key with a new one. This process helps to comply with regulatory requirements.</p> <p>To rotate the keys for a single <code>mongod</code> instance, do the following:</p> <ol> <li> <p>Stop the <code>mongod</code> process</p> </li> <li> <p>Add <code>--vaultRotateMasterKey</code> option via the command line or <code>security.vault.rotateMasterKey</code> to the config file.</p> </li> <li> <p>Run the <code>mongod</code> process with the selected option, the process will perform the key rotation and exit.</p> </li> <li> <p>Remove the selected option from the startup command or the config file.</p> </li> <li> <p>Start <code>mongod</code> again.</p> </li> </ol> <p>Rotating the master key process also re-encrypts the keystore using the new master key. The new master key is stored in the vault. The entire dataset is not re-encrypted.</p>"},{"location":"vault.html#key-rotation-in-replica-sets","title":"Key rotation in replica sets","text":"<p>Starting with version 4.4.19-19, you can store the master key at the same path on every replica set member in your entire deployment. Vault assigns different versions to the master keys stored at the same path. The path and the version serve as the unique identifier of a master key. The <code>mongod</code> server stores that identifier and uses it to retrieve the correct master key from the Vault server during the restart.  </p> <p>In versions 4.4.18-18 and earlier, every <code>mongod</code> node in a replica set in your entire deployment must have a distinct path to the master keys on a Vault server. </p> <p>The key rotation steps are the following:</p> <ol> <li>Rotate the master key for the secondary nodes one by one.</li> <li>Step down the primary and wait for another primary to be elected.</li> <li>Rotate the master key for the previous primary node.</li> </ol>"},{"location":"vault.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"what-next.html","title":"What\u2019s next?","text":"<p>Congratulations on completing your first hands-on experience with Percona Server for MongoDB. </p> <p>To deepen your knowledge in working with the database, see the MongoDB documentation on aggregation, indexes, data modelling, transactions.</p> <p>The following sections help you achieve your organization\u2019s goals on:</p>"},{"location":"what-next.html#high-availability","title":"High availability","text":"<p>Multiple copies of the data on different servers provide redundancy and high availability. MongoDB replica sets serve this purpose. Replica sets also increase data availability and provide fault tolerance against the loss of a database instance.</p> <p>Replica set deployment </p>"},{"location":"what-next.html#scalability","title":"Scalability","text":"<p>Ensure your database handles the load as your data set grows without performance degradation. The sharding method in MongoDB is the distribution of data across multiple servers where each server handles a subset of data. This is the horizontal scaling mechanism where you can add additional servers if needed for a lower overall cost than upgrading existing hardware. The tradeoff is additional  complexity in the infrastructure management.</p> <p>Deploy a sharded cluster  </p>"},{"location":"what-next.html#encryption","title":"Encryption","text":"<p>Protecting your data from unauthorized access is crucial. Introducing data-at-rest encryption helps protect sensitive information when it is stored on storage devices, such as hard drives, solid-state drives, or other types of persistent storage. Percona Server for MongoDB is integrated with several external key managers.</p> <p>Data-at-rest encryption  </p>"},{"location":"what-next.html#backup-and-restore","title":"Backup and restore","text":"<p>Protect your database against data loss by implementing a backup strategy. You can either use the built-in hot backup feature or consider deploying Percona Backup for MongoDB - an open source solution for making consistent backups and restores in sharded clusters and replica sets.</p> <p>Percona Backup for MongoDB </p>"},{"location":"what-next.html#monitoring","title":"Monitoring","text":"<p>Get insights into the database health and performance using Percona Monitoring and Management (PMM) - an open-source database monitoring, management, and observability solution for MySQL, PostgreSQL, and MongoDB. It allows you to observe the health of your database systems, explore new patterns in their behavior, troubleshoot them and perform database management operations </p> <p>Get started with PMM </p>"},{"location":"what-next.html#advanced-command-line-tools","title":"Advanced command line tools","text":"<p>Perform sophisticated database management and administration tasks using Percona Toolkit - a collection of advanced command-line tools developed and tested by Percona as an alternative to private or \u201cone-off\u201d scripts.</p> <p>Get Percona Toolkit </p>"},{"location":"what-next.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"x509-ldap.html","title":"Set up x.509 authentication and LDAP authorization","text":"<p>x.509 certificate authentication is one of the supported authentication mechanisms in Percona Server for MongoDB. It is compatible with LDAP authorization to enable you to control user access and operations in your database environment.</p> <p>This document provides the steps on how to configure and use x.509 certificates for authentication in Percona Server for MongoDB and authorize users in the LDAP server.</p>"},{"location":"x509-ldap.html#considerations","title":"Considerations","text":"<ol> <li> <p>For testing purposes, in this tutorial we use OpenSSL to issue self-signed certificates. For production use, we recommend using certificates issued and signed by the CA in Percona Server for MongoDB. Client certificates must meet the client certificate requirements.</p> </li> <li> <p>The setup of the LDAP server and the configuration of the LDAP schema is out of scope of this document. We assume that you have the LDAP server up and running and accessible to Percona Server for MongoDB.</p> </li> </ol>"},{"location":"x509-ldap.html#setup-procedure","title":"Setup procedure","text":""},{"location":"x509-ldap.html#issue-certificates","title":"Issue certificates","text":"<ol> <li> <p>Create a directory to store the certificates. For example, <code>/var/lib/mongocerts</code>.</p> <pre><code>$ sudo mkdir -p /var/lib/mongocerts\n</code></pre> </li> <li> <p>Grant access to the <code>mongod</code> user to this directory:</p> <pre><code>$ sudo chown mongod:mongod /var/lib/mongocerts\n</code></pre> </li> </ol>"},{"location":"x509-ldap.html#generate-the-root-certificate-authority-certificate","title":"Generate the root Certificate Authority certificate","text":"<p>The root Certificate Authority certificate will be used to sign the SSL certificates.</p> <p>Run the following command and in the <code>-subj</code> flag, provide the details about your organization:</p> <ul> <li>C - Country Name (2 letter code);</li> <li>ST - State or Province Name (full name);</li> <li>L - Locality Name (city);</li> <li>O - Organization Name (company);</li> <li>CN - Common Name (your name or your server\u2019s hostname) .</li> </ul> <pre><code>$ cd /var/lib/mongocerts\n$ sudo openssl req -nodes -x509 -newkey rsa:4096 -keyout ca.key -out ca.crt -subj \"/C=US/ST=California/L=SanFrancisco/O=Percona/OU=root/CN=localhost\"\n</code></pre>"},{"location":"x509-ldap.html#generate-server-certificate","title":"Generate server certificate","text":"<ol> <li> <p>Create the server certificate request and key. In the <code>-subj</code> flag, provide the details about your organization:</p> <ul> <li> <p>C - Country Name (2 letter code);</p> </li> <li> <p>ST - State or Province Name (full name);</p> </li> <li> <p>L - Locality Name (city);</p> </li> <li> <p>O - Organization Name (company);</p> </li> <li> <p>CN - Common Name (your name or your server\u2019s hostname) .</p> </li> </ul> <pre><code>$ sudo openssl req -nodes -newkey rsa:4096 -keyout server.key -out server.csr -subj \"/C=US/ST=California/L=SanFrancisco/O=Percona/OU=server/CN=localhost\"\n</code></pre> </li> <li> <p>Sign the server certificate request with the root CA certificate:</p> <pre><code>$ sudo openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt\n</code></pre> </li> <li> <p>Combine the server certificate and key to create a certificate key file. Run this command as the <code>root</code> user:</p> <pre><code>$ cat server.key server.crt &gt; server.pem\n</code></pre> </li> </ol>"},{"location":"x509-ldap.html#generate-client-certificates","title":"Generate client certificates","text":"<ol> <li> <p>Generate client certificate request and key. In the <code>-subj</code> flag, specify the information about clients in the DN format.</p> <pre><code>$ openssl req -nodes -newkey rsa:4096 -keyout client.key -out client.csr -subj \"/DC=com/DC=percona/CN=John Doe\"\n</code></pre> </li> <li> <p>Sign the client certificate request with the root CA certificate.</p> <pre><code>$ openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -set_serial 02 -out client.crt\n</code></pre> </li> <li> <p>Combine the client certificate and key to create a certificate key file.</p> <pre><code>$ cat client.key client.crt &gt; client.pem\n</code></pre> </li> </ol>"},{"location":"x509-ldap.html#set-up-the-ldap-server","title":"Set up the LDAP server","text":"<p>The setup of the LDAP server is out of scope of this document. Please work with your LDAP administrators to set up the LDAP server and configure the LDAP schema.</p>"},{"location":"x509-ldap.html#configure-the-mongod-server","title":"Configure the <code>mongod</code> server","text":"<p>The configuration consists of the following steps:</p> <ul> <li>Creating a role that matches the user group on the LDAP server</li> <li>Editing the configuration file to enable the x.509 authentication</li> </ul> <p>Note</p> <p>When you use x.509 authentication with LDAP authorization, you don\u2019t need to create users in the <code>$external</code> database.  User management is done on the LDAP server so when a client connects to the database, they are authenticated and authorized through the LDAP server.</p>"},{"location":"x509-ldap.html#create-roles","title":"Create roles","text":"<p>At this step, create the roles in the <code>admin</code> database with the names that exactly match the names of the user groups on the LDAP server. These roles are used for user LDAP authorization in Percona Server for MongoDB.</p> <p>In our example, we create the role <code>cn=otherusers,dc=percona,dc=com</code> that has the corresponding LDAP group.</p> <pre><code>var admin = db.getSiblingDB(\"admin\")\ndb.createRole(\n   {\n     role: \"cn=otherusers,dc=percona,dc=com\",\n     privileges: [],\n     roles: [\n           \"userAdminAnyDatabase\",\n           \"clusterMonitor\",\n           \"clusterManager\",\n           \"clusterAdmin\"\n            ]\n   }\n)\n</code></pre> <p>Output:</p> <pre><code>{\n     \"role\" : \"cn=otherusers,dc=percona,dc=com\",\n     \"privileges\" : [ ],\n     \"roles\" : [\n             \"userAdminAnyDatabase\",\n             \"clusterMonitor\",\n             \"clusterManager\",\n             \"clusterAdmin\"\n     ]\n}\n</code></pre>"},{"location":"x509-ldap.html#enable-x509-authentication","title":"Enable x.509 authentication","text":"<ol> <li> <p>Stop the <code>mongod</code> service</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Edit the <code>/etc/mongod.conf</code> configuration file.</p> <pre><code>net:\n  port: 27017\n  bindIp: 127.0.0.1\n  tls:\n    mode: requireTLS\n    certificateKeyFile: /var/lib/mongocerts/server.pem\n    CAFile: /var/lib/mongocerts/ca.crt\n\nsecurity:\n  authorization: enabled\n  ldap:\n    servers: \"ldap.example.com\"\n    transportSecurity: none\n    authz:\n      queryTemplate: \"dc=percona,dc=com??sub?(&amp;(objectClass=groupOfNames)(member={USER}))\"\n\nsetParameter:\n  authenticationMechanisms: PLAIN,MONGODB-X509\n</code></pre> <p>Replace <code>ldap.example.com</code> with the hostname of your LDAP server. In the LDAP query template, replace the domain controllers <code>percona</code> and <code>com</code> with those relevant to your organization.</p> </li> <li> <p>Start the <code>mongod</code> service</p> <pre><code>$ sudo systemctl start mongod\n</code></pre> </li> </ol>"},{"location":"x509-ldap.html#authenticate-with-the-x509-certificate","title":"Authenticate with the x.509 certificate","text":"<p>To test the authentication, connect to Percona Server for MongoDB using the following command:</p> <pre><code>$ mongo --host localhost --tls --tlsCAFile /var/lib/mongocerts/ca.crt --tlsCertificateKeyFile &lt;path_to_client_certificate&gt;/client.pem  --authenticationMechanism MONGODB-X509 --authenticationDatabase='$external'\n</code></pre> <p>The result should look like the following:</p> <pre><code>&gt; db.runCommand({connectionStatus : 1})\n{\n     \"authInfo\" : {\n             \"authenticatedUsers\" : [\n                     {\n                             \"user\" : \"CN=John Doe,DC=percona,DC=com\",\n                             \"db\" : \"$external\"\n                     }\n             ],\n             \"authenticatedUserRoles\" : [\n                     {\n                             \"role\" : \"cn=otherreaders,dc=percona,dc=com\",\n                             \"db\" : \"admin\"\n                     },\n                     {\n                             \"role\" : \"clusterAdmin\",\n                             \"db\" : \"admin\"\n                     },\n                     {\n                             \"role\" : \"userAdminAnyDatabase\",\n                             \"db\" : \"admin\"\n                     },\n                     {\n                             \"role\" : \"clusterManager\",\n                             \"db\" : \"admin\"\n                     },\n                     {\n                             \"role\" : \"clusterMonitor\",\n                             \"db\" : \"admin\"\n                     }\n             ]\n     },\n     \"ok\" : 1\n}\n</code></pre>"},{"location":"x509-ldap.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/index.html","title":"Quickstart guides","text":"<p>Percona Server for MongoDB is an enhanced, fully compatible, source available, drop-in replacement for MongoDB 4.4 Community Edition with enterprise-grade features.</p> <p>Find the full list of supported platforms for Percona Server for MongoDB on the Percona Software and Platform Lifecycle page.</p>"},{"location":"install/index.html#install-percona-server-for-mongodb","title":"Install Percona Server for MongoDB","text":"<p>You can use any of the easy-install guides. We recommend to use the package manager of your operating system for a convenient and quick way to install the software for production use. Use Docker to try the software first.</p>  Package manager Docker Kubernetes Build from source Manual download <p>Use the package manager of your operating system to install Percona Server for MongoDB:</p> <p>on Debian and Ubuntu  on RHEL and derivatives </p> <p>We gather Telemetry data in Percona packages.</p> <p>Get our Docker image and spin up Percona Server for MongoDB for a quick evaluation. </p> <p>Check the Docker guide for step-by-step guidelines.</p> <p>Run in Docker </p> <p>We gather Telemetry data in Docker images.</p> <p>Percona Operator for Kubernetes is a controller introduced to simplify complex deployments that require meticulous and secure database expertise. </p> <p>Check the Quickstart guides how to deploy and run Percona Server for MongoDB on Kubernetes with Percona Operator for MongoDB.</p> <p>Deploy in Kubernetes Quickstart </p> <p>Have a full control over the installation by building Percona Server for MongoDB from source code.</p> <p>Check the guide below for step-by-step instructions.</p> <p>Build from source </p> <p>If you need to install Percona Server for MongoDB offline or prefer a specific version of it, check out the link below for a step-by-step guide and get access to the downloads directory.</p> <p>Note that for this scenario you must make sure that all dependencies are satisfied.</p> <p>Install from tarballs </p>"},{"location":"install/index.html#upgrade-instructions","title":"Upgrade instructions","text":"<p>If you are currently using MongoDB Community Edition, see Upgrading from MongoDB.</p> <p>If you are running an earlier version of Percona Server for MongoDB, see Upgrading from Version 4.2.</p>"},{"location":"install/index.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/apt.html","title":"Install Percona Server for MongoDB on Debian and Ubuntu","text":"<p>This document describes how to install Percona Server for MongoDB from Percona repositories on DEB-based distributions such as Debian and Ubuntu. </p> <p>We gather Telemetry data to understand the use of the software and improve our products.</p> Package contents Package Contains <code>percona-server-mongodb</code> The <code>mongo</code> shell, import/export tools, other client utilities, server software, default configuration, and <code>init.d</code> scripts. <code>percona-server-mongodb-server</code> The mongod<code>server, default configuration files, and</code>init.d` scripts <code>percona-server-mongodb-shell</code> The <code>mongo</code> shell <code>percona-server-mongodb-mongos</code> The <code>mongos</code> sharded cluster query router <code>percona-server-mongodb-tools</code> Mongo tools for high-performance MongoDB fork from Percona <code>percona-server-mongodb-dbg</code> Debug symbols for the server"},{"location":"install/apt.html#procedure","title":"Procedure","text":"<p>Before you start, check the system requirements.</p>"},{"location":"install/apt.html#configure-percona-repository","title":"Configure Percona repository","text":"<p>To install from Percona repositories, first you need to enable the required repository using the <code>percona-release</code> repository management tool.</p> <ol> <li> <p>Fetch percona-release packages from Percona web:</p> <pre><code>$ wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb\n</code></pre> </li> <li> <p>Install the downloaded package with dpkg:</p> <pre><code>$ sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb\n</code></pre> <p>After you install this package, you have the access to Percona repositories. You can check the repository setup in the <code>/etc/apt/sources.list.d/percona-release.list</code> file.</p> </li> <li> <p>Enable the repository:</p> <pre><code>$ sudo percona-release enable psmdb-44 release\n</code></pre> </li> <li> <p>Remember to update the local cache:</p> <pre><code>$ sudo apt update\n</code></pre> </li> </ol>"},{"location":"install/apt.html#install-percona-server-for-mongodb","title":"Install Percona Server for MongoDB","text":"Install the latest version Install a specific version <p>Run the following command to install the latest version of Percona Server for MongoDB:</p> <pre><code>$ sudo apt install percona-server-mongodb\n</code></pre> <p>To install a specific version of Percona Server for MongoDB, do the following:</p> <ol> <li> <p>List available versions:</p> <pre><code>$ sudo apt-cache madison percona-server-mongodb\n</code></pre> <p>??? example \u201cSample output\u201d</p> <pre><code> ```{.text .no-copy}\n percona-server-mongodb | 4.4.17-17.jammy | http://repo.percona.com/psmdb-44/apt jammy/main amd64 Packages\n percona-server-mongodb | 4.4.16-16.jammy | http://repo.percona.com/psmdb-44/apt jammy/main amd64 Packages\n percona-server-mongodb | 4.4.15-15.jammy | http://repo.percona.com/psmdb-44/apt jammy/main amd64 Packages\n percona-server-mongodb |  4.4.17-17 | http://repo.percona.com/psmdb-44/apt jammy/main Sources\n percona-server-mongodb |  4.4.16-16 | http://repo.percona.com/psmdb-44/apt jammy/main Sources\n percona-server-mongodb |  4.4.15-15 | http://repo.percona.com/psmdb-44/apt jammy/main Sources\n ```\n</code></pre> </li> <li> <p>Install a specific version packages. You must specify each package with the version number. For example, to install Percona Server for MongoDB 4.4.15-15, run the following command:</p> <pre><code>$ sudo apt install percona-server-mongodb=4.4.15-15.jammy percona-server-mongodb-mongos=4.4.15-15.jammy percona-server-mongodb-shell=4.4.15-15.jammy percona-server-mongodb-server=4.4.15-15.jammy percona-server-mongodb-tools=4.4.15-15.jammy\n</code></pre> </li> </ol>"},{"location":"install/apt.html#run-percona-server-for-mongodb","title":"Run Percona Server for MongoDB","text":"<p>By default, Percona Server for MongoDB stores data files in <code>/var/lib/mongodb/</code> and configuration parameters in <code>/etc/mongod.conf</code>.</p> <p>Start the service</p> <p>Percona Server for MongoDB is started automatically after installation unless it encounters errors during the installation process.</p> <p>You can also manually start it using the following command:</p> <pre><code>$ sudo systemctl start mongod\n</code></pre> <p>Confirm that the service is running</p> <p>Check the service status using the following command:</p> <pre><code>$ sudo systemctl status mongod\n</code></pre> <p>Stop the service</p> <p>Stop the service using the following command:</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> <p>Restart the service</p> <p>Restart the service using the following command:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre> <p>Congratulations! Your Percona Server for MongoDB is up and running. </p>"},{"location":"install/apt.html#next-steps","title":"Next steps","text":"<p>Connect to MongoDB </p>"},{"location":"install/apt.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/docker.html","title":"Run Percona Server for MongoDB in a Docker container","text":"<p>Docker images of Percona Server for MongoDB are hosted publicly on Docker Hub at https://hub.docker.com/r/percona/percona-server-mongodb/.</p> <p>For more information about using Docker, see the Docker Docs.</p> <p>Note</p> <p>Make sure that you are using the latest version of Docker.  The ones provided via <code>apt</code> and <code>yum</code> may be outdated and cause errors.</p> <p>By default, Docker will pull the image from Docker Hub if it is not available locally.</p> <p>We gather Telemetry data to understand the use of the software and improve our products.</p> <p>To run the latest Percona Server for MongoDB 4.4 in a Docker container, run the following command as the root user or via <code>sudo</code>:</p> <pre><code>$ docker run -d --name psmdb --restart always \\\npercona/percona-server-mongodb:&lt;TAG&gt;-multi\n</code></pre> <p>Replace the <code>&lt;TAG&gt;</code> with the desired version (for example, 4.4.24-23-multi)</p> <p>The command does the following:</p> <ul> <li> <p>The <code>docker run</code> command instructs the <code>docker</code> daemon to run a container from an image.</p> </li> <li> <p>The <code>-d</code> option starts the container in detached mode (that is, in the background).</p> </li> <li> <p>The <code>--name</code> option assigns a custom name for the container that you can use to reference the container within a Docker network. In this case: <code>psmdb</code>.</p> </li> <li> <p>The <code>--restart</code> option defines the container\u2019s restart policy. Setting it to <code>always</code> ensures that the Docker daemon will start the container on startup and restart it if the container exits.</p> </li> <li> <p>The <code>&lt;TAG&gt;-multi</code> is the tag specifying the version you need. For example, <code>4.4.29-28-multi</code>. The <code>multi</code> part of the tag serves to identify the architecture (x86_64 or ARM64) and pull the respective image. See the full list of tags.</p> </li> </ul>"},{"location":"install/docker.html#access-container-shell","title":"Access container shell","text":"<p>Run the following command to start the bash session and run commands inside the container:</p> <pre><code>$ docker exec -it &lt;container-name&gt;\n</code></pre> <p>where <code>&lt;container-name&gt;</code> is the name of your database container.</p> <p>For example, to connect to Percona Serer for MongoDB, run:</p> <pre><code>$ mongo\n</code></pre>"},{"location":"install/docker.html#connect-from-another-docker-container","title":"Connect from another Docker container","text":"<p>The Percona Server for MongoDB container exposes standard MongoDB port (27017), which can be used for connection from an application running in another container.</p> <p>For example, to set up a replica set for testing purposes, you have the following options:</p> <ul> <li>Interconnect the <code>mongod</code> nodes in containers on a default <code>bridge</code> network. In this scenario, containers communicate with each other by their IP address.</li> <li>Create a user-defined network and interconnect the <code>mongod</code> nodes on it. In this scenario, containers communicate with each other by name.</li> <li>Automate the container provisioning and the replica set setup via the Docker Compose tool.</li> </ul> <p>In the following example, <code>rs101</code>, <code>rs102</code>, <code>rs103</code> are the container names for Percona Server for MongoDB and <code>rs</code> is the replica set name.</p> Bridge networkUser-defined networkDocker Compose <p>When you start Docker, a default <code>bridge</code> network is created and all containers are automatically attached to it unless otherwise specified. </p> <ol> <li> <p>Start the containers and expose different ports</p> <pre><code>$ docker run --rm -d --name rs101 -p 27017:27017  percona/percona-server-mongodb:4.4 --port=27017 --replSet rs\n$ docker run --rm -d --name rs102 -p 28017:28017  percona/percona-server-mongodb:4.4 --port=28017 --replSet rs\n$ docker run --rm -d --name rs103 -p 29017:29017  percona/percona-server-mongodb:4.4 --port=29017 --replSet rs\n</code></pre> </li> <li> <p>Check that the containers are started</p> <pre><code>$ docker container ls\n</code></pre> Sample output <pre><code>CONTAINER ID  IMAGE                                         COMMAND               CREATED         STATUS             PORTS                     NAMES\n3a4b70cd386b  percona/percona-server-mongodb:4.4  --port=27017 --re...  3 minutes ago   Up 3 minutes ago   0.0.0.0:27017-&gt;27017/tcp  rs101\nc9b40a00e32b  percona/percona-server-mongodb:4.4  --port=28017 --re...  11 seconds ago  Up 11 seconds ago  0.0.0.0:28017-&gt;28017/tcp  rs102\nb8aebc00309e  percona/percona-server-mongodb:4.4  --port=29017 --re...  3 seconds ago   Up 3 seconds ago   0.0.0.0:29017-&gt;29017/tcp  rs103\n</code></pre> </li> <li> <p>Get the IP addresses of each container</p> <pre><code>$ docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' rs101\n$ docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' rs102\n$ docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' rs103\n</code></pre> </li> <li> <p>Interconnect the containers and initiate the replica set. Replace <code>rs101SERVER</code>, <code>rs102SERVER</code> and <code>rs103SERVER</code> with the IP address of each respective container.</p> <pre><code>$ docker exec -ti rs101 mongo --eval 'config={\"_id\":\"rs\",\"members\":[{\"_id\":0,\"host\":\"rs101SERVER:27017\"},{\"_id\":1,\"host\":\"rs102SERVER:28017\"},{\"_id\":2,\"host\":\"rs103SERVER:29017\"}]};rs.initiate(config);'\n</code></pre> </li> <li> <p>Check your setup</p> <pre><code>$ docker exec -ti rs101 mongo --eval 'rs.status()'\n</code></pre> </li> </ol> <p>You can isolate desired containers in a user-defined network and provide DNS resolution across them so that they communicate with each other by hostname.</p> <ol> <li> <p>Create the network:</p> <pre><code>$ docker network create my-network\n</code></pre> </li> <li> <p>Start the containers and connect them to your network, exposing different ports</p> <pre><code>$ docker run --rm -d --name rs101 --net my-network -p 27017:27017  percona/percona-server-mongodb:4.4 --port=27017 --replSet rs\n$ docker run --rm -d --name rs102 --net my-network -p 28017:28017  percona/percona-server-mongodb:4.4 --port=28017 --replSet rs\n$ docker run --rm -d --name rs103 --net my-network -p 29017:29017  percona/percona-server-mongodb:4.4 --port=29017 --replSet rs\n</code></pre> <p>Alternatively, you can connect the already running containers to your network:</p> <pre><code>$ docker network connect my-network rs101 rs102 rs103\n</code></pre> </li> <li> <p>Interconnect the containers and initiate the replica set. </p> <pre><code>$ docker exec -ti rs101 mongo --eval 'config={\"_id\":\"rs\",\"members\":[{\"_id\":0,\"host\":\"rs101:27017\"},{\"_id\":1,\"host\":\"rs102:28017\"},{\"_id\":2,\"host\":\"rs103:29017\"}]};rs.initiate(config);'\n</code></pre> </li> <li> <p>Check your setup</p> <pre><code>$ docker exec -ti rs101 mongo --eval 'rs.status()'\n</code></pre> </li> </ol> <p>As the precondition, you need to have Docker Engine and Docker Compose on your machine. Refer to Docker documentation for how to get Docker Compose.</p> <ol> <li> <p>Create a compose file and define the services in it.</p> docker-compose.yaml<pre><code>version: \"3\"\nservices:\n  rs101:\n    image: percona/percona-server-mongodb:4.4\n    container_name: rs101\n    hostname: rs101\n    ports:\n      - \"27017:27017\"\n    networks:\n      - my-network\n    command: \"--port=27017 --replSet rs\"\n\n  rs102:\n    image: percona/percona-server-mongodb:4.4\n    container_name: rs102\n    hostname: rs102\n    ports:\n      - \"28017:28017\"    \n    networks:\n      - my-network\n    command: \"--port=28017 --replSet rs\"\n\n  rs103:\n    image: percona/percona-server-mongodb:4.4\n    container_name: rs103\n    hostname: rs103\n    ports:\n      - \"29017:29017\"    \n    networks:\n      - my-network\n    command: \"--port=29017 --replSet rs\"\n\n  rs-init:\n    image: percona/percona-server-mongodb:4.4\n    container_name: rs-init\n    restart: \"no\"\n    networks:\n      - my-network\n    depends_on:\n      - rs101\n      - rs102\n      - rs103\n    command: &gt;\n      mongo --host rs101:27017 --eval \n      '\n      config = {\n      \"_id\" : \"rs\",\n      \"members\" : [\n        {\n          \"_id\" : 0,\n          \"host\" : \"rs101:27017\"\n        },\n        {\n          \"_id\" : 1,\n          \"host\" : \"rs102:28017\"\n        },\n        {\n          \"_id\" : 2,\n          \"host\" : \"rs103:29017\"\n        }\n      ]\n      };\n      rs.initiate(config);\n      ' \nnetworks:\n  my-network:\n    driver: bridge\n</code></pre> </li> <li> <p>Build and run the replica set with Compose </p> <pre><code>$ docker compose up -d\n</code></pre> </li> <li> <p>Check your setup</p> <pre><code>$ docker exec -ti rs101 mongo --eval 'rs.status()'\n</code></pre> </li> </ol>"},{"location":"install/docker.html#connect-with-the-mongo-shell","title":"Connect with the <code>mongo</code> shell","text":"<p>To start another container with the <code>mongo</code> shell that connects to your Percona Server for MongoDB container, run the following command: </p> <pre><code>$ docker run -it --link psmdb --rm percona/percona-server-mongodb:4.4 mongo mongodb://MONGODB_SERVER:PORT/DB_NAME\n</code></pre> <p>Set <code>MONGODB_SERVER</code>, <code>PORT</code>, and <code>DB_NAME</code> with the IP address of the <code>psmdb</code> container, the port of your MongoDB server (default value is 27017), and the name of the database you want to connect to.</p> <p>You can get the IP address by running this command:</p> <pre><code>$ docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' psmdb\n</code></pre>"},{"location":"install/docker.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/minor-upgrade.html","title":"Minor upgrade of Percona Server for MongoDB","text":"<p>To upgrade Percona Server for MongoDB to the latest version, follow these steps:</p> <ol> <li> <p>Stop the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Install the latest version packages. Use the command relevant to your operating system.</p> </li> <li> <p>Start the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl start mongod\n</code></pre> </li> </ol> <p>To upgrade a replica set or a sharded cluster, use the rolling restart method. It allows you to perform the upgrade with minimum downtime. You upgrade the nodes one by one, while the whole cluster / replica set remains operational.</p>"},{"location":"install/minor-upgrade.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/source.html","title":"Build from source code","text":"<p>To build Percona Server for MongoDB, you need: </p> <ul> <li>A modern C++ compiler capable of compiling C++17 like GCC 8.2 or newer </li> <li>Amazon AWS Software Development Kit for C++ library </li> <li>Python 3.6.x and Pip. </li> <li>The set of dependencies for your operating system. The following table lists dependencies for Ubuntu 20.04, CentOS 7 and Red Hat Enterprise 8 and compatible derivatives:</li> </ul> Linux Distribution Dependencies Debian/Ubuntu python3 python3-dev python3-pip scons gcc g++ cmake curl libssl-dev libldap2-dev libkrb5-dev libcurl4-openssl-dev libsasl2-dev liblz4-dev libpcap-dev libbz2-dev libsnappy-dev zlib1g-dev libzlcore-dev libsasl2-dev liblzma-dev libext2fs-dev e2fslibs-dev bear CentOS / RedHat Enterprise Linux 7 centos-release-scl epel-release python3 python3-devel scons gcc gcc-c++ cmake3 openssl-devel cyrus-sasl-devel snappy-devel zlib-devel bzip2-devel libcurl-devel lz4-devel openldap-devel krb5-devel xz-devel e2fsprogs-devel expat-devel devtoolset-8-gcc devtoolset-8-gcc-c++ RedHat Enterprise Linux/CentOS 8 python36 python36-develgcc-c++ gcc cmake3 wgetopenssl-devel zlib-develcyrus-sasl-devel xz-develbzip2-devel libcurl-devellz4-devel e2fsprogs-develkrb5-devel openldap-develexpat-devel cmake"},{"location":"install/source.html#build-steps","title":"Build steps","text":""},{"location":"install/source.html#install-python-and-python-modules","title":"Install Python and Python modules","text":"<ol> <li> <p>Clone Percona Server for MongoDB repository</p> <pre><code>$ git clone https://github.com/percona/percona-server-mongodb.git\n</code></pre> </li> <li> <p>Install the dependencies for your operating system. </p> Debian/UbuntuRHEL/CentOS <p>The following command installs the dependencies for Ubuntu 20.04: </p> <pre><code>$ sudo apt install -y python3 python3-dev python3-pip scons gcc g++ cmake curl libssl-dev libldap2-dev libkrb5-dev libcurl4-openssl-dev libsasl2-dev liblz4-dev libpcap-dev libbz2-dev libsnappy-dev zlib1g-dev libzlcore-dev libsasl2-dev liblzma-dev libext2fs-dev e2fslibs-dev bear\n</code></pre> <ol> <li> <p>The following command installs the dependencies for CentOS 7:</p> <pre><code>$ sudo yum -y install centos-release-scl epel-release \n$ sudo yum -y install python3 python3-devel scons gcc gcc-c++ cmake3 openssl-devel cyrus-sasl-devel snappy-devel zlib-devel bzip2-devel libcurl-devel lz4-devel openldap-devel krb5-devel xz-devel e2fsprogs-devel expat-devel devtoolset-8-gcc devtoolset-8-gcc-c++\n</code></pre> </li> <li> <p>Build a specific <code>curl</code> version</p> <ul> <li> <p>Fetch the package archive    </p> <pre><code>$ wget https://curl.se/download/curl-7.66.0.tar.gz\n</code></pre> </li> <li> <p>Unzip the package      </p> <pre><code>$ tar -xvzf curl-7.66.0.tar.gz &amp;&amp; cd curl-7.66.0\n</code></pre> </li> <li> <p>Configure and build the package  </p> <pre><code>$ ./configure\n$ sudo make install\n</code></pre> </li> </ul> </li> </ol> </li> <li> <p>Switch to the Percona Server for MongoDB branch that you are building    and install Python3 modules</p> <pre><code>$ cd percona-server-mongodb &amp;&amp; git checkout v4.4\n$ pip3 install --user -r etc/pip/dev-requirements.txt\n</code></pre> </li> <li> <p>Define Percona Server for MongoDB version (4.4.3 for the time of    writing this document)</p> <pre><code>$ echo '{\"version\": \"4.4.3\"}' &gt; version.json\n</code></pre> </li> </ol>"},{"location":"install/source.html#build-the-aws-software-development-kit-for-c-library","title":"Build the AWS Software Development Kit for C++ library","text":"<ol> <li> <p>Clone the AWS Software Development Kit for C++    repository</p> <pre><code>$ git clone --recurse-submodules https://github.com/aws/aws-sdk-cpp.git\n</code></pre> </li> <li> <p>Create a directory to store the AWS library </p> <pre><code>$ mkdir -p /tmp/lib/aws\n</code></pre> </li> <li> <p>Declare an environment variable <code>AWS_LIBS</code> for this directory </p> <pre><code>$ export AWS_LIBS=/tmp/lib/aws\n</code></pre> </li> <li> <p>Percona Server for MongoDB is built with AWS SDK CPP 1.9.379    version. Switch to this version </p> <pre><code>$ cd aws-sdk-cpp &amp;&amp; git checkout 1.9.379\n</code></pre> </li> <li> <p>It is recommended to keep build files outside the SDK directory.    Create a build directory and navigate to it </p> <p><pre><code>$ mkdir build &amp;&amp; cd build\n</code></pre> 6. Generate build files using <code>cmake</code> </p> Debian/UbuntuRHEL/CentOS 7RHEL/CentOS 8 <pre><code>$ cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY=\"s3;transfer\" -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_INSTALL_PREFIX=\"${AWS_LIBS}\"\n</code></pre> <pre><code>$ cmake3 .. -DCMAKE_C_COMPILER=/opt/rh/devtoolset-8/root/usr/bin/gcc  -DCMAKE_CXX_COMPILER=/opt/rh/devtoolset-8/root/usr/bin/g++ -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY=\"s3;transfer\" -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_INSTALL_PREFIX=\"${AWS_LIBS}\"\n</code></pre> <pre><code>$ cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY=\"s3;transfer\" -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_INSTALL_PREFIX=\"${AWS_LIBS}\"\n</code></pre> </li> <li> <p>Install the SDK </p> <pre><code>$ make install\n</code></pre> </li> </ol>"},{"location":"install/source.html#build-percona-server-for-mongodb","title":"Build Percona Server for MongoDB","text":"<ol> <li> <p>Change directory to <code>percona-server-mongodb</code> </p> <pre><code>$ cd percona-server-mongodb\n</code></pre> </li> <li> <p>Build Percona Server for MongoDB from <code>buildscripts/scons.py</code>.</p> Debian/UbuntuRHEL/CentOS 7RHEL/CentOS 8 <pre><code>$ buildscripts/scons.py -j$(nproc --all) --jlink=2 --disable-warnings-as-errors --ssl --opt=on --use-sasl-client --wiredtiger --audit --inmemory --hotbackup CPPPATH=\"${AWS_LIBS}/include\" LIBPATH=\"${AWS_LIBS}/lib\" install-mongod\n</code></pre> <pre><code>$ python3 buildscripts/scons.py CC=/opt/rh/devtoolset-8/root/usr/bin/gcc CXX=/opt/rh/devtoolset-8/root/usr/bin/g++ -j$(nproc --all) --jlink=2 --install-mode=legacy --disable-warnings-as-errors --ssl --opt=on --use-sasl-client --wiredtiger --audit --inmemory --hotbackup CPPPATH=\"${AWS_LIBS}/include\" LIBPATH=\"${AWS_LIBS}/lib\"  mongod\n</code></pre> <pre><code>$ buildscripts/scons.py -j$(nproc --all) --jlink=2 --install-mode=legacy --disable-warnings-as-errors --ssl --opt=on --use-sasl-client --wiredtiger --audit --inmemory --hotbackup CPPPATH=\"${AWS_LIBS}/include\" LIBPATH=\"${AWS_LIBS}/lib64\" mongod\n</code></pre> </li> </ol> <p>This command builds only the database. Other available targets for the <code>scons</code> command are: </p> <ul> <li><code>mongod</code> </li> <li><code>mongos</code> </li> <li><code>mongo</code> </li> <li><code>core</code> (includes <code>mongod</code>, <code>mongos</code>, <code>mongo</code>) </li> <li><code>all</code> The built binaries are in the <code>percona-server-mongodb</code> directory.</li> </ul>"},{"location":"install/source.html#next-steps","title":"Next steps","text":"<p>Connect to MongoDB </p>"},{"location":"install/source.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/system-requirements.html","title":"System requirements","text":""},{"location":"install/system-requirements.html#x86_64","title":"x86_64","text":"<p>Percona Server for MongoDB has the same system requirements as the MongoDB Community Edition.     </p> <p>Starting in MongoDB 5.0, <code>mongod</code>, <code>mongos</code>, and the legacy <code>mongo</code> shell are supported on x86_64 platforms that must meet these minimum micro-architecture requirements:     </p> <ul> <li> <p>Only Oracle Linux running the Red Hat Compatible Kernel (RHCK) is supported. MongoDB does not support the Unbreakable Enterprise Kernel (UEK).     </p> </li> <li> <p>MongoDB 5.0 and above requires use of the AVX instruction set, available on select Intel and AMD processors. </p> </li> </ul>"},{"location":"install/system-requirements.html#arm64","title":"ARM64","text":"<p>Percona Server for MongoDB requires the ARMv8.2-A or later microarchitecture. </p> <p>Currently, only Docker images are available.</p>"},{"location":"install/system-requirements.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/tarball.html","title":"Installing Percona Server for MongoDB from binary tarball","text":"<p>Find links to the binary tarball under the Generic Linux menu item on the Percona website</p> <p>There are two tarballs available:</p> <ul> <li> <p><code>percona-server-mongodb-4.4.29-28-x86_64.glibc2.17.tar.gz</code> is the general tarball, compatible with any supported operating system except Ubuntu 22.04.</p> </li> <li> <p><code>percona-server-mongodb-4.4.29-28-x86_64.glibc2.35.tar.gz</code> is the tarball for Ubuntu 22.04.</p> </li> </ul>"},{"location":"install/tarball.html#preconditions","title":"Preconditions","text":"<p>The following packages are required for the installation.</p>  On Debian and Ubuntu On Red hat Enterprise Linux and derivatives <ul> <li> <p><code>libcurl4</code></p> </li> <li> <p><code>libsasl2-modules</code></p> </li> <li> <p><code>libsasl2-modules-gssapi-mit</code></p> </li> </ul> <ul> <li> <p><code>libcurl</code></p> </li> <li> <p><code>cyrus-sasl-gssapi</code></p> </li> <li> <p><code>cyrus-sasl-plain</code></p> </li> </ul> <p>Check that they are installed in your operating system. Otherwise install them.</p>"},{"location":"install/tarball.html#procedure","title":"Procedure","text":"<p>The steps below describe the installation on Debian 10 (\u201cbuster\u201d).</p> <ol> <li> <p>Fetch and extract the binary tarball:</p> <pre><code>$ wget https://downloads.percona.com/downloads/percona-server-mongodb-4.4/percona-server-mongodb-4.4.15-15/binary/tarball/percona-server-mongodb-4.4.15-15-x86_64.glibc2.17.tar.gz\n$ tar -xf percona-server-mongodb-4.4.15-15-x86_64.glibc2.17.tar.gz\n</code></pre> </li> <li> <p>Add the location of the binaries to the <code>PATH</code> variable:</p> <pre><code>$ export PATH=~/percona-server-mongodb-4.4.15-15/bin/:$PATH\n</code></pre> </li> <li> <p>Create the default data directory:</p> <pre><code>$ mkdir -p /data/db\n</code></pre> </li> <li> <p>Make sure that you have read and write permissions for the data directory and run mongod.</p> </li> </ol>"},{"location":"install/tarball.html#next-steps","title":"Next steps","text":"<p>Connect to MongoDB </p>"},{"location":"install/tarball.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/uninstall.html","title":"Uninstall Percona Server for MongoDB","text":"<p>To completely remove Percona Server for MongoDB you need to remove all the installed packages, data and configuration files. If you need the data, consider making a backup before uninstalling Percona Server for MongoDB.</p> <p>Follow the instructions, relevant to your operating system:</p>  Uninstall on Debian and Ubuntu Uninstall on Red Hat Enterprise Linux and derivatives <p>You can remove Percona Server for MongoDB packages with one of the following commands:</p> <ul> <li> <p><code>apt remove</code> will only remove the packages and leave the configuration and data files.</p> </li> <li> <p><code>apt purge</code> will remove all the packages with configuration files and data.</p> </li> </ul> <p>Choose which command better suits you depending on your needs.</p> <ol> <li> <p>Stop the <code>mongod</code> server:</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Remove the packages. There are two options.</p>  Keep the configuration and data files Delete configuration and data files <pre><code>$ sudo apt remove percona-server-mongodb*\n</code></pre> <pre><code>$ sudo apt purge percona-server-mongodb*\n</code></pre> </li> </ol> <ol> <li> <p>Stop the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Remove the packages:</p> <pre><code>$ sudo yum remove percona-server-mongodb*\n</code></pre> </li> <li> <p>Remove the data and configuration files:</p> <pre><code>$ sudo rm -rf /var/lib/mongodb\n$ sudo rm -f /etc/mongod.conf\n</code></pre> <p>Warning</p> <p>This will remove all the packages and delete all the data files (databases, tables, logs, etc.). You might want to back up your data before doing this in case you need the data later.</p> </li> </ol>"},{"location":"install/uninstall.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/upgrade-from-42.html","title":"Upgrading from Percona Server for MongoDB 4.2 to 4.4","text":"<p>To upgrade Percona Server for MongoDB to version 4.4, you must be running version 4.2. Upgrades from earlier versions are not supported.</p> <p>Before upgrading your production Percona Server for MongoDB deployments, test all your applications in a testing environment to make sure they are compatible with the new version. For more information, see Compatibility Changes in MongoDB 4.4</p> <p>We recommend to upgrade Percona Server for MongoDB from official Percona repositories using <code>percona-release</code> repository management tool and the corresponding package manager for your system. </p> <p>This document describes this method for the in-place upgrade (where your existing data and configuration files are preserved).</p> <p>Warning</p> <p>Perform a full backup of your data and configuration files before upgrading.</p>  Upgrade on Debian and Ubuntu Upgrade on Red Hat Enterprise Linux and derivatives <ol> <li> <p>Stop the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Enable Percona repository for Percona Server for MongoDB 4.4:</p> <pre><code>$ sudo percona-release enable psmdb-44\n</code></pre> </li> <li> <p>Update the local cache:</p> <pre><code>$ sudo apt update\n</code></pre> </li> <li> <p>Install Percona Server for MongoDB 4.4 packages:</p> <pre><code>$ sudo apt install percona-server-mongodb\n</code></pre> </li> <li> <p>Start the <code>mongod</code> instance:</p> <pre><code>$ sudo systemctl start mongod\n</code></pre> </li> </ol> <p>For more information, see Installing Percona Server for MongoDB on Debian and Ubuntu.</p> <ol> <li> <p>Stop the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Enable Percona repository for Percona Server for MongoDB 4.4:</p> <pre><code>$ sudo percona-release enable psmdb-44\n</code></pre> </li> <li> <p>Install Percona Server for MongoDB 4.4 packages:</p> <pre><code>$ sudo yum install percona-server-mongodb\n</code></pre> </li> <li> <p>Start the <code>mongod</code> instance:</p> <pre><code>$ sudo systemctl start mongod\n</code></pre> </li> </ol> <p>After the upgrade, Percona Server for MongoDB is started with the feature set of 4.2 version. Assuming that your applications are compatible with the new version, enable 4.4 version features. Run the following command against the <code>admin</code> database:</p> <pre><code>&gt; db.adminCommand( { setFeatureCompatibilityVersion: \"4.4\" } )\n</code></pre>"},{"location":"install/upgrade-from-42.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/upgrade-from-mongodb.html","title":"Upgrade from MongoDB Community Edition to Percona Server for MongoDB","text":"<p>This document provides instructions for an in-place upgrade from MongoDB Community Edition to Percona Server for MongoDB.</p> <p>An in-place upgrade is done by keeping the existing data in the server and replacing the MongoDB binaries. Afterwards, you restart the <code>mongod</code> service with the same <code>dbpath</code> data directory.</p> <p>An in-place upgrade is suitable for most environments except the ones that use ephemeral storage and/or host addresses.</p>"},{"location":"install/upgrade-from-mongodb.html#procedure","title":"Procedure","text":"<p>Note</p> <p>MongoDB creates a user that belongs to two groups, which is a potential security risk. This is fixed in Percona Server for MongoDB: the user is included only in the <code>mongod</code> group. To avoid problems with current MongoDB setups, existing user group membership is not changed when you migrate to Percona Server for MongoDB.  Instead, a new <code>mongod</code> user is created during installation, and it belongs to the <code>mongod</code> group.</p> <p>This procedure describes an in-place upgrade of a <code>mongod</code> instance. If you are using data at rest encryption, refer to the Upgrading to Percona Server for MongoDB with data at rest encryption enabled section.</p> <p>Important</p> <p>Before starting the upgrade, we recommend to perform a full backup of your data.</p>  Upgrade on Debian and Ubuntu Upgrade on Red Hat Enterprise Linux and derivatives <ol> <li> <p>Save the current configuration file as the backup:</p> <pre><code>$ sudo mv /etc/mongod.conf /etc/mongod.conf.bkp\n</code></pre> </li> <li> <p>Stop the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Check for installed packages:</p> <pre><code>$ sudo dpkg -l | grep mongod\n</code></pre> <p>??? example \u201cSample output\u201d</p> <pre><code> ```{.text .no-copy}\n ii  mongodb-org                      4.4.15                       amd64        MongoDB open source document-oriented database system (metapackage)\n ii  mongodb-org-database             4.4.15                       amd64        MongoDB open source document-oriented database system (metapackage)\n ii  mongodb-org-database-tools-extra 4.4.15                       amd64        Extra MongoDB database tools\n ii  mongodb-org-mongos               4.4.15                       amd64        MongoDB sharded cluster query router\n ii  mongodb-org-server               4.4.15                       amd64        MongoDB database server\n ii  mongodb-org-shell                4.4.15                       amd64        MongoDB shell client\n ii  mongodb-org-tools                4.4.15                       amd64        MongoDB tools\n ```\n</code></pre> </li> <li> <p>Remove the installed packages:</p> <pre><code>$ sudo apt remove \\\n  mongodb-org \\\n  mongodb-org-mongos \\\n  mongodb-org-server \\\n  mongodb-org-shell \\\n  mongodb-org-tools\n</code></pre> </li> <li> <p>Install Percona Server for MongoDB</p> </li> <li> <p>Verify that the configuration file includes correct options:</p> <ul> <li>Copy the required configuration options like custom dbPath/system log path, additional security/replication or sharding options from the backup configuration file (<code>/etc/mongod.conf</code>) to the current one <code>/etc/mongodb.conf</code>. </li> <li> <p>Make sure that the <code>mongod</code> user has access to your custom paths. If not, provide it as follows:</p> <pre><code>$ sudo chown -R mongod:mongod &lt;custom-dbPath&gt;\n$ sudo chown -R mongod:mongod &lt;custom-systemLog.path&gt;\n</code></pre> </li> <li> <p>Make sure the configuration file includes the following configuration:</p> <pre><code>processManagement:\n   fork: true\n   pidFilePath: /var/run/mongod.pid\n</code></pre> <p>Troubleshooting tip: The <code>pidFilePath</code> setting in <code>mongod.conf</code> must match the <code>PIDFile</code> option in the <code>systemd mongod</code> service unit. Otherwise, the service will kill the <code>mongod</code> process after a timeout.</p> </li> </ul> </li> <li> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre> </li> </ol> <ol> <li> <p>Stop the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> </li> <li> <p>Check for installed packages:</p> <pre><code>$ sudo rpm -qa | grep mongo\n</code></pre> <p>??? example \u201cSample output\u201d</p> <pre><code> ```{.text .no-copy}\n mongodb-org-shell-4.4.15-1.el8.x86_64\n mongodb-org-database-4.4.15-1.el8.x86_64\n mongodb-org-4.4.15-1.el8.x86_64\n mongodb-database-tools-100.4.1-1.x86_64\n mongodb-org-server-4.4.15-1.el8.x86_64\n mongodb-org-mongos-4.4.15-1.el8.x86_64\n mongodb-org-tools-4.4.15-1.el8.x86_64\n ```\n</code></pre> </li> <li> <p>Remove the installed packages:</p> <pre><code>$ sudo yum remove \\\nmongodb-org-shell-4.4.15-1.el8.x86_64 \\\nmongodb-org-database-4.4.15-1.el8.x86_64 \\\nmongodb-org-4.4.15-1.el8.x86_64 \\\nmongodb-database-tools-100.4.1-1.x86_64 \\\nmongodb-org-server-4.4.15-1.el8.x86_64 \\\nmongodb-org-mongos-4.4.15-1.el8.x86_64 \\\nmongodb-org-tools-4.4.15-1.el8.x86_64\n</code></pre> </li> <li> <p>Install Percona Server for MongoDB</p> </li> <li> <p>Verify that the configuration file includes correct options:</p> <ul> <li>When you remove old packages, your existing configuration file is saved as <code>/etc/mongod.conf.rpmsave</code>. Copy the required configuration options like custom dbPath/system log path, additional security/replication or sharding options from the backup configuration file (<code>/etc/mongod.conf.rpmsave</code>) to the current one <code>/etc/mongodb.conf</code>.</li> <li> <p>Make sure that the <code>mongod</code> user has access to your custom paths. If not, provide it as follows:</p> <pre><code>$ sudo chown -R mongod:mongod &lt;custom-dbPath&gt;\n$ sudo chown -R mongod:mongod &lt;custom-systemLog.path&gt;\n</code></pre> </li> <li> <p>Make sure the configuration file includes the following configuration:</p> <pre><code>processManagement:\n   fork: true\n   pidFilePath: /var/run/mongod.pid\n</code></pre> <p>Troubleshooting tip: The <code>pidFilePath</code> setting in <code>mongod.conf</code> must match the <code>PIDFile</code> option in the <code>systemd mongod</code> service unit. Otherwise, the service will kill the <code>mongod</code> process after a timeout.</p> </li> </ul> </li> <li> <p>Restart the <code>mongod</code> service:</p> <pre><code>$ sudo systemctl restart mongod\n</code></pre> </li> </ol> <p>To upgrade a replica set or a sharded cluster, use the rolling restart method. It allows you to perform the upgrade with minimum downtime. You upgrade the nodes one by one, while the whole cluster / replica set remains operational.</p> <p>See also</p> <p>MongoDB Documentation:</p> <ul> <li>Upgrade a Replica Set</li> <li>Upgrade a Sharded Cluster</li> </ul>"},{"location":"install/upgrade-from-mongodb.html#upgrading-to-percona-server-for-mongodb-with-data-at-rest-encryption-enabled","title":"Upgrading to Percona Server for MongoDB with data at rest encryption enabled","text":"<p>Steps to upgrade from MongoDB 4.4 Community Edition with data encryption enabled to Percona Server for MongoDB are different. <code>mongod</code> requires an empty <code>dbPath</code> data directory because it cannot encrypt data files in place. It must receive data from other replica set members during the initial sync. Please refer to the Switching storage engines for more information on migration of encrypted data. Contact us for working at the detailed migration steps, if further assistance is needed.</p>"},{"location":"install/upgrade-from-mongodb.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/yum.html","title":"Install Percona Server for MongoDB on Red Hat Enterprise Linux and derivatives","text":"<p>This document describes how to install Percona Server for MongoDB on RPM-based distributions such as Red Hat Enterprise Linux and compatible derivatives.</p> <p>We gather Telemetry data to understand the use of the software and improve our products.</p> Package contents Package Contains <code>percona-server-mongodb</code> The <code>mongo</code> shell, import/export tools, other client utilities, server software, default configuration, and <code>init.d</code> scripts. <code>percona-server-mongodb-server</code> The mongod<code>server, default configuration files, and</code>init.d` scripts <code>percona-server-mongodb-shell</code> The <code>mongo</code> shell <code>percona-server-mongodb-mongos</code> The <code>mongos</code> sharded cluster query router <code>percona-server-mongodb-tools</code> Mongo tools for high-performance MongoDB fork from Percona <code>percona-server-mongodb-dbg</code> Debug symbols for the server"},{"location":"install/yum.html#procedure","title":"Procedure","text":"<p>Before you start, check the system requirements.</p>"},{"location":"install/yum.html#configure-percona-repository","title":"Configure Percona repository","text":"<p>To install from Percona repositories, first you need to enable the required repository using the <code>percona-release</code> repository management tool.</p> <ol> <li> <p>Install percona-release:</p> <pre><code>$ sudo yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm\n</code></pre> </li> <li> <p>Enable the repository: </p> <pre><code>$ sudo percona-release enable psmdb-44 release\n</code></pre> </li> </ol>"},{"location":"install/yum.html#install-percona-server-for-mongodb-packages","title":"Install Percona Server for MongoDB packages","text":"Install the latest version Install a specific version <p>To install the latest version of Percona Server for MongoDB, use the following command:</p> <pre><code>$ sudo yum install percona-server-mongodb\n</code></pre> <p>To install a specific version of Percona Server for MongoDB, do the following:</p> <ol> <li> <p>List available versions:</p> <pre><code>$ sudo yum list percona-server-mongodb --showduplicates\n</code></pre> Sample output <pre><code>    Available Packages\npercona-server-mongodb.x86_64  4.4.10-11.el8  psmdb-44-release-x86_64\npercona-server-mongodb.x86_64  4.4.12-12.el8  psmdb-44-release-x86_64\npercona-server-mongodb.x86_64  4.4.13-13.el8  psmdb-44-release-x86_64\npercona-server-mongodb.x86_64  4.4.14-14.el8  psmdb-44-release-x86_64\npercona-server-mongodb.x86_64  4.4.15-15.el8  psmdb-44-release-x86_64\npercona-server-mongodb.x86_64  4.4.16-16.el8  psmdb-44-release-x86_64\npercona-server-mongodb.x86_64  4.4.17-17.el8  psmdb-44-release-x86_64\n</code></pre> </li> <li> <p>Install a specific version packages. For example, to install Percona Server for MongoDB 4.4.15-15, run the following command:</p> <pre><code>$ sudo yum install percona-server-mongodb-4.4.15-15.el8\n</code></pre> </li> </ol> <p>By default, Percona Server for MongoDB stores data files in /var/lib/mongodb/ and configuration parameters in /etc/mongod.conf.</p>"},{"location":"install/yum.html#run-percona-server-for-mongodb","title":"Run Percona Server for MongoDB","text":"<p>Note</p> <p>If you use SELinux in enforcing mode, you must customize your SELinux user policies to allow access to certain <code>/sys</code> and <code>/proc</code> files for OS-level statistics. Also, you must customize directory and port access policies if you are using non-default locations.</p> <p>Please refer to Configure SELinux section of MongoDB Documentation for policy configuration guidelines.</p> <p>Start the service</p> <p>Percona Server for MongoDB is not started automatically after installation. Start it manually using the following command:</p> <pre><code>$ sudo systemctl start mongod\n</code></pre> <p>Confirm that service is running</p> <p>Check the service status using the following command: <code>service mongod status</code></p> <pre><code>$ sudo systemctl status mongod\n</code></pre> <p>Stop the service</p> <p>Stop the service using the following command: <code>service mongod stop</code></p> <pre><code>$ sudo systemctl stop mongod\n</code></pre> <p>Restart the service</p> <p>Restart the service using the following command: <code>service mongod restart</code></p> <pre><code>$ sudo systemctl restart mongod\n</code></pre>"},{"location":"install/yum.html#run-after-reboot","title":"Run after reboot","text":"<p>The <code>mongod</code> service is not automatically started after you reboot the system.</p> <p>For RHEL or CentOS versions 5 and 6, you can use the <code>chkconfig</code> utility to enable auto-start as follows:</p> <pre><code>$ sudo chkconfig --add mongod\n</code></pre> <p>For RHEL or CentOS version 7, you can use the <code>systemctl</code> utility:</p> <pre><code>$ sudo systemctl enable mongod\n</code></pre> <p>Congratulations! Your Percona Server for MongoDB is up and running. </p>"},{"location":"install/yum.html#next-steps","title":"Next steps","text":"<p>Connect to MongoDB </p> <ol> <li> <p>We support only the current stable RHEL 6 and CentOS 6 releases, because there is no official (i.e. RedHat provided) method to support or download the latest OpenSSL on RHEL and CentOS versions prior to 6.5. Similarly, and also as a result thereof, there is no official Percona way to support the latest Percona Server builds on RHEL and CentOS versions prior to 6.5. Additionally, many users will need to upgrade to OpenSSL 1.0.1g or later (due to the Heartbleed vulnerability), and this OpenSSL version is not available for download from any official RHEL and CentOS repositories for versions 6.4 and prior. For any officially unsupported system, src.rpm packages can be used to rebuild Percona Server for any environment. Please contact our support service if you require further information on this.\u00a0\u21a9</p> </li> </ol>"},{"location":"install/yum.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/index.html","title":"Percona Server for MongoDB 4.4 release notes","text":"<ul> <li> <p>Percona Server for MongoDB 4.4.29-28 (2024-04-02)</p> </li> <li> <p>Percona Server for MongoDB 4.4.28-27 (2024-02-07)</p> </li> <li> <p>Percona Server for MongoDB 4.4.27-26 (2024-01-17)</p> </li> <li> <p>Percona Server for MongoDB 4.4.26-25 (2023-12-18)</p> </li> <li> <p>Percona Server for MongoDB 4.4.25-24 (2023-10-16)</p> </li> <li> <p>Percona Server for MongoDB 4.4.24-23 (2023-09-11)</p> </li> <li> <p>Percona Server for MongoDB 4.4.23-22 (2023-08-14)</p> </li> <li> <p>Percona Server for MongoDB 4.4.22-21 (2023-06-06)</p> </li> <li> <p>Percona Server for MongoDB 4.4.21-20 (2023-05-09)</p> </li> <li> <p>Percona Server for MongoDB 4.4.19-19 (2023-03-20)</p> </li> <li> <p>Percona Server for MongoDB 4.4.18-18 (2022-12-19)</p> </li> <li> <p>Percona Server for MongoDB 4.4.17-17 (2022-11-10)</p> </li> <li> <p>Percona Server for MongoDB 4.4.16-16 (2022-08-30)</p> </li> <li> <p>Percona Server for MongoDB 4.4.15-15 (2022-07-19)</p> </li> <li> <p>Percona Server for MongoDB 4.4.14-14 (2022-05-25)</p> </li> <li> <p>Percona Server for MongoDB 4.4.13-13 (2022-03-23)</p> </li> <li> <p>Percona Server for MongoDB 4.4.12-12 (2022-02-07)</p> </li> <li> <p>Percona Server for MongoDB 4.4.10-11 (2021-11-10)</p> </li> <li> <p>Percona Server for MongoDB 4.4.9-10 (2021-10-07)</p> </li> <li> <p>Percona Server for MongoDB 4.4.8-9 (2021-08-16)</p> </li> <li> <p>Percona Server for MongoDB 4.4.6-8 (2021-06-02)</p> </li> <li> <p>Percona Server for MongoDB 4.4.5-7 (2021-04-19)</p> </li> <li> <p>Percona Server for MongoDB 4.4.4-6 (2021-02-25)</p> </li> <li> <p>Percona Server for MongoDB 4.4.3-5 (2021-01-27)</p> </li> <li> <p>Percona Server for MongoDB 4.4.2-4 (2020-12-01)</p> </li> <li> <p>Percona Server for MongoDB 4.4.1-3 (2020-10-09)</p> </li> <li> <p>Percona Server for MongoDB 4.4.1-2 (2020-09-24)</p> </li> <li> <p>Percona Server for MongoDB 4.4.0-1 (2020-08-26)</p> </li> </ul>"},{"location":"release_notes/index.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.0-1.html","title":"Percona Server for MongoDB 4.4.0-1 (2020-08-26)","text":"Release date August 26, 2020 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.0-1 is an enhanced, source-available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.0 Community Edition. It supports MongoDB 4.4.0 protocols and drivers.</p> <p>This release includes all features of MongoDB 4.4.0 Community Edition and provides Enterprise-level enhancements for free.</p> <p>Percona Server for MongoDB requires no changes to MongoDB applications or code and is available for download from Percona website.</p>"},{"location":"release_notes/4.4.0-1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.1-2.html","title":"Percona Server for MongoDB 4.4.1-2 (2020-09-24)","text":"Release date September 24, 2020 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.1-2 is an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.1 Community Edition. It supports MongoDB 4.4.1 protocols and drivers.</p>"},{"location":"release_notes/4.4.1-2.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PSMDB-707: LDAP authentication randomly fails with the \u201cBad parameter to an ldap routine\u201d message in the log</p> </li> <li> <p>PSMDB-677: <code>mongosh</code> cannot authenticate LDAP user</p> </li> <li> <p>PSMDB-674: Provide binary tarball with shared libs and glibc suffix</p> </li> </ul>"},{"location":"release_notes/4.4.1-2.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.1-3.html","title":"Percona Server for MongoDB 4.4.1-3 (2020-10-09)","text":"Release date October 9, 2020 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.1-3 is an enhanced, source-available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.1 Community Edition. It supports MongoDB 4.4.1 protocols and drivers.</p> <p>This release fixes security vulnerability CVE-2020-26542.</p>"},{"location":"release_notes/4.4.1-3.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.10-11.html","title":"Percona Server for MongoDB 4.4.10-11 (2021-11-10)","text":"Release date November 10, 2021 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.10-11 is an enhanced, source-available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.10 Community Edition.</p> <p>It is rebased on MongoDB 4.4.10 Community Edition and supports MongoDB 4.4.10 protocols and drivers.</p>"},{"location":"release_notes/4.4.10-11.html#release-highlights","title":"Release Highlights","text":"<p>The changes and bug fixes introduced by MongoDB include the following:</p> <ul> <li>Fixed delays in establishing egress connections on <code>mongos</code> due to delayed responses from <code>libcrypto.so</code></li> </ul> <p>Find the full list of changes in the MongoDB 4.4.10 Community Edition release notes.</p>"},{"location":"release_notes/4.4.10-11.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.12-12.html","title":"Percona Server for MongoDB 4.4.12-12 (2022-02-07)","text":"Release date February 7, 2022 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.12-12 is an enhanced, source-available and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB Community Edition. It is based on MongoDB 4.4.11 and 4.4.12 and supports MongoDB 4.4.11 - 4.4.12 protocols and drivers.</p> <p>Warning</p> <p>Inconsistent data is observed after the upgrade from MongoDB 4.4.3 and 4.4.4 to versions 4.4.8+ and 5.0.2+. This issue is fixed upstream in versions 4.4.11 and 5.0.6. Percona Server for MongoDB also includes the fix in versions 4.4.12-12 and 5.0.6-5</p> <p>See the upgrade recommendations below:</p> <ul> <li> <p>Clusters on versions 4.4.0 and 4.4.1 are safe to upgrade to 4.4.8+ or 5.0.2+ but should upgrade to recommended versions 4.4.11+ or 5.0.5+</p> </li> <li> <p>Clusters on versions 4.4.2, 4.4.3, or 4.4.4 should downgrade to 4.4.1 and then upgrade to versions  4.4.11+ or 5.0.5+.</p> </li> <li> <p>Clusters running versions 4.4.5 - 4.4.7 can and should upgrade to versions 4.4.11+ or 5.0.5+.</p> </li> </ul> <p>Note that clusters running versions 4.4.2 - 4.4.8 are affected by the bug WT-7995. See WT-7995 for specific explanation and instructions on running the validate command to check for data inconsistencies. These data inconsistencies can lead to data loss if not identified and repaired at this point between versions 4.4.8 and 4.4.9.</p> <p>If the validate  command output reports any failures, resync the impacted node from an unaffected node.   The validate command must be run against all collections in the database. This process can be resource intensive and can negatively impact performance.</p>"},{"location":"release_notes/4.4.12-12.html#release-highlights","title":"Release Highlights","text":"<p>The bug fixes and improvements, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li> <p>WT-8395 - Fixed an issue with inconsistent data observed during the direct upgrade from from 4.4.3 and 4.4.4 to 4.4.8+ and 5.0.2+. Data inconsistency was caused by the incorrect checkpoint metadata to sometimes be recorded by MongoDB versions 4.4.3 and 4.4.4. WiredTiger used this metadata during node startup that could lead to data corruption and could cause the DuplicateKey error. The fix requires the upgrade to versions 4.4.11+ or 5.0.5+.</p> </li> <li> <p>SERVER-61930 - Defined a timeout for a health check process and throw an error when the process fails to complete within a timeout. This prevents health check to hang.</p> </li> <li> <p>SERVER-61637 - Changed the <code>rangeDeleterBatchSize</code> value to unlimited to avoid the balancer starvation during batched deletes.</p> </li> <li> <p>SERVER-59362 - Added the ability to transition through the valid states of the fault manager, and the interface to observer and log its state transitions.</p> </li> <li> <p>SERVER-62147 - Fixed broken OP_QUERY exhaust cursor implementation</p> </li> <li> <p>SERVER-62065 - Added the <code>repairShardedCollectionChunksHistory</code> command to restore <code>history</code> fields for some chunks. This aims to fix broken snapshot reads and distributed transactions.</p> </li> </ul> <p>Find the full list of changes in the MongoDB 4.4.11 Community Edition and MongoDB 4.4.12 Community Edition release notes</p>"},{"location":"release_notes/4.4.12-12.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PSMDB-756: Fixed an issue with unmet dependencies for installing MongoDB on Debian (Thanks to Stefan Schlesi for reporting this issue)</p> </li> <li> <p>PSMDB-950: Fixed LDAP authentication using mongo CLI for Percona Server for MongoDB installed from a tarball.</p> </li> </ul>"},{"location":"release_notes/4.4.12-12.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.13-13.html","title":"Percona Server for MongoDB 4.4.13-13 (2022-03-23)","text":"Release date March 23, 2022 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.13-13 is an enhanced, source-available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.13 Community Edition. It supports MongoDB 4.4.13 protocols and drivers.</p> <p>Warning</p> <p>Inconsistent data is observed after the upgrade from MongoDB 4.4.3 and 4.4.4 to versions 4.4.8+ and 5.0.2+. This issue is fixed upstream in versions 4.4.11+ and 5.0.6+. Percona Server for MongoDB also includes the fix starting from versions 4.4.12-12 and 5.0.6-5.</p> <p>See the upgrade recommendations below:</p> <ul> <li> <p>Clusters on versions 4.4.0 and 4.4.1 are safe to upgrade to 4.4.8+ or 5.0.2+ but should upgrade to recommended versions 4.4.11+ or 5.0.5+.</p> </li> <li> <p>Clusters on versions 4.4.2, 4.4.3, or 4.4.4 should downgrade to 4.4.1 and then upgrade to versions  4.4.11+ or 5.0.5+.</p> </li> <li> <p>Clusters running versions 4.4.5 - 4.4.7 can and should upgrade to versions 4.4.11+ or 5.0.5+.</p> </li> </ul> <p>Note that clusters running versions 4.4.2 - 4.4.8 are affected by the bug WT-7995. See WT-7995 for specific explanation and instructions on running the validate command to check for data inconsistencies. These data inconsistencies can lead to data loss if not identified and repaired at this point between versions 4.4.8 and 4.4.9.</p> <p>If the validate  command output reports any failures, resync the impacted node from an unaffected node.   The validate command must be run against all collections in the database. This process can be resource intensive and can negatively impact performance.</p>"},{"location":"release_notes/4.4.13-13.html#release-highlights","title":"Release Highlights","text":"<p>Percona Server for MongoDB now supports Keys Management Interoperability Protocol (KMIP) so that users can store encryption keys in their favorite KMIP-compatible key manager to set up encryption at rest. This is a tech preview feature.</p> <p>The list of bug fixes introduced by MongoDB and included in Percona Server for MongoDB is the following:</p> <ul> <li> <p>SERVER-63203 - Fixed the issue where having a large number of split points causes the chunk splitter to not function correctly and huge chunks would not be split without manual intervention. This can be caused when having small shard key ranges and a very high number of documents and where more than 8192 split points would be needed.</p> </li> <li> <p>SERVER-62065 - Added the <code>repairShardedCollectionChunksHistory</code> command to restore history fields for some chunks. This aims to fix broken snapshot reads and distributed transactions.</p> </li> <li> <p>SERVER-59754 - Fixed incorrect logging of queryHash/planCacheKey for operations that share the same <code>$lookup</code> shape</p> </li> <li> <p>SERVER-55483 - Added a new startup parameter that skips verifying the table logging settings on restarting as a replica set node from the standalone mode during the restore. This speeds up the restore process.</p> </li> </ul> <p>Find the full list of changes in the MongoDB 4.4.13 Community Edition Release notes.</p>"},{"location":"release_notes/4.4.13-13.html#new-features","title":"New Features","text":"<ul> <li>PSMDB-971: Added support for KMIP encryption. Now users can store encryption keys in their favorite KMIP-compatible key manager to set up encryption at rest.</li> </ul>"},{"location":"release_notes/4.4.13-13.html#bug-fixes","title":"Bug Fixes","text":"<ul> <li> <p>PSMDB-1010: Fixed the parameters order in the <code>LOGV2_DEBUG</code> statement for LDAP logging.</p> </li> <li> <p>PSMDB-957: Fixed server crash caused by LDAP misconfiguration. Now the server logs an error message and exits.</p> </li> </ul>"},{"location":"release_notes/4.4.13-13.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.14-14.html","title":"Percona Server for MongoDB 4.4.14-14 (2022-05-25)","text":"Release date May 25, 2022 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.14-14 is an enhanced, source-available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.14 Community Edition. It supports MongoDB 4.4.14 protocols and drivers.</p>"},{"location":"release_notes/4.4.14-14.html#release-highlights","title":"Release Highlights","text":"<p>Percona Server for MongoDB now supports the master key rotation for data encrypted using the  Keys Management Interoperability Protocol (KMIP) protocol (tech preview feature). This improvement allows users to comply with regulatory standards for data security.</p> <p>Other improvements and bug fixes introduced by MongoDB and included in Percona Server for MongoDB are the following:</p> <ul> <li>WT-8924 - Fixed a bug that causes replication to stall on secondary replica set members in a sharded cluster handling cross-shard transactions. It is caused by WiredTger to erroneously return a write conflict when deciding if an update to a record is allowed. If MongoDB decides to retry the operation that caused the conflict in WiredTiger, it will enter an indefinite retry loop, and oplog application will stall on secondary nodes.</li> </ul> <p>If this bug is hit, the secondary nodes will experience indefinite growth in replication lag. Restart the secondary nodes to resume replication.</p> <p>This bug affects MongoDB 4.4.10 through 4.4.13 and 5.0.4 to 5.0.7.</p> <p>Update to the latest version to avoid the secondary replication stall and lag issues.</p> <ul> <li> <p>SERVER-60412 - Check if the host has <code>cgroups</code> v2 enabled and read the memory limits according to that.</p> </li> <li> <p>SERVER-62229 - Fix invariant by allowing applying index build abort entry when in <code>recoverFromOplogAsStandalone</code> mode</p> </li> <li> <p>SERVER-55429 - Fixed the issue with blocked migrations by adding a timeout to migrations when waiting for range deletions on intersecting ranges</p> </li> </ul> <p>Find the full list of changes in the MongoDB 4.4.14 Community Edition Release notes.</p>"},{"location":"release_notes/4.4.14-14.html#improvements","title":"Improvements","text":"<ul> <li> <p>PSMDB-1011: Add KMIP master key rotation</p> </li> <li> <p>PSMDB-1043: The <code>kmipClientCertificateFile</code> option now includes both the client private key and public certificate</p> </li> <li> <p>PSMDB-1044: Make the <code>kmipPort</code> option not mandatory and assign the default value</p> </li> </ul>"},{"location":"release_notes/4.4.14-14.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PSMDB-979: Rotate audit logs in the mode as defined in the configuration.</p> </li> <li> <p>PSMDB-1030: Fix descriptions and mutual dependencies of KMIP related options for <code>mongod</code> and <code>perconadecrypt</code></p> </li> </ul>"},{"location":"release_notes/4.4.14-14.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.15-15.html","title":"Percona Server for MongoDB 4.4.15-15 (2022-07-19)","text":"Release date July 19, 2022 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.15-15 is an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.15 Community Edition. It supports MongoDB 4.4.15 protocols and drivers.</p>"},{"location":"release_notes/4.4.15-15.html#release-highlights","title":"Release Highlights","text":"<ul> <li> <p>Support of multiple KMIP servers adds failover to your data-at-rest encryption setup.</p> </li> <li> <p>Allow users to set KMIP client certificate password through a flag to simplify the migration from MongoDB Enterprise to Percona Server for MongoDB.</p> </li> </ul> <p>Other improvements and bug fixes introduced by MongoDB and included in Percona Server for MongoDB are the following:</p> <ul> <li> <p>SERVER-66433 - Backported the check for user errors in case deadline on the migration destination manager is hit while waiting for a range to be cleared up. This prevents the balancer from getting blocked.</p> </li> <li> <p>SERVER-65821 - Fixed the deadlock situation in cross shard transactions that could occur when the FCV (Feature Compatibility Version) was set after the \u201cprepared\u201d state of the transactions. That ended up with both the the setFCV thread and the TransactionCoordinator hung.</p> </li> <li> <p>SERVER-65131 - This is a v6.0 backport fix to v4.4 that disables opportunistic read targeting (except for specified hedged reads) in order to prevent possible performance problems associated with uneven read distribution across the secondaries.</p> </li> <li> <p>SERVER-54900 - Fixed an issue where competing/blocking network calls to the sync source could prevent selecting a new sync-source. This is resolved by canceling the ASIO session when SSL handshake times out.</p> </li> </ul> <p>Find the full list of changes in the MongoDB 4.4.15 Community Edition Release notes.</p>"},{"location":"release_notes/4.4.15-15.html#supported-versions","title":"Supported versions","text":"<p>Percona Server for MongoDB is now available on Ubuntu 22.04 (Jammy Jellyfish).</p>"},{"location":"release_notes/4.4.15-15.html#improvements","title":"Improvements","text":"<ul> <li> <p>PSMDB-1045: Add support for several KMIP servers</p> </li> <li> <p>PSMDB-1054: Add the ability to specify the password for the KMIP client keys and certificates to simplify migration from MongoDB Enterprise.</p> </li> </ul>"},{"location":"release_notes/4.4.15-15.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.16-16.html","title":"Percona Server for MongoDB 4.4.16-16 (2022-08-30)","text":"Release date August 30, 2022 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.16-16 is an enhanced, source-available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.16 Community Edition. It supports MongoDB 4.4.16 protocols and drivers.</p> <p>Warning</p> <p>Take caution when upgrading from earlier versions of v4.4.x to later versions of 4.4 or on to v5.0. See SERVER-68511 for more details.</p>"},{"location":"release_notes/4.4.16-16.html#release-highlights","title":"Release Highlights","text":"<ul> <li> <p>SERVER-67302 - Fixed the server crash with the CLOCK_REALTIME set to forward by making the linearizable reads robust to primary catch-up and simultaneous stepdown.</p> </li> <li> <p>SERVER-61321, SERVER-60607 - Improved handling of large/NaN (Not a Number) values for text index and geo index version.</p> </li> <li> <p>SERVER-66418 -  Fixed the issue with bad projection created during dependency analysis due to string order assumption. It resulted in the <code>PathCollision</code> error. The issue is fixed by improving dependency analysis for projections by folding dependencies into ancestor dependencies where possible.</p> </li> <li> <p>WT-9096 - Fixed the wrong key/value returning during search near when the key doesn\u2019t exist.</p> </li> <li> <p>SERVER-63243 - This bug fix adjusts the functioning of the range-deleter to prevent the balancer from getting blocked, hung, or ranges being scheduled behind other ranges.</p> </li> <li> <p>SERVER-67492 - Failed chunk migrations can lead to recipient shard having different config.transactions records between primaries and secondaries - inconsistent data.</p> </li> <li> <p>SERVER-60958 - This fix avoids server hang in chunk migration when a step-down occurs.</p> </li> </ul> <p>Find the full list of changes in the MongoDB 4.4.16 Community Edition release notes.</p>"},{"location":"release_notes/4.4.16-16.html#improvements","title":"Improvements","text":"<ul> <li>PSMDB-1046: Make the <code>kmipKeyIdentifier</code> option not mandatory</li> </ul> <p>Note</p> <p>If you have configured data at rest encryption using the KMIP server and wish to upgrade Percona Server for MongoDB, go through the encrypting existing data steps during the upgrade as follows:</p> <ol> <li> <p>Prepare the server</p> </li> <li> <p>Upgrade Percona Server for MongoDB</p> </li> <li> <p>Enable encryption and initiate the data synchronization.</p> </li> </ol>"},{"location":"release_notes/4.4.16-16.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PSMDB-1119: Fixed the issue with backup cursor not opening if data-at-rest encryption is enabled</li> </ul>"},{"location":"release_notes/4.4.16-16.html#packaging-notes","title":"Packaging Notes","text":"<p>Debian 9 (\u201cStretch\u201d) is no longer supported.</p>"},{"location":"release_notes/4.4.16-16.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.17-17.html","title":"Percona Server for MongoDB 4.4.17-17 (2022-11-10)","text":"Release date November 10, 2022 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.17-17 is an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.17 Community Edition. It supports MongoDB 4.4.17 protocols and drivers.</p>"},{"location":"release_notes/4.4.17-17.html#release-highlights","title":"Release Highlights","text":"<ul> <li> <p>Data-at-rest encryption using the Key Management Interoperability Protocol (KMIP) is generally available enabling you to use it in your production environment</p> </li> <li> <p>$backupCursor and $backupCursorExtend aggregation stages functionality is generally available, enabling your application developers to use it for building custom backup solutions.</p> </li> </ul> <p>NOTE: Percona provides Percona Backup for MongoDB - the open source tool for consistent backups and restores in MongoDB sharded clusters.</p> <ul> <li>Fixed security vulnerability CVE-2022-3602 for Percona Server for MongoDB 4.4.15-15 and higher installed from tarballs on Ubuntu 22.04.</li> </ul> <p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li> <p>SERVER-68925 - Detect and resolve table logging inconsistencies for WiredTiger tables at startup</p> </li> <li> <p>SERVER-56127 - Fixed retryable writes on update and delete commands to not execute more than once if chunk is migrated and shard key pattern uses nested fields</p> </li> <li> <p>SERVER-64142 - Verify that any unique indexes are prefixed by the new shard key pattern</p> </li> <li> <p>SERVER-65382 - Prevent the use of <code>clientReadable</code> function in <code>AutoSplitVector</code> when reordering shard key fields</p> </li> <li> <p>WT-9870 - Fixed the global time window state before performing the rollback to stable operation by updating the pinned timestamp as part of the transaction setup.</p> </li> </ul> <p>Find the full list of changes in the MongoDB 4.4.17 Community Edition release notes</p>"},{"location":"release_notes/4.4.17-17.html#new-features","title":"New Features","text":"<ul> <li>PSMDB-776: Align Docker container with upstream by adding missing <code>mongodb-tools</code> utilities (Thanks to Denys Holius for reporting this issue)</li> </ul>"},{"location":"release_notes/4.4.17-17.html#improvements","title":"Improvements","text":"<ul> <li>PSMDB-1116: Use proper exit code and logging severity for successful master key rotation</li> </ul>"},{"location":"release_notes/4.4.17-17.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PSMDB-1172: Fixed CVE-2022-3602 by updating libssl for Ubuntu 22.04 tarball</p> </li> <li> <p>PSMDB-1134: Prevent the server crash by ensuring the backup cursor is closed before the server shutdown</p> </li> <li> <p>PSMDB-1130: Improve handling of the missing encryption key during KMIP key rotation</p> </li> <li> <p>PSMDB-1129: Prevent Percona Server for MongoDB from starting if the configured encryption key doesn\u2019t match the one used for data encryption</p> </li> <li> <p>PSMDB-1082: Improve error handling for Percona Server for MongoDB when the wrong encryption key is used</p> </li> </ul>"},{"location":"release_notes/4.4.17-17.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.18-18.html","title":"Percona Server for MongoDB 4.4.18-18 (2022-12-19)","text":"Release date December 19, 2022 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.18-18 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.18 Community Edition enhanced with enterprise-grade features.  It supports MongoDB 4.4.18 protocols and drivers.</p>"},{"location":"release_notes/4.4.18-18.html#release-highlights","title":"Release Highlights","text":"<p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-66289 - Fixed the issue with how the server handles batches of writes when running $out with secondary read preference by updating write size estimation logic in <code>DocumentSourceWriter</code></li> <li>SERVER-61185 - Improved the performance of inserts into unique indexes</li> <li>SERVER-68115 - Prevented dropping empty path component from elemMatch path during index selection</li> <li>SERVER-50454 - Avoided sending the \u201ckeyValue\u201d field to drivers on duplicate key error</li> <li>SERVER-69443 - Disallowed the use of the <code>allowSpeculativeMajorityReads</code> flag for the <code>find</code> command in transactions</li> </ul>"},{"location":"release_notes/4.4.18-18.html#improvements","title":"Improvements","text":"<ul> <li>PSMDB-1181 Add backup cursor parameters to cursor\u2019s metadata</li> </ul>"},{"location":"release_notes/4.4.18-18.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PSMDB-1177 Fixed incremental backup failure via <code>$backupCursor</code> for PSMDB 4.2/4.4</li> </ul>"},{"location":"release_notes/4.4.18-18.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.19-19.html","title":"Percona Server for MongoDB 4.4.19-19 (2023-03-20)","text":"Release date March 20, 2023 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.19-19 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.19 Community Edition enhanced with enterprise-grade features.  It supports MongoDB 4.4.19 protocols and drivers.</p>"},{"location":"release_notes/4.4.19-19.html#release-highlights","title":"Release Highlights","text":"<ul> <li>The support for authentication using AWS IAM enables you to natively integrate Percona Server for MongoDB with AWS services, increase security of your infrastructure by setting up password-less authentication and offload your DBAs from managing different sets of secrets. This a the technical preview feature</li> <li>Improved master key rotation for data at rest encrypted with HashiCorp Vault enables you to use the same secret key path on every server in your entire deployment thus significantly simplifying the secrets management and key rotation process.</li> </ul> <p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-68122 - Fixed the issue with adding a new unencrypted node into an encrypted replica set by removing options which might not apply for this node.</li> <li>SERVER-71759 - Changed the yielding policy of dataSize command to YIELD_AUTO for both when the command is called with estimate:true or false</li> <li>SERVER-72222 - Fixed the incorrect behavior of the <code>mapReduce</code> command with single reduce optimization in sharded clusters</li> <li>SERVER-72535 - Disallow creating the \u2018admin\u2019, \u2018local\u2019, and \u2018config\u2019 databases with alternative cases in names on sharded clusters</li> <li>SERVER-70235 - Fixed the issue with the upgrade from 4.2 to 4.4 when the UUID of the collections don\u2019t match by skipping the creation of range deletion documents upon upgrade</li> </ul> <p>Find the full list of changes in the MongoDB 4.4.19 Community Edition release notes</p>"},{"location":"release_notes/4.4.19-19.html#new-features","title":"New Features","text":"<ul> <li>PSMDB-1033: Add authentication with AWS IAM</li> </ul>"},{"location":"release_notes/4.4.19-19.html#improvements","title":"Improvements","text":"<ul> <li>PSMDB-1148: Improve the master key rotation when using a single master key for data-at-rest encryption with Vault in the entire deployment</li> </ul>"},{"location":"release_notes/4.4.19-19.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PSMDB-1201: Improved the error message if the attempt to save an encryption key to a KMIP server failed</li> <li>PSMDB-1203: Gracefully terminate <code>mongod</code> if the master encryption key can\u2019t be saved to a KMIP server</li> <li>PSMDB-1204: Fixed the handling of attributes list for LDAP authentication with OpenLDAP during the user to DN mapping stage</li> </ul>"},{"location":"release_notes/4.4.19-19.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.2-4.html","title":"Percona Server for MongoDB  4.4.2-4 (2020-12-01)","text":"Release date December 1, 2020 Installation Installing Percona Server for MongoDB <p>Warning</p> <p>This version is not recommended for production use due to the following critical issues: WT-7984 and WT-7995. They are fixed in MongoDB 4.4.9 Community Edition and Percona Server for MongoDB 4.4.9-10.</p> <p>We recommend you to upgrade to Percona Server for MongoDB 4.4.9-10 as soon as possible and run the validate command on every collection on every replica set node.</p> <p>Read more about the issues and post-upgrade steps in WT-7984 and WT-7995.</p> <p>Percona Server for MongoDB 4.4.2-4 is an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.2 Community Edition. It supports MongoDB 4.4.2 protocols and drivers.</p>"},{"location":"release_notes/4.4.2-4.html#improvements","title":"Improvements","text":"<ul> <li> <p>PSMDB-758: Add mongobridge as a part of percona-server-mongodb-server package</p> </li> <li> <p>PSMDB-755: Add ldapDebug, ldapFollowReferrals and ldapConnectionPoolSizePerHost server parameters</p> </li> <li> <p>PSMDB-711: Improve audit log performance</p> </li> </ul>"},{"location":"release_notes/4.4.2-4.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PSMDB-718: Audit log messages include datatype output</p> </li> <li> <p>PSMDB-712: User can\u2019t be authorized via LDAP due to \u2018LDAP search failed with error: Referral\u2019</p> </li> <li> <p>PSMDB-766: Redirect openldap debug messages to mongodb log</p> </li> <li> <p>PSMDB-715: createBackup using AWS remote location fails with \u201cEntityTooLarge\u201d</p> </li> <li> <p>PSMDB-544: Binaries perconadecrypt and mongobridge do not have a version</p> </li> </ul>"},{"location":"release_notes/4.4.2-4.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.21-20.html","title":"Percona Server for MongoDB 4.4.21-20 (2023-05-09)","text":"Release date May 9, 2023 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.21-20 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.20 Community Edition and MongoDB 4.4.21 Community Edition enhanced with enterprise-grade features.</p> <p>It supports protocols and drivers of both MongoDB 4.4.20 and 4.4.21.</p> <p>This release of Percona Server for MongoDB includes the improvements and bug fixes of MongoDB  Community Edition 4.4.20 and 4.4.21.</p>"},{"location":"release_notes/4.4.21-20.html#release-highlights","title":"Release Highlights","text":"<p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-51835 - Fixed the handling of the read preference tags to respect their order and ignore other tags when all eligible replica set members are found</li> <li>SERVER-75205 - Fixed deadlock between <code>stepdown</code> and <code>restoring</code> locks after yielding when all read tickets exhausted</li> <li>WT-9500 - Prevent rollback to stable operation to generate wrong updates/tombstones by always reading the cell time window information to decide the history store update visibility.</li> <li>SERVER-73229 - Fixed the issue with early kills of the cursor during the logical session cache refresh by properly handling write errors.</li> <li>SERVER-75261 - Added accounting for array element overhead for \u201clistCollections\u201d, \u201clistIndexes\u201d, \u201c_shardsvrCheckMetadataConsistencyParticipant\u201d commands</li> <li>SERVER-75431 - Improved the rename path behavior for a collection in sharded clusters by fixing the check for the databases to reside on the same primary shard </li> <li>SERVER-76098 - Allowed queries with search and non-simple collations</li> </ul> <p>Find the full list of changes in the MongoDB 4.4.20 Community Edition release notes and MongoDB 4.4.21 Community Edition release notes</p>"},{"location":"release_notes/4.4.21-20.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PSMDB-1211: Improved the master key rotation handling in case of failure</li> <li>PSMDB-1231: Register a master key for data-at-rest encryption encryption on the KMIP server in the raw-bytes form </li> <li>PSMDB-1239: Fixed the issue with PSMDB failing to restart when wrong data-at-rest encryption options were used during the previous start</li> </ul>"},{"location":"release_notes/4.4.21-20.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.22-21.html","title":"Percona Server for MongoDB 4.4.22-21 (2023-06-06)","text":"Release date June 6, 2023 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.22-21 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.22 Community Edition enhanced with enterprise-grade features.</p> <p>It supports protocols and drivers of MongoDB 4.4.22.</p>"},{"location":"release_notes/4.4.22-21.html#release-highlights","title":"Release Highlights","text":"<p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li> <p>WT-10551 - Fixed the bug with WiredTiger failing to load the incremental backup change bitmap for a file. The issue affects MongoDB versions 4.4.8 through 4.4.21, 5.0.2 through 5.0.17, and 6.0.0 through 6.0.5 causing the server to crash with the checksum error if the affected incremental backup was restored and the affected data is accessed.</p> <p>If you are using incremental backups, upgrade to the fixed upstream version 4.4.22 / Percona Server for MongoDB 4.4.22-21 as soon as possible. Follow closely the upstream recommendations to remediate the negative impact.  </p> </li> <li> <p>SERVER-48196 - Updated the built-in timezone files the latest version by upgrading the timezone library</p> </li> <li> <p>SERVER-57056 - Fixed the syslog severity level for INFO messages </p> </li> </ul> <p>Find the full list of changes in the MongoDB 4.4.22 Community Edition release notes.</p>"},{"location":"release_notes/4.4.22-21.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.23-22.html","title":"Percona Server for MongoDB 4.4.23-22 (2023-08-14)","text":"Release date August 14, 2023 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.23-22 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.23 Community Edition enhanced with enterprise-grade features.</p> <p>It supports protocols and drivers of MongoDB 4.4.23.</p>"},{"location":"release_notes/4.4.23-22.html#release-highlights","title":"Release Highlights","text":"<ul> <li>The ability to configure AWS STS endpoint improves authentication and connectivity with AWS services.</li> </ul> <p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-73943 - Improve the behavior of systems without swap memory space by pinning program code segments in memory on <code>mongod</code> startup.</li> <li>SERVER-75922 - Fixed the issue with the index uniqueness violations after upgrade from version 4.0 to versions 4.2 and later by falling back to old format partial index entry removal if an entry in the new format is not found in the index.</li> <li>SERVER-78126 - Fixed performance issues of the aggregation framework by improving the <code>Value::hash_combine()</code> function operation on big-endian platforms</li> </ul> <p>Find the full list of changes in the MongoDB 4.4.23 Community Edition release notes.</p>"},{"location":"release_notes/4.4.23-22.html#new-features","title":"New Features","text":"<ul> <li>PSMDB-1291 - Add the ability to specify the AWS Security Token Service (STS) endpoint for authentication</li> </ul>"},{"location":"release_notes/4.4.23-22.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PSMDB-1280 - Improve PSMDB behavior on client disconnect when the <code>$backupCursorExtend</code> is opened</li> <li>PSMDB-1289 - Fixed the issue with the server crash during LDAP authentication by retrying sending requests to the LDAP server and gracefully report errors. </li> </ul>"},{"location":"release_notes/4.4.23-22.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.24-23.html","title":"Percona Server for MongoDB 4.4.24-23 (2023-09-11)","text":"<p>Installation</p> <p>Percona Server for MongoDB 4.4.24-23 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.24 Community Edition enhanced with enterprise-grade features.</p> <p>It supports protocols and drivers of MongoDB 4.4.24.</p>"},{"location":"release_notes/4.4.24-23.html#release-highlights","title":"Release Highlights","text":"<ul> <li>Percona Server for MongoDB 4.4.24-23 features a Docker image for ARM64 architectures.</li> </ul> <p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-76299 - Improved issue identification during oplog application on secondary nodes by recording the number of writeConflicts in serverStatus.</li> <li>SERVER-78828 - Added taking snapshot of LDAP host timing data before sorting.</li> <li>WT-11031 -  Fixed the Rollback to Stable behavior to skip tables with no time window information in the checkpoint.</li> </ul> <p>Find the full list of changes in the MongoDB 4.4.24 Community Edition release notes.</p>"},{"location":"release_notes/4.4.24-23.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.25-24.html","title":"Percona Server for MongoDB 4.4.25-24 (2023-10-16)","text":"<p>Installation</p> <p>Percona Server for MongoDB 4.4.25-24 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.25 Community Edition enhanced with enterprise-grade features.</p> <p>It supports protocols and drivers of MongoDB 4.4.25.</p>"},{"location":"release_notes/4.4.25-24.html#release-highlights","title":"Release Highlights","text":"<p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-70973 - Improved the balancer behavior to stop iterating collections when there are no more available shards</li> <li>SERVER-71627 -  Improved performance of updating the routing table and prevented blocking client requests during refresh for clusters with 1 million of chunks</li> <li>SERVER-78813 - Fixed commit point propagation for exhaust oplog cursors.</li> <li>WT-8570 - Do not increase oldest ID during recovery and let all the history store records return to the rollback to stable irrespective of global visibility.</li> <li>WT-10449 - Do not save update chain when there are no updates to be written to the history store.</li> </ul> <p>Find the full list of changes in the MongoDB 4.4.25 Community Edition release notes.</p>"},{"location":"release_notes/4.4.25-24.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.26-25.html","title":"Percona Server for MongoDB 4.4.26-25 (2023-12-18)","text":"<p>Installation</p> <p>Percona Server for MongoDB 4.4.26-25 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.26 Community Edition enhanced with enterprise-grade features.</p> <p>It supports protocols and drivers of MongoDB 4.4.26.</p>"},{"location":"release_notes/4.4.26-25.html#release-highlights","title":"Release Highlights","text":"<ul> <li>AWS IAM authentication is now generally available, enabling you to use this functionality in production environments.</li> <li>You can now configure the retry behavior for Percona Server for MongoDB to connect to the KMIP server when using data-at-rest encryption.</li> <li>Percona Server for MongoDB now includes telemetry that fills in the gaps in our understanding of how you use Percona Server for MongoDB to improve our products. Participation in the anonymous program is optional. You can opt-out if you prefer not to share this information. Read more about Telemetry.  </li> </ul> <p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-50792 - Extend error message to provide more information why the index is invalid</li> <li>SERVER-80021 - Fixed the conversion form string to doubleValue to not lose precision and be able to rountrip and retrieve the same value back.</li> <li>SERVER-81106 - Improved the recipient shard behavior during the chunk migration to wait for changes to catalog cache to be persisted before the cloning phase.</li> <li>SERVER-81966 - Fixed the issue that caused the modification of the original ChunkMap vector during the chunk migration and that could lead to data loss. The issue affects MongoDB versions 4.4.25, 5.0.21, 6.0.10 through 6.0.11 and 7.0.1 through 7.0.2. Requires stopping all chunk merge activities and restarting all the binaries in the cluster (both <code>mongod</code> and <code>mongos</code>). Please follow closely the upstream recommendations how to remediate the issue.</li> <li>WT-10424 - Improved the performance of the search_near WiredTiger cursor operation if many deleted items are present by reducing the cache size.</li> </ul> <p>Find the full list of changes in the MongoDB 4.4.26 Community Edition release notes.</p>"},{"location":"release_notes/4.4.26-25.html#new-features","title":"New Features","text":"<ul> <li>PSMDB-1241 - Implement the <code>connectRetries</code> and the <code>connectTimeoutMS</code> configuration file options</li> </ul>"},{"location":"release_notes/4.4.26-25.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.27-26.html","title":"Percona Server for MongoDB 4.4.27-26 (2024-01-17)","text":"<p>Installation</p> <p>Percona Server for MongoDB 4.4.27-26 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.27 Community Edition enhanced with enterprise-grade features.</p> <p>It supports protocols and drivers of MongoDB 4.4.27.</p>"},{"location":"release_notes/4.4.27-26.html#release-highlights","title":"Release Highlights","text":"<p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-63865 - Handle missing index idents during standalone startup recovery after unclean shutdown.</li> <li>SERVER-81106 - Improved the recipient shard behavior during the chunk migration to wait for changes to catalog cache to be persisted before the cloning phase.</li> <li>SERVER-81878 - Improved the startupRecoveryForRestore behavior by allowing writes in read-only mode from ident reaper</li> <li>SERVER-82325 - Fixed the issue with the balancer hitting an invariant during balancer round</li> <li>WT-11564 - Fixed the rollback-to-stable behavior to read the newest transaction value only when it exists in the checkpoint.</li> </ul> <p>Find the full list of changes in the MongoDB 4.4.27 Community Edition release notes.</p>"},{"location":"release_notes/4.4.27-26.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.28-27.html","title":"Percona Server for MongoDB 4.4.28-27 (2024-02-07)","text":"<p>Installation</p> <p>Percona Server for MongoDB 4.4.28-27 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.28 Community Edition enhanced with enterprise-grade features.</p> <p>It supports protocols and drivers of MongoDB 4.4.28.</p>"},{"location":"release_notes/4.4.28-27.html#release-highlights","title":"Release Highlights","text":"<p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-77506 - Fixed the issue with the data and the ShardVersion mismatch for sharded multi-document transactions by adding the check that no chunk has moved for the collection being referenced since transaction started</li> <li>SERVER-82365 - Improved cluster balancer performance by optimizing the construction of the balancer\u2019s collection distribution status histogram</li> <li>SERVER-82883 - Fixed the issue with blocking acquiring read/write tickets by TransactionCoordinator by validating that it can be recovered on step-up and can commit the transaction when there are no storage tickets available</li> <li>WT-7929 - Investigated a solution to avoid a Full Time Diagnostic Data Capture (FTDC) mechanism to stall during checkpoint</li> </ul> <p>Find the full list of changes in the MongoDB 4.4.28 Community Edition release notes.</p>"},{"location":"release_notes/4.4.28-27.html#packaging-changes","title":"Packaging changes","text":"<p>Percona Server for MongoDB 4.4.28-27 is no longer available on Ubuntu 18.04 (Bionic Beaver). </p>"},{"location":"release_notes/4.4.28-27.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.29-28.html","title":"Percona Server for MongoDB 4.4.29-28 (2024-04-02)","text":"<p>Installation</p> <p>Percona Server for MongoDB 4.4.29-28 is a source available, highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.29 Community Edition enhanced with enterprise-grade features.</p> <p>It supports protocols and drivers of MongoDB 4.4.29.</p> <p>Warning</p> <p>Due to CVE-2024-1351, in all MongoDB versions prior to 4.4.29, the <code>mongod</code> server allows incoming connections to skip peer certificate validation which results in untrusted connections to succeed. This issue occurs when the <code>mongod</code> is started with TLS enabled (<code>net.tls.mode</code> set to <code>allowTLS</code>, <code>preferTLS</code>, or <code>requireTLS</code>) and without a <code>net.tls.CAFile</code> configured. For details, see SERVER-72839.</p> <p>The issue is fixed upstream in versions 4.4.29, 5.0.25, 6.0.14 and 7.0.6 and in Percona Server for MongoDB 4.4.29-28, 5.0.25-22, 6.0.14-11 and 7.0.7-4. Now, configuring MongoDB to use TLS requires specifying the value for the <code>--tlsCAFile</code> flag, the <code>net.tls.CAFile</code>configuration option, or the <code>tlsUseSystemCA</code> parameter.</p>"},{"location":"release_notes/4.4.29-28.html#release-highlights","title":"Release Highlights","text":"<ul> <li>This is the last minor release in Percona Server for MongoDB 4.4. </li> </ul> <p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li>SERVER-72839 - Fixed the issue with missing peer certificate validation if neither CAFile nor clusterCAFile is provided.</li> <li>SERVER-70155 - Add duration of how long an oplog slot is kept open by a write operation before commit to \u2018Slow query\u2019 log messages and the profiler data</li> <li>SERVER-82353  - Fixed the issue with multi-document transactions missing documents when the movePrimary operation runs concurrently by detecting placement conflicts in multi-document transactions </li> <li>SERVER-83564 - Add an index on the process field for the <code>config.locks</code> collection to ensure update operations on it are completed even in heavy loaded deployments.</li> <li>SERVER-85536 - Don\u2019t trigger write conflicts when removing unindexed documents on unique partial indexes</li> </ul> <p>Find the full list of changes in the MongoDB 4.4.29 Community Edition release notes.</p>"},{"location":"release_notes/4.4.29-28.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.3-5.html","title":"Percona Server for MongoDB 4.4.3-5 (2021-01-27)","text":"Release date January 27, 2021 Installation Installing Percona Server for MongoDB <p>Warning</p> <p>This version is not recommended for production use due to the following critical issues: WT-7984 and WT-7995. They are fixed in MongoDB 4.4.9 Community Edition and Percona Server for MongoDB 4.4.9-10.</p> <p>We recommend you to upgrade to Percona Server for MongoDB 4.4.9-10 as soon as possible and run the validate command on every collection on every replica set node.</p> <p>Read more about the issues and post-upgrade steps in WT-7984 and WT-7995.</p> <p>Percona Server for MongoDB 4.4.3-5 is an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.3 Community Edition. It supports MongoDB 4.4.3 protocols and drivers.</p>"},{"location":"release_notes/4.4.3-5.html#improvements","title":"Improvements","text":"<ul> <li> <p>PSMDB-745: Add support for multiple LDAP servers for authentication</p> </li> <li> <p>PSMDB-761: Add <code>validateLDAPServerConfig</code> config option</p> </li> </ul>"},{"location":"release_notes/4.4.3-5.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PSMDB-788: Fix LDAP rebind procedure to allow LDAP referrals to work with ldapBindMethod==sasl</li> </ul>"},{"location":"release_notes/4.4.3-5.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.4-6.html","title":"Percona Server for MongoDB 4.4.4-6 (2021-02-25)","text":"Release date February 25, 2021 Installation Installing Percona Server for MongoDB <p>Warning</p> <p>This version is not recommended for production use due to the following critical issues: WT-7984 and WT-7995. They are fixed in MongoDB 4.4.9 Community Edition and Percona Server for MongoDB 4.4.9-10.</p> <p>We recommend you to upgrade to Percona Server for MongoDB 4.4.9-10 as soon as possible and run the validate command on every collection on every replica set node.</p> <p>Read more about the issues and post-upgrade steps in WT-7984 and WT-7995.</p> <p>Percona Server for MongoDB 4.4.4-6 is an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.4 Community Edition. It supports MongoDB 4.4.4 protocols and drivers.</p>"},{"location":"release_notes/4.4.4-6.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PSMDB-817: LDAP ConnectionPoller always uses up CPU of one core (Thanks to user cleiton.domazak for reporting this issue)</li> </ul>"},{"location":"release_notes/4.4.4-6.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.5-7.html","title":"Percona Server for MongoDB 4.4.5-7 (2021-04-19)","text":"Release date April 19, 2021 Installation Installing Percona Server for MongoDB <p>Warning</p> <p>This version is not recommended for production use due to the following critical issues:</p> <ul> <li> <p>WT-7426,</p> </li> <li> <p>WT-7984 and</p> </li> <li> <p>WT-7995.</p> </li> </ul> <p>The issue WT-7426 is fixed in MongoDB 4.4.6 Community Edition and Percona Server for MongoDB 4.4.6-8.</p> <p>WT-7984 and WT-7995 are fixed in MongoDB 4.4.9 Community Edition and Percona Server for MongoDB 4.4.9-10.</p> <p>We recommend you to upgrade to Percona Server for MongoDB 4.4.9-10 as soon as possible and run the validate command on every collection on every replica set node.</p> <p>Read more about the issues and post-upgrade steps in WT-7984 and WT-7995.</p> <p>Percona Server for MongoDB 4.4.5-7 is based on MongoDB 4.4.5 Community Edition and does not include any additional changes.</p>"},{"location":"release_notes/4.4.5-7.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.6-8.html","title":"Percona Server for MongoDB 4.4.6-8 (2021-08-16)","text":"Release date June 2, 2021 Installation Installing Percona Server for MongoDB <p>Warning</p> <p>This version is not recommended for production use due to the following critical issues: WT-7984 and WT-7995. They are fixed in MongoDB 4.4.9 Community Edition and Percona Server for MongoDB 4.4.9-10.</p> <p>We recommend you to upgrade to Percona Server for MongoDB 4.4.9-10 as soon as possible and run the validate command on every collection on every replica set node.</p> <p>Read more about the issues and post-upgrade steps in WT-7984 and WT-7995.</p> <p>Percona Server for MongoDB 4.4.6-8 is an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.6 Community Edition. It supports MongoDB 4.4.6 protocols and drivers.</p>"},{"location":"release_notes/4.4.6-8.html#new-features","title":"New Features","text":"<ul> <li>PSMDB-802: Create $backupCursor and $backupCursorExtend aggregation stages. (Tech Preview Feature )</li> </ul>"},{"location":"release_notes/4.4.6-8.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.8-9.html","title":"Percona Server for MongoDB 4.4.8-9 (2021-08-16)","text":"Release date August 16, 2021 Installation Installing Percona Server for MongoDB <p>Warning</p> <p>This version is not recommended for production use due to the following critical issues: WT-7984 and WT-7995. They are fixed in MongoDB 4.4.9 Community Edition and Percona Server for MongoDB 4.4.9-10.</p> <p>We recommend you to upgrade to Percona Server for MongoDB 4.4.9-10 and run the validate command on every collection on every replica set node.</p> <p>Read more about the  post-upgrade steps in WT-7984 and WT-7995.</p> <p>Percona Server for MongoDB 4.4.8-9 is an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.8 Community Edition. It supports MongoDB 4.4.8 protocols and drivers.</p>"},{"location":"release_notes/4.4.8-9.html#improvements","title":"Improvements","text":"<ul> <li> <p>PSMDB-211: Add the ability to view the status of hot backup using the <code>mongo</code> shell</p> </li> <li> <p>PSMDB-824, PSMDB-892, PSMDB-807: Remove excessive log messages and improve error messages for various backup cases</p> </li> </ul>"},{"location":"release_notes/4.4.8-9.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PSMDB-210: Add the ability to stop a running hot backup with the  <code>killOp()</code> method</p> </li> <li> <p>PSMDB-902: The <code>rateLimit</code> field can now be used to filter audit logs</p> </li> <li> <p>PSMDB-876: Fix limiting of the database Profiler with the <code>rateLimit</code> option</p> </li> <li> <p>PSMDB-873: Add missing runtime dependencies for LDAP authentication against active directory in RPM packages</p> </li> </ul>"},{"location":"release_notes/4.4.8-9.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release_notes/4.4.9-10.html","title":"Percona Server for MongoDB 4.4.9-10 (2021-10-07)","text":"Release date October 7, 2021 Installation Installing Percona Server for MongoDB <p>Percona Server for MongoDB 4.4.9-10 is an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.4.9 Community Edition. It supports MongoDB 4.4.9 protocols and drivers.</p> <p>WARNING: Beginning with MongoDB 4.4.2, several data impacting or corrupting bugs were introduced. Details are listed below.</p> <p>These bugs are fixed in MongoDB 4.4.9. Percona Server for MongoDB 4.4.9-10 includes the upstream fixes of these bugs.</p> <p>Please upgrade to MongoDB 4.4.9 or Percona Server for MongoDB 4.4.9-10  as soon as possible.</p>"},{"location":"release_notes/4.4.9-10.html#release-highlights","title":"Release Highlights","text":"<p>The bug fixes, provided by MongoDB and included in Percona Server for MongoDB, are the following:</p> <ul> <li> <p>WT-7426 - After upgrade to v4.4.5, startups or restarts can trigger WiredTigers RTS bug which can corrupt page metadata causing documents on affected pages to become invisible to MongoDB. This can lead to temporary query incorrectness, or more likely a fatal error and inability to restart. Affects only MongoDB 4.4.5 and Percona Server for MongoDB 4.4.5-7.</p> </li> <li> <p>SERVER-58936 - Unique Index constraint violations possible - can cause duplicate data - fixed in version 4.4.8.</p> </li> <li> <p>WT-7995 - Checkpoint thread can read and persist inconsistent version of data to disk. Can cause Duplicate Key error on startup and prevent the node from starting. Unclean shutdowns can cause data inconsistency within documents, deleted documents to still exist, incomplete query results due to lost or inaccurate index entries, and/or missing documents. Affects MongoDB versions 4.4.2 through 4.4.8 and Percona Server for MongoDB 4.4.2-4 - 4.4.8-9 as well as MongoDB 5.0.0 through 5.0.2. Upgrade to fixed version of MongoDB 4.4.9 / Percona Server for MongoDB 4.4.9-10 as soon as possible.</p> </li> <li> <p>WT-7984 and associated Server Bug SERVER-60371.</p> </li> <li> <p>WT-7984 - Bug that could cause Checkpoint thread to omit a page of data. If the server experiences an unclean shutdown, an inconsistent checkpoint is used for recovery and causes data corruption. Fixed in version 4.4.9. Requires the validate  command to be run and possible data remediation via complete initial sync.</p> </li> <li> <p>SERVER-60371 - If previously upgraded to version 4.4.8 then upgrade to 4.4.9, could still experience Duplicate Key error and Fatal assertion. Related to the two previous WiredTiger bugs.</p> </li> </ul> <p>Requires the validate command to be run and possible data remediation via complete initial sync. Currently under review.</p> <p>Find the full list of changes in the MongoDB 4.4.9 Community Edition release notes.</p>"},{"location":"release_notes/4.4.9-10.html#improvements","title":"Improvements","text":"<ul> <li>PSMDB-918: Disable the ability to delete the mongod user in RPM packages - This preserves the permissions to the MongoDB data directory for the <code>mongod</code> user as its user ID and group ID remain unchanged.</li> </ul>"},{"location":"release_notes/4.4.9-10.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"}]}